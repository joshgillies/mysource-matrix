<?xml version='1.0' encoding='UTF-8' ?>
<!--
/**
* +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
* | This MySource Matrix CMS file is Copyright (c) Squiz Pty Ltd       |
* | ACN 084 670 600                                                    |
* +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
* | IMPORTANT: Your use of this Software is subject to the terms of    |
* | the Licence provided in the file licence.txt. If you cannot find   |
* | this file please contact Squiz (www.squiz.net) so we may provide   |
* | you a copy.                                                        |
* +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
*
* $Id: oci_functions.xml,v 1.5.4.1 2012/02/29 02:01:23 csmith Exp $
*
*/
-->
<sql>
	<sql_element display_name="Varchar 500 Table Type">
		<![CDATA[
			CREATE OR REPLACE TYPE VARCHAR_500_TABLE is TABLE OF VARCHAR2(500);
		]]>
	</sql_element>
	<sql_element display_name="Varchar 2000 Table Type">
		<![CDATA[
			CREATE OR REPLACE TYPE VARCHAR_2000_TABLE is TABLE OF VARCHAR2(2000);
		]]>
	</sql_element>
	<sql_element display_name="common_pkg Package">
		<![CDATA[
			CREATE OR REPLACE PACKAGE sq_common_pkg AS
				PROCEDURE sq_set_rollback_timestamp(in_date IN DATE := NULL);
				FUNCTION sq_get_rollback_timestamp RETURN DATE;
			END sq_common_pkg;
		]]>
	</sql_element>
	<sql_element display_name="common_pkg Package Body">
		<![CDATA[
			CREATE OR REPLACE PACKAGE BODY sq_common_pkg AS

				v_date DATE;

				PROCEDURE sq_set_rollback_timestamp(in_date IN DATE := NULL) IS
				BEGIN
					IF in_date IS NULL THEN
						SELECT sysdate INTO v_date FROM dual;
					ELSE
						v_date := in_date;
					END IF;
				END;

				FUNCTION sq_get_rollback_timestamp RETURN DATE IS
				BEGIN
						RETURN v_date;
				END;
			END sq_common_pkg;
		]]>
	</sql_element>
	<sql_element display_name="sq_get_parent_treeids Function">
		<![CDATA[
			-- returns the parent treeids for the specified assetid
			-- if timestamp is null then the function will assume that we are not in rollback mode
			-- if the timestamp is valid the function will return the treeids from the rollback tables
			CREATE OR REPLACE FUNCTION sq_get_parent_treeids(minorid IN VARCHAR2, SQ_TREE_BASE_SIZE IN INTEGER , rb_date IN DATE := NULL) RETURN VARCHAR_2000_TABLE IS
				offset int;
				next_treeid VARCHAR2(2000);
				db_treeid VARCHAR2(2000);
				parent_treeids VARCHAR_2000_TABLE := VARCHAR_2000_TABLE();
				concat_treeids VARCHAR2(2000);
				table_prefix VARCHAR2(6);
				sql_str VARCHAR2(2000);
				cursor_ptr INTEGER;
				ignore INTEGER;
			BEGIN
				IF rb_date IS NULL THEN
					table_prefix := 'sq_';
				ELSE
					table_prefix := 'sq_rb_';
				END IF;

				sql_str := 'SELECT treeid FROM ' || table_prefix || 'ast_lnk l INNER JOIN ' || table_prefix || 'ast_lnk_tree t ON l.linkid = t.linkid
						WHERE l.minorid = "' || minorid || '"';

				IF rb_date IS NOT NULL THEN
					sql_str := sql_str || ' AND l.sq_eff_from <= TO_DATE("' || rb_date || '", "YYYY-MM-DD HH24:MI:SS")'
						|| ' AND (l.sq_eff_to IS NULL OR l.sq_eff_to > TO_DATE("' || rb_date || '", "YYYY-MM-DD HH24:MI:SS")' || ')';

					sql_str := sql_str || ' AND t.sq_eff_from <= TO_DATE("' || rb_date || '", "YYYY-MM-DD HH24:MI:SS")'
						|| ' AND (t.sq_eff_to IS NULL OR t.sq_eff_to > TO_DATE("' || rb_date || '", "YYYY-MM-DD HH24:MI:SS")' || ')';
				END IF;

				sql_str := replace(sql_str, '"', '''' );

				cursor_ptr := DBMS_SQL.open_cursor;
				DBMS_SQL.PARSE(cursor_ptr, sql_str, DBMS_SQL.V7);
				DBMS_SQL.DEFINE_COLUMN(cursor_ptr, 1, db_treeid, 500);
				ignore := DBMS_SQL.EXECUTE(cursor_ptr);

				LOOP
					IF DBMS_SQL.FETCH_ROWS(cursor_ptr) > 0 THEN
						DBMS_SQL.COLUMN_VALUE(cursor_ptr, 1, db_treeid);
						offset := 1;
						concat_treeids := '';
						LOOP
							next_treeid := SUBSTR(db_treeid, offset, SQ_TREE_BASE_SIZE);
							EXIT WHEN next_treeid IS NULL;
							concat_treeids := concat_treeids || next_treeid;
							parent_treeids.extend;
							parent_treeids(parent_treeids.count) := concat_treeids;
							offset := offset + SQ_TREE_BASE_SIZE;
						END LOOP;
					ELSE
						EXIT;
					END IF;
				END LOOP;

				DBMS_SQL.CLOSE_CURSOR(cursor_ptr);
				RETURN parent_treeids;
			END sq_get_parent_treeids;
		]]>
	</sql_element>
    <sql_element display_name="sq_get_lineage_treeids Function">
        <![CDATA[
        CREATE OR REPLACE FUNCTION sq_get_lineage_treeids(minorid IN VARCHAR2, SQ_TREE_BASE_SIZE IN INTEGER , rb_date IN DATE := NULL, link_types IN INTEGER := NULL) RETURN VARCHAR_2000_TABLE IS
				offset int;
				next_treeid VARCHAR2(2000);
				db_treeid VARCHAR2(2000);
				parent_treeids VARCHAR_2000_TABLE := VARCHAR_2000_TABLE();
				concat_treeids VARCHAR2(2000);
				table_prefix VARCHAR2(6);
				sql_str VARCHAR2(2000);
				sub_sql_str VARCHAR2(2000);
				cursor_ptr INTEGER;
				ignore INTEGER;
			BEGIN
				IF rb_date IS NULL THEN
					table_prefix := 'sq_';
				ELSE
					table_prefix := 'sq_rb_';
				END IF;
				
				sub_sql_str := '(SELECT lx.majorid FROM ' || table_prefix || 'ast_lnk lx WHERE lx.minorid = "' || minorid || '"';

				IF link_types IS NOT NULL THEN
					sub_sql_str := sub_sql_str || ' AND lx.link_type < "' || link_types || '"';
				END IF;
				
				IF rb_date IS NOT NULL THEN
					-- note the extra bracket at the end of this statement to close the clause above
                    sub_sql_str := sub_sql_str || ' AND lx.sq_eff_from <= TO_DATE("' || rb_date || '", "YYYY-MM-DD HH24:MI:SS")'
						|| ' AND (lx.sq_eff_to IS NULL OR lx.sq_eff_to > TO_DATE("' || rb_date || '", "YYYY-MM-DD HH24:MI:SS")' || '))';
               	ELSE
                    -- close the clause above
                    sub_sql_str := sub_sql_str || ')';
                END IF;
				
				sql_str := 'SELECT treeid FROM ' || table_prefix || 'ast_lnk l 
							INNER JOIN ' || table_prefix || 'ast_lnk_tree t ON l.linkid = t.linkid
							INNER JOIN ' || sub_sql_str || ' x ON l.minorid = x.majorid';

				IF rb_date IS NOT NULL THEN
                    sql_str := sql_str || ' WHERE l.sq_eff_from <= TO_DATE("' || rb_date || '", "YYYY-MM-DD HH24:MI:SS")'
						|| ' AND (l.sq_eff_to IS NULL OR l.sq_eff_to > TO_DATE("' || rb_date || '", "YYYY-MM-DD HH24:MI:SS")' || ')';

					sql_str := sql_str || ' AND t.sq_eff_from <= TO_DATE("' || rb_date || '", "YYYY-MM-DD HH24:MI:SS")'
						|| ' AND (t.sq_eff_to IS NULL OR t.sq_eff_to > TO_DATE("' || rb_date || '", "YYYY-MM-DD HH24:MI:SS")' || ')';
				END IF;

				sql_str := replace(sql_str, '"', '''' );

				cursor_ptr := DBMS_SQL.open_cursor;
				DBMS_SQL.PARSE(cursor_ptr, sql_str, DBMS_SQL.V7);
				DBMS_SQL.DEFINE_COLUMN(cursor_ptr, 1, db_treeid, 500);
				ignore := DBMS_SQL.EXECUTE(cursor_ptr);

				LOOP
					IF DBMS_SQL.FETCH_ROWS(cursor_ptr) > 0 THEN
						DBMS_SQL.COLUMN_VALUE(cursor_ptr, 1, db_treeid);
						offset := 1;
						concat_treeids := '';
						LOOP
							next_treeid := SUBSTR(db_treeid, offset, SQ_TREE_BASE_SIZE);
							EXIT WHEN next_treeid IS NULL;
							concat_treeids := concat_treeids || next_treeid;
							parent_treeids.extend;
							parent_treeids(parent_treeids.count) := concat_treeids;
							offset := offset + SQ_TREE_BASE_SIZE;
						END LOOP;
					ELSE
						EXIT;
					END IF;
				END LOOP;

				DBMS_SQL.CLOSE_CURSOR(cursor_ptr);
				RETURN parent_treeids;
			END sq_get_lineage_treeids;
        ]]>
    </sql_element>
    <sql_element display_name="sq_rb_get_parent_treeids Function">
		<![CDATA[
			-- returns the parent treeids for the specified assetid using the date
			-- acquired from the sq_get_rollback_timestamp function
			CREATE OR REPLACE FUNCTION sq_rb_get_parent_treeids(minorid IN VARCHAR2, SQ_TREE_BASE_SIZE IN INTEGER) RETURN VARCHAR_2000_TABLE IS
				rb_date DATE;
			BEGIN
				rb_date := sq_common_pkg.sq_get_rollback_timestamp();
				RETURN sq_get_parent_treeids(minorid, SQ_TREE_BASE_SIZE, rb_date);
			END sq_rb_get_parent_treeids;
		]]>
	</sql_element>
	<sql_element display_name="sq_rb_get_lineage_treeids Function">
		<![CDATA[
			-- returns the parent treeids for the specified assetid using the date
			-- acquired from the sq_get_rollback_timestamp function
			CREATE OR REPLACE FUNCTION sq_rb_get_lineage_treeids(minorid IN VARCHAR2, SQ_TREE_BASE_SIZE IN INTEGER, rb_date_dummy IN DATE := NULL, link_types IN INTEGER := NULL) RETURN VARCHAR_2000_TABLE IS
				rb_date DATE;
			BEGIN
				rb_date := sq_common_pkg.sq_get_rollback_timestamp();
				RETURN sq_get_lineage_treeids(minorid, SQ_TREE_BASE_SIZE, rb_date, link_types);
			END sq_rb_get_lineage_treeids;
		]]>
	</sql_element>
	<sql_element display_name="asset_link_treeid_convert Function">
		<![CDATA[
		CREATE OR REPLACE FUNCTION asset_link_treeid_convert(value IN VARCHAR2, encode IN CHAR, TREE_BASE IN INTEGER, TREE_SIZE IN INTEGER) RETURN VARCHAR2 IS
			str VARCHAR2(2000);
			pad_str VARCHAR2(2000);
			i INTEGER   := 0;
			x INTEGER   := 0;
			d INTEGER   := 0;
			num INTEGER := 0;
			pos INTEGER := 0;
			DIGITS CONSTANT CHAR(64) := '0123456789=ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz~';
		BEGIN
			IF encode = '1' THEN

				i := CAST(value AS INTEGER);
				WHILE i != 0 LOOP
					pos := MOD(i, TREE_BASE);
					str := SUBSTR(DIGITS, pos + 1, 1) || str;
					i := FLOOR(i / TREE_BASE);
				END LOOP;
				IF LENGTH(str) > TREE_SIZE THEN
					RAISE_APPLICATION_ERROR(-20001, 'Broken! value: ' || value || ' str: ' || str || ' TREE_SIZE : ' || TREE_SIZE);
					RETURN NULL;
				ELSE
					IF str IS NULL THEN
						pos := TREE_SIZE;
					ELSE
						pos := (TREE_SIZE - LENGTH(str));
					END IF;
					FOR i IN 1..pos LOOP
						pad_str := pad_str || SUBSTR(DIGITS, 0, 1);
					END LOOP;
					RETURN pad_str || str;
				END IF;
			ELSE
				num := 0;
				x := POWER(TREE_BASE, LENGTH(value) - 1);
				FOR i IN 1..LENGTH(value) LOOP
					d := INSTR(DIGITS, SUBSTR(value, i, 1));
					IF d = 0 THEN
						RETURN NULL;
					END IF;
					-- -1 from d as instr starts at 1 not 0
					d := d - 1;
					num := num + (x * d);
					x := x / TREE_BASE;
				END LOOP;
				RETURN num;
			END IF;
		END asset_link_treeid_convert;
		]]>
	</sql_element>
</sql>
