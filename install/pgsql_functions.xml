<?xml version='1.0' encoding='UTF-8' ?>
<!--
/**
* +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
* | This MySource Matrix CMS file is Copyright (c) Squiz Pty Ltd       |
* | ACN 084 670 600                                                    |
* +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
* | IMPORTANT: Your use of this Software is subject to the terms of    |
* | the Licence provided in the file licence.txt. If you cannot find   |
* | this file please contact Squiz (www.squiz.net) so we may provide   |
* | you a copy.                                                        |
* +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
*
* $Id: pgsql_functions.xml,v 1.17 2006/12/06 05:17:23 bcaldwell Exp $
*
*/
-->
<sql>
    <sql_element display_name="sq_grant_access Function">
        <![CDATA[
            -- creates a function that grants access to the secondary user.
            -- This function should be called after all the tables in the system
            -- have been created
            CREATE OR REPLACE FUNCTION sq_grant_access(character varying) RETURNS TEXT AS '
            DECLARE
                user_name ALIAS FOR $1;
                table RECORD;
                tablename TEXT;
            BEGIN
                FOR table IN SELECT c.relname AS name FROM pg_catalog.pg_class c LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace WHERE c.relkind IN (''r'',''v'',''S'','''') AND n.nspname NOT IN (''pg_catalog'', ''pg_toast'') AND pg_catalog.pg_table_is_visible(c.oid) LOOP
                    tablename=table.name;
                    RAISE NOTICE ''tablename is %'', tablename;
                    EXECUTE ''GRANT ALL ON '' || quote_ident(tablename) || '' TO '' || quote_ident(user_name::text);
                END LOOP;
                RETURN ''access granted.'';
            END;
            '
            LANGUAGE plpgsql;
        ]]>
    </sql_element>
    <sql_element display_name="sq_set_rollback_timestamp(TIMESTAMP) Function">
        <![CDATA[
            -- Creates a function to set the rollback timestamp so that when
            -- rollback entries are updated, they are aligned
            CREATE OR REPLACE FUNCTION sq_set_rollback_timestamp(TIMESTAMP) RETURNS void AS '
            DECLARE
                ts TIMESTAMP;
                rec RECORD;
            BEGIN

                -- try to find a temporary table with the name of sq_rollback_timestamp where
                -- it exists in our temporary schema name

                PERFORM *
                    FROM pg_tables
                    WHERE
                        tablename = ''sq_rollback_timestamp'' AND schemaname = (current_schemas(true))[1];

                IF NOT FOUND THEN
                    EXECUTE ''CREATE TEMP TABLE sq_rollback_timestamp(
                        rb_timestamp TIMESTAMP not null
                    )'';
                ELSE
                    RETURN;
                END IF;

                FOR rec in EXECUTE ''SELECT rb_timestamp FROM sq_rollback_timestamp'' LOOP
                    ts := rec.rb_timestamp;
                END LOOP;

                IF NOT FOUND THEN
                    EXECUTE ''INSERT INTO sq_rollback_timestamp VALUES(now()::timestamp)'';
                END IF;

                RETURN;
            END;
            ' language plpgsql VOLATILE;
        ]]>
    </sql_element>
    <sql_element display_name="sq_set_rollback_timestamp Function">
        <![CDATA[
            -- Creates a function to set the rollback timestamp so that when
            -- rollback entries are updated, they are aligned
            CREATE OR REPLACE FUNCTION sq_set_rollback_timestamp() RETURNS void AS '
            DECLARE
            BEGIN
                PERFORM sq_set_rollback_timestamp(now()::TIMESTAMP);
                RETURN;
            END;
            ' language plpgsql VOLATILE;
        ]]>
    </sql_element>
    <sql_element display_name="sq_get_rollback_timestamp Function">
        <![CDATA[
            -- Gets the rollback timestamp for the current transaction
            CREATE OR REPLACE FUNCTION sq_get_rollback_timestamp() RETURNS TIMESTAMP AS '
            DECLARE
                ts timestamp;
                rec RECORD;
            BEGIN
                PERFORM sq_set_rollback_timestamp();

                FOR rec IN EXECUTE ''SELECT TO_CHAR(rb_timestamp, ''''YYYY-MM-DD HH24:MI:SS'''') as sts from sq_rollback_timestamp LIMIT 1'' LOOP
                    ts := rec.sts;
                END LOOP;
                RETURN ts;
            END;
            ' language plpgsql VOLATILE;
        ]]>
    </sql_element>
    <sql_element display_name="sq_get_lineage_from_url Function">
        <![CDATA[
            -- splits the specified url into its root url components out to the specified url
            CREATE OR REPLACE FUNCTION sq_get_lineage_from_url(VARCHAR) RETURNS SETOF VARCHAR AS '
            DECLARE
                offset int;
                url ALIAS FOR $1;
                next_url VARCHAR;
                concat_url VARCHAR;
            BEGIN
                offset := 1;
                concat_url := '''';
                LOOP
                    next_url := split_part(url, ''/'', offset);
                    IF next_url = '''' THEN
                        EXIT;
                    END IF;
                    concat_url := concat_url;
                    IF concat_url != '''' THEN
                        concat_url := concat_url || ''/'';
                    END IF;
                    concat_url := concat_url || next_url;

                    RETURN next concat_url;
                    offset := offset + 1;
                END LOOP;
                RETURN;
            END;
            ' LANGUAGE plpgsql;
        ]]>
    </sql_element>
    <sql_element display_name="sq_get_parent_treeids(VARCHAR, INT, TIMESTAMP) Function">
        <![CDATA[
            -- returns the parent treeids for the specified assetid
            -- if timestamp is null then the function will assume that we are not in rollback mode
            -- if the timestamp is valid the function will return the treeids from the rollback tables
            CREATE OR REPLACE FUNCTION sq_get_parent_treeids(VARCHAR, INT, TIMESTAMP) RETURNS SETOF BYTEA AS '
            DECLARE
                treeids RECORD;
                offset int;
                minorid ALIAS FOR $1;
                next_treeid BYTEA;
                concat_treeids BYTEA;
                SQ_TREE_BASE_SIZE ALIAS FOR $2;
                rb_date ALIAS FOR $3;
                table_prefix VARCHAR;
                sql VARCHAR;
            BEGIN
                IF rb_date IS NULL THEN
                    table_prefix := ''sq_'';
                ELSE
                    table_prefix := ''sq_rb_'';
                END IF;

                sql := ''SELECT treeid FROM '' || table_prefix || ''ast_lnk l INNER JOIN '' || table_prefix || ''ast_lnk_tree t ON l.linkid = t.linkid
                    WHERE l.minorid = '''''' || minorid || '''''''';

                IF rb_date IS NOT NULL THEN
                    sql := sql || '' AND l.sq_eff_from <= '''''' || rb_date ||
                              '''''' AND (l.sq_eff_to IS NULL
                                 OR l.sq_eff_to > '''''' || rb_date || '''''''' || '')'';

                    sql := sql || '' AND t.sq_eff_from <= '''''' || rb_date ||
                              '''''' AND (t.sq_eff_to IS NULL
                                 OR t.sq_eff_to > '''''' || rb_date || '''''''' || '')'';
                END IF;

                FOR treeids IN EXECUTE sql LOOP
                    offset := 1;
                    concat_treeids := '''';
                    LOOP
                        next_treeid := SUBSTR(treeids.treeid, offset, SQ_TREE_BASE_SIZE);
                        IF next_treeid = '''' THEN
                            EXIT;
                        END IF;
                        concat_treeids := concat_treeids || next_treeid;
                        return next concat_treeids;
                        offset := offset + SQ_TREE_BASE_SIZE;
                    END LOOP;
                END LOOP;
                RETURN;
            END;
            ' LANGUAGE plpgsql;
        ]]>
    </sql_element>
    <sql_element display_name="sq_get_parent_treeids(VARCHAR, INT) Function">
        <![CDATA[
            -- returns the parent treeids for the specified assetid
            CREATE OR REPLACE FUNCTION sq_get_parent_treeids(VARCHAR, INT) RETURNS SETOF BYTEA AS '
            DECLARE
                rec record;
            BEGIN
                for rec in select sq_get_parent_treeids from sq_get_parent_treeids($1, $2, null) loop
                    return next rec.sq_get_parent_treeids;
                end loop;
                return;
            END;
            ' language plpgsql;
        ]]>
    </sql_element>
    <sql_element display_name="sq_rb_get_parent_treeids(VARCHAR, INT) Function">
        <![CDATA[
            -- returns the parent treeids for the specified assetid using the date
            --acquired from the sq_get_rollback_timestamp function
            CREATE OR REPLACE FUNCTION sq_rb_get_parent_treeids(VARCHAR, INT) RETURNS SETOF BYTEA AS '
            DECLARE
                rec record;
                rb_date TIMESTAMP;
            BEGIN
                rb_date := sq_get_rollback_timestamp();
                for rec in select sq_get_parent_treeids from sq_get_parent_treeids($1, $2, rb_date) loop
                    return next rec.sq_get_parent_treeids;
                end loop;
                return;
            END;
            ' language plpgsql;
        ]]>
    </sql_element>
    <sql_element display_name="sq_get_lineage_treeids(VARCHAR, INT, TIMESTAMP) Function">
        <![CDATA[
            CREATE OR REPLACE FUNCTION sq_get_lineage_treeids(VARCHAR, INT, TIMESTAMP) RETURNS SETOF BYTEA AS '
            DECLARE
                treeids RECORD;
                offset int;
                minorid ALIAS FOR $1;
                next_treeid BYTEA;
                concat_treeids BYTEA;
                SQ_TREE_BASE_SIZE ALIAS FOR $2;
                rb_date ALIAS FOR $3;
                table_prefix VARCHAR;
                sql VARCHAR;
            BEGIN
                IF rb_date IS NULL THEN
                    table_prefix := ''sq_'';
                ELSE
                    table_prefix := ''sq_rb_'';
                END IF;

                sql := ''SELECT t.treeid FROM '' || table_prefix || ''ast_lnk l INNER JOIN '' || table_prefix || ''ast_lnk_tree t ON l.linkid = t.linkid
                    WHERE l.minorid IN (SELECT l.majorid FROM '' || table_prefix || ''ast_lnk l where l.minorid = '''''' || minorid || '''''''';

                IF rb_date IS NOT NULL THEN
                    -- note the extra bracket at the end of this statement to close the IN clause above
                    sql := sql || '' AND l.sq_eff_from <= '''''' || rb_date ||
                              '''''' AND (l.sq_eff_to IS NULL
                                 OR l.sq_eff_to > '''''' || rb_date || '''''''' || ''))'';

                    sql := sql || '' AND l.sq_eff_from <= '''''' || rb_date ||
                              '''''' AND (l.sq_eff_to IS NULL
                                 OR l.sq_eff_to > '''''' || rb_date || '''''''' || '')'';

                    sql := sql || '' AND t.sq_eff_from <= '''''' || rb_date ||
                              '''''' AND (t.sq_eff_to IS NULL
                                 OR t.sq_eff_to > '''''' || rb_date || '''''''' || '')'';
                ELSE
                    --close the in clause above
                    sql := sql || '')'';
                END IF;

                FOR treeids IN EXECUTE sql LOOP
                    offset := 1;
                    concat_treeids := '''';
                    LOOP
                        next_treeid := SUBSTR(treeids.treeid, offset, SQ_TREE_BASE_SIZE);
                        IF next_treeid = '''' THEN
                            EXIT;
                        END IF;
                        concat_treeids := concat_treeids || next_treeid;
                        return next concat_treeids;
                        offset := offset + SQ_TREE_BASE_SIZE;
                    END LOOP;
                END LOOP;
                RETURN;
            END;
            ' LANGUAGE plpgsql;
        ]]>
    </sql_element>
    <sql_element display_name="sq_get_lineage_treeids(VARCHAR, INT) Function">
        <![CDATA[
            CREATE OR REPLACE FUNCTION sq_get_lineage_treeids(VARCHAR, INT) RETURNS SETOF BYTEA AS '
            DECLARE
                rec record;
            BEGIN
                for rec in select sq_get_lineage_treeids from sq_get_lineage_treeids($1, $2, null) loop
                    return next rec.sq_get_lineage_treeids;
                end loop;
                return;
            END;
            ' language plpgsql;
        ]]>
    </sql_element>
    <sql_element display_name="sq_rb_get_lineage_treeids(VARCHAR, INT) Function">
        <![CDATA[
            CREATE OR REPLACE FUNCTION sq_rb_get_lineage_treeids(VARCHAR, INT) RETURNS SETOF BYTEA AS '
            DECLARE
                rec record;
                rb_date TIMESTAMP;
            BEGIN
                rb_date := sq_get_rollback_timestamp();
                for rec in select sq_get_lineage_treeids from sq_get_lineage_treeids($1, $2, rb_date) loop
                    return next rec.sq_get_lineage_treeids;
                end loop;
                return;
            END;
            ' language plpgsql;
        ]]>
    </sql_element>
    <sql_element display_name="atoi Function">
        <![CDATA[
            CREATE OR REPLACE FUNCTION atoi(character varying) returns int4 as '
            DECLARE
                        input alias for $1;
            BEGIN
                    return (input::text::int4);
            END;
            ' language plpgsql;
        ]]>
    </sql_element>
    <sql_element display_name="asset_link_treeid_convert Function">
        <![CDATA[
        CREATE OR REPLACE FUNCTION asset_link_treeid_convert(BYTEA, CHAR, INTEGER, INTEGER) RETURNS bytea AS '
        DECLARE
            value ALIAS FOR $1;
            encode_flag ALIAS FOR $2;
            TREE_BASE ALIAS FOR $3;
            TREE_SIZE ALIAS FOR $4;
            str TEXT;
            pad_str TEXT;
            i INTEGER    := 0;
            x INTEGER    := 0;
            d INTEGER    := 0;
            num INTEGER := 0;
            pos INTEGER := 0;
            DIGITS CHAR(64) := ''0123456789=ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz~'';
        BEGIN
            str := '''';
            IF encode_flag = ''1'' THEN
                i := encode(value, ''escape'')::integer;
                WHILE i != 0 LOOP
                    pos := MOD(i, TREE_BASE);
                    str := SUBSTR(DIGITS, pos + 1, 1) || str;
                    i := FLOOR(i / TREE_BASE);
                END LOOP;
                IF LENGTH(str) > TREE_SIZE THEN
                    RAISE EXCEPTION ''Broken! value:  %  str: % TREE_SIZE : %'', value, str, TREE_SIZE;
                    RETURN NULL;
                ELSE
                    IF str = '''' THEN
                        pos := TREE_SIZE;
                    ELSE
                        pos := (TREE_SIZE - LENGTH(str));
                    END IF;
                    pad_str := '''';
                    FOR i IN 1..pos LOOP
                        pad_str := pad_str || SUBSTR(DIGITS, 1, 1);
                    END LOOP;
                    RETURN pad_str || str;
                END IF;
            ELSE
                num := 0;
                x := POW(TREE_BASE, LENGTH(value) - 1);
                FOR i IN 1..LENGTH(value) LOOP
                    d := POSITION(ENCODE(SUBSTR(value, i, 1), ''escape'') IN DIGITS);
                    IF d = 0 THEN
                        RETURN NULL;
                    END IF;
                    -- -1 from d as instr starts at 1 not 0
                    d := d - 1;
                    num := num + (x * d);
                    x := x / TREE_BASE;
                END LOOP;
                RETURN num;
            END IF;
        END;' language plpgsql;
        ]]>
    </sql_element>
</sql>
