/**
* +--------------------------------------------------------------------+
* | MySource Matrix - Instructional Document                           |
* +--------------------------------------------------------------------+
*
* $Id: commenting.txt,v 1.8 2005/01/20 13:37:16 brobertson Exp $
*
*/

+------------------------------------+
| FUNCTION COMMENTING AND FORMATTING |
+------------------------------------+

General comments:
------------------------------------
All comment lines should start with: "* " (note the space character after the astrix) - exccept for the first and last lines.
All fucntions should have 2 blank lines between them. The first function in a class should have 2 blank lines before it and the last function in a class should have 2 blank lines after it.



The comment header:
------------------------------------
Line 1: /** <-- the start of the comment
Line 2: *   <-- a ONE line sentence describing the purpose of the function
Line 3: *   <-- a blank comment line

<example>
/**
* Update the details of an existing link
*
</example>

<comments>
+ No full stop after the one line purpose PLEASE
</comments>

Optional:
The next section can be used to provide a larger description if required. The larger description can span many lines.

<example>
* If any of the detail vars are NULL they are not updated.
* This is the case for all vars no matter what the type of the var is and
* who created it.
*
</example>

<comments>
+ Write full sentences here and keep the line lengths reasonable. You can always write on new lines, just be sure they start with "* " as well.
+ Make sure you leave the blank comment line after the detailed description section.
</comments>



Commenting the arguments:
------------------------------------
All arguments of a function MUST be commented, no matter how obvious their purpose is.
All arguments will be in the form:
* @param [TYPE]	$[NAME]	[DESCRIPTION]

Note the space after @param and the tab after TYPE and NAME

For arguments that are references, ensure you place a "&" before "$[NAME]"

For arguments where the type is an object, the [TYPE] becomes: object [CLASS NAME]
If the class of the object could be one of many, choose the class of a common base class.
If there is no common base class, [TYPE] becomes: object

<example>
* @param object Asset	&$asset		the asset to link up
* @param int		$link_type	the type of the link (one of the SQ_LINK_* constants)
* @param string		&$value		the value to place on the link
* @param int		$sort_order	the position in the links list that this link should take,
* 					if less than zero places at end of list
</example>

<comments>
+ Please ensure to keep the tabbing and spacing correct. It makes it much easier to read.
</comments>



The comment footer:
------------------------------------
Line 1: * @return <-- the return value of the function
Line 2: * @access <-- the access level of the function
Line 3: */        <-- the end of the comment

The comment footer must include the return type of the function and the access level to the function.
Both these can be plain text - so you can write whatever you feel like, but for convention we use Private, Public, and Protected for the access level, and we use a [TYPE] (like in arguments) for the return value.

<example>
* @return Array(string)
* @access public
*/
</example>

<example>
* @return mixed int | false
* @access private
*/
</example>

<example>
* @return boolean - true on success, false on failure
* @access protected
*/
</example>

<comments>
</comments>



Function formatting:
------------------------------------
Every function should have be in the form:
[COMMENT]
function [NAME] ([ARGS])	<-- not the { is not on this line
{				<-- its on this line instead
	[PHP CODE]		<-- code starts on the very next line
				<-- a blank line is left before the }
}//end [NAME]()			<-- no space after the } and // - plus
				    there are () on the end of the name,
				    no arguments are supplied here



A complete example of a PHPDocumentor style commented function:
------------------------------------
/**
* Update the details of an existing link
*
* If any of the detail vars are NULL they are not updated.
*
* @param int	$linkid		the link id of the link to update
* @param int	$link_type	the type of the link (one of the SQ_LINK_* constants)
* @param string $value		the value to place on the link
* @param int	$sort_order	the position in the links list that this link should take,
* 				if less than zero places at end of list
*
* @return boolean
* @access private
*/
function _updateLink($linkid, $link_type=null, $value=null, $sort_order=null)
{
	<PHP CODE HERE>

}//end _updateLink()


A more complex example:
------------------------------------
/**
* Create this asset
*
* The return value will be:<br/>
* <ul>
*   <li>FALSE if the asset was not created</li>
*   <li>the ID of the newly created link if the asset and intital link were created</li>
*   <li>TRUE if the asset was created but $link was empty</li>
* </ul>
*
* @param Array	&$link	information used to create the initial link<br/>
* <PRE>
* Array ('asset'         => [ref major asset to create link under],
*        'link_type'     => SQ_LINK_?,
*        'value'         => [link value],
*        'sort_order'    => [link sort order],
*        'is_dependant'  => [0|1],
*        'is_exclusive'  => [0|1]
*        )
* </PRE>
*
* @return mixed int or false
* @access public
*/
function create(&$link)
{
	<PHP CODE HERE>

}//end create()