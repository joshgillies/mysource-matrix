<?php
/**
* +--------------------------------------------------------------------+
* | Squiz.net Commercial Module Licence                                |
* +--------------------------------------------------------------------+
* | Copyright (c) Squiz Pty Ltd (ACN 084 670 600).                     |
* +--------------------------------------------------------------------+
* | This source file is not open source or freely usable and may be    |
* | used subject to, and only in accordance with, the Squiz Commercial |
* | Module Licence.                                                    |
* | Please refer to http://www.squiz.net/licence for more information. |
* +--------------------------------------------------------------------+
*
* $Id: hipo_job_reindex.inc,v 1.14.2.1 2005/08/05 01:32:18 mmcintyre Exp $
*
*/

require_once SQ_SYSTEM_ROOT.'/core/hipo/hipo_job.inc';

/**
* Highly Intensive Processing Object (HIPO) to regenerate pre-processed metadata files
* for all assets that use the supplied schema
*
* Initial Running Vars :
*    schemaid	-	the ID of the schema that has been updated
*
* @author  Greg Sherwood <greg@squiz.net>
* @version $Revision: 1.14.2.1 $
* @package MySource_Matrix
* @subpackage HIPO
*/
class HIPO_Job_ReIndex extends HIPO_Job
{


	/**
	* Constructor
	*
	* @param string	$code_name		a unique codename the HIPO
	*/
	function HIPO_Job_ReIndex($code_name='')
	{
		$this->uses_trans = false;
		$this->HIPO_Job($code_name);
		$GLOBALS['SQ_SYSTEM']->lm->includePackageStrings('search');

	}//end constructor


	/**
	* Returns a unique codename the HIPO can use to ensure it is not being run twice
	*
	* The Regenerate Metdata HIPO appends the ID of the schema that was updated so that any other
	* regeneration jobs for this schema do not start while it is running.
	*
	* @return string
	* @access public
	*/
	function getCodeName()
	{
		return parent::getCodeName().'-'.$this->_running_vars['root_assetid'];

	}//end getCodeName()


	/**
	* Returns the (localised) HIPO name
	*
	* @return string
	* @access public
	*/
	function getHipoName()
	{
		return translate('sch_hipo_name_reindex_assets');

	}//end getHipoName()


	/**
	* Returns the steps in this hipo, possibly with localised step names
	* and messages
	*
	* @return string
	* @access public
	*/
	function getInitialStepData()
	{
		return Array(
					Array(
						'name'          => translate('sch_hipo_reindexing_assets'),
						'function_call' => Array(
												'process_function' => 'processReIndex',
										   ),
						'running_mode'  => 'server',
						'auto_step'     => true,
						'percent_done'  => 0,
						'complete'      => false,
						'message'       => '',
						'allow_cancel'  => true,
					),
			   );

	}//end getInitialStepData()


	/**
	* Performs the duties of this hipo, without showing any output on the frontend.
	*
	* @return boolean
	* @access public
	*/
	function freestyle()
	{
		while (!empty($this->_running_vars['todo_assetids'])) {
			if (!$this->processReIndex($this->_steps[0], get_class($this))) return false;
		}
		return true;

	}//end freestyle()


	/**
	* Prepares the running vars and gets the children of the asset in question.
	*
	* @return boolean
	* @access public
	*/
	function prepare()
	{
		// to start regenerating metadata, we need to have a root assetid - default to root folder if none is supplied
		if (is_null($this->_running_vars['root_assetid']) || $this->_running_vars['root_assetid'] <= 0) {
			$this->_running_vars['root_assetid'] = 1;	// the root folder
		}

		// so we have an assetid to start at, but make sure it is a valid assetid
		$asset = &$GLOBALS['SQ_SYSTEM']->am->getAsset($this->_running_vars['root_assetid']);
		if (is_null($asset)) {
			trigger_localised_error('SCH0022', E_USER_WARNING, $this->_running_vars['root_assetid']);
			return false;
		}

		$child_assets = $GLOBALS['SQ_SYSTEM']->am->getChildren($asset->id);
		$child_assets[$asset->id] = $asset->type();
		$this->_running_vars['todo_assetids'] = $child_assets;
		$this->_running_vars['done_assetids'] = Array();

		return parent::prepare();

	}//end prepare()


	/**
	* Re-index asset keydata for a single asset in the todo list
	*
	* @param array()	&$step_data	a reference to the array of information about the current step
	* @param string		$prefix		prefix for form vars
	*
	* @return boolean
	* @access public
	*/
	function processReIndex(&$step_data, $prefix)
	{
		if (!empty($this->_running_vars['todo_assetids'])) {
			$am = &$GLOBALS['SQ_SYSTEM']->am;
			$sm =& $am->getSystemAsset('search_manager');
			if (is_null($sm)) return false;

			// get next asset to reindex
			$assetid = array_shift(array_keys($this->_running_vars['todo_assetids']));
			$asset_type = $this->_running_vars['todo_assetids'][$assetid];
			unset($this->_running_vars['todo_assetids'][$assetid]);
			$asset = &$GLOBALS['SQ_SYSTEM']->am->getAsset($assetid, $asset_type);

			$step_data['message'] = translate('sch_reindexing_asset', $asset->name);
			$GLOBALS['SQ_SYSTEM']->doTransaction('BEGIN');
			$asset->informChanges(false);
			$GLOBALS['SQ_SYSTEM']->doTransaction('COMMIT');

			// add this assetid to the done array
			$this->_running_vars['done_assetids'][] = $assetid;
		}

		if (empty($this->_running_vars['todo_assetids'])) {
			$step_data['percent_done'] = 100;
			$step_data['complete']     = true;
		} else {
			$total = count($this->_running_vars['todo_assetids']) + count($this->_running_vars['done_assetids']);
			$step_data['percent_done'] =(count($this->_running_vars['done_assetids']) / $total) * 100;
			$step_data['complete']     = false;
		}

		return true;

	}//end processReIndex()


}//end class

?>