<?xml version='1.0' encoding='UTF-8' ?>
<!--
/**
* +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
* | This MySource Matrix CMS file is Copyright (c) Squiz Pty Ltd       |
* | ACN 084 670 600                                                    |
* +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
* | IMPORTANT: Your use of this Software is subject to the terms of    |
* | the Licence provided in the file licence.txt. If you cannot find   |
* | this file please contact Squiz (www.squiz.net) so we may provide   |
* | you a copy.                                                        |
* +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
*
* $Id: oci_functions.xml,v 1.2 2008/11/28 00:04:46 csmith Exp $
*
*/
-->
<sql>
	<sql_element display_name="Search Package Header">
		<![CDATA[
			CREATE OR REPLACE PACKAGE sq_search_pkg AS

				-- This is the main function which returns the word and its hit counts to be used in
				-- search list page.
				TYPE wordHitInfo IS RECORD (
											word   VARCHAR2(500),
											hits   NUMBER
				);
				TYPE wordHitInfoTable IS TABLE OF wordHitInfo;
				FUNCTION get_search_list (cond VARCHAR2, min_length VARCHAR2, noise_words VARCHAR2, white_words VARCHAR2)
				RETURN wordHitInfoTable PIPELINED;

				-- This function returns the hit counts based on the given condition for the word
				FUNCTION get_word_hits_count(cond VARCHAR2, word VARCHAR2) RETURN NUMBER;

				-- This function returns the list of word (tokens) in sq_sch_idx table based on the condition passed in
				-- Minimum word length, white and noise word list are filtered in this function.
				TYPE wordListTable IS TABLE OF VARCHAR2(500);
				FUNCTION get_search_list_word_list(cond VARCHAR2, min_length VARCHAR2, noise_words VARCHAR2, white_words VARCHAR2)
				RETURN wordListTable PIPELINED;

				-- This function splits the given text into individual tokens.
				-- It also removes any special characters within the token
				-- Modifed from the code written by Mark McIntyre <mmcintyre@squiz.net>
				TYPE splitValuesTable IS TABLE OF VARCHAR2(500);
				FUNCTION split(str VARCHAR2, delim VARCHAR2) RETURN splitValuesTable PIPELINED;

			END sq_search_pkg;
		]]>
	</sql_element>
	<sql_element display_name="Search Package Body">
		<![CDATA[
			CREATE OR REPLACE PACKAGE BODY sq_search_pkg AS

				-- This is the main function which returns the word and its hit counts to be used in
				-- search list page.
				FUNCTION get_search_list(cond VARCHAR2, min_length VARCHAR2, noise_words VARCHAR2, white_words VARCHAR2)
				RETURN wordHitInfoTable PIPELINED
				IS
					TYPE cur_typ IS REF CURSOR;
					c cur_typ;
					sql_str VARCHAR2(2000);
					token VARCHAR2(100);
					hits PLS_INTEGER;
					out_rec wordHitInfo;
				BEGIN
					sql_str := 'SELECT UNIQUE COLUMN_VALUE FROM table(sq_search_pkg.get_search_list_word_list(''' ||
								cond ||	''', ''' ||
								min_length || ''', ''' ||
								noise_words || ''', ''' ||
								white_words || '''))';
					OPEN c FOR sql_str;
					LOOP
						FETCH c INTO token;
						EXIT WHEN c%NOTFOUND;
							out_rec.hits := sq_search_pkg.get_word_hits_count(cond, token);
							out_rec.word := token;
							PIPE ROW (out_rec);
					END LOOP;
					RETURN;
				END get_search_list;

				-- This function returns the hit counts based on the given condition for the word
				FUNCTION get_word_hits_count(cond VARCHAR2, word VARCHAR2) RETURN NUMBER
				IS
					sql_str VARCHAR2(2000);
					c NUMBER := 0;
				BEGIN
					sql_str :=	'SELECT COUNT(ai.VALUE) AS hits FROM sq_sch_idx ai WHERE ' ||
								cond ||
								' AND CONTAINS(ai.value, "' || word ||  '" , 1) > 0';
					sql_str := replace(sql_str, '"', '''');
					EXECUTE IMMEDIATE sql_str INTO c;
					RETURN c;
				END get_word_hits_count;

				-- This function returns the list of word (tokens) in sq_sch_idx table based on the condition passed in
				-- Minimum word length, white and noise word list are filtered in this function.
				FUNCTION get_search_list_word_list(cond VARCHAR2, min_length VARCHAR2, noise_words VARCHAR2, white_words VARCHAR2)
				RETURN wordListTable PIPELINED
				IS
					TYPE cur_typ IS REF CURSOR;
					curl_1 cur_typ;
					curl_2 cur_typ;
					sql_str VARCHAR2(2000);
					assetid VARCHAR2(255);
					value VARCHAR2(32767);
					word VARCHAR2(500);
				BEGIN
					sql_str :=	'SELECT ai.value FROM sq_sch_idx ai WHERE ' || cond;

					sql_str := replace(sql_str, '"', '''');
					OPEN curl_1 FOR sql_str;
					LOOP
						FETCH curl_1 INTO value;
						EXIT WHEN curl_1%NOTFOUND;
							sql_str := 'SELECT COLUMN_VALUE FROM table(sq_search_pkg.split(:val, '' '')) WHERE ';

							-- White words, word length 2 means "" empty string here
							IF LENGTH(white_words) > 2 THEN
								sql_str := sql_str || '( COLUMN_VALUE IN ( ' || white_words || ' )) OR ';
							END IF;

							-- Minimum word length constraint
							sql_str := sql_str || '( LENGTH(COLUMN_VALUE) >= ' || min_length;

							-- Noise words, word length 2 means "" empty string here
							IF LENGTH(noise_words) > 2 THEN
								sql_str := sql_str || ' AND COLUMN_VALUE NOT IN (' || noise_words || ') )';
							ELSE
								sql_str := sql_str || ')';
							END IF;

							sql_str := REPLACE(sql_str, '"', '''');
							OPEN curl_2 FOR sql_str USING value;
							LOOP
								FETCH curl_2 INTO word;
								EXIT WHEN curl_2%NOTFOUND;
								IF LENGTH(word) > 0 THEN
									PIPE ROW(word);
								END IF;
							END LOOP;
					END LOOP;
					RETURN;
				END get_search_list_word_list;


				-- This function splits the given text into individual tokens.
				-- It also removes any special characters within the token
				-- Modifed from the code written by Mark McIntyre <mmcintyre@squiz.net>
				FUNCTION split(str VARCHAR2, delim VARCHAR2) RETURN splitValuesTable PIPELINED
				IS
					idx     PLS_INTEGER;
					idx_end	BOOLEAN := FALSE;
					strLeft VARCHAR2(32767) := str;
					string VARCHAR2(32767) := str;
					trans_special_chars CONSTANT CHAR(33) := 'a~`!@#$%^&*()-_=+{}[]\|;":/?.,><''';
					trans_replament CONSTANT CHAR(1) := 'a';
				BEGIN
					LOOP
						idx := INSTR(strLeft, delim);
						IF idx > 0 THEN
							string := TRIM(SUBSTR(strLeft, 1, idx - 1));
							IF LENGTH(string) > 0 THEN
								PIPE ROW (TRANSLATE(string, trans_special_chars, trans_replament));
							END IF;
							strLeft := SUBSTR(strLeft, idx + LENGTH(delim));
						ELSE
							IF LENGTH(strLeft) > 0 THEN
								PIPE ROW (TRANSLATE(strLeft, trans_special_chars, trans_replament));
							END IF;
							EXIT;
						END IF;
					END LOOP;
					RETURN;
				END split;
			END sq_search_pkg;
		]]>
	</sql_element>
</sql>
