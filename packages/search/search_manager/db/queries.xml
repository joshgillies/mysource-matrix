<queries id="search_manager">
	<query id="addIndexableContent">
		<!-- Add indexable content. -->
		<primary>
			<insert>
				<fields table="sq_sch_idx">
					<field>value</field>
					<field>assetid</field>
					<field>type_code</field>
					<field>component</field>
					<field>contextid</field>
					<field>type</field>
					<field>score</field>
					<field>use_default</field>
				</fields>
				<values>
					<value column="value">:value</value>
					<value column="assetid">:assetid</value>
					<value column="type_code">:type_code</value>
					<value column="component">:component</value>
					<value column="contextid">:contextid</value>
					<value column="type">:type</value>
					<value column="score">:score</value>
					<value column="use_default">:use_default</value>
				</values>
			</insert>
		</primary>
	</query>

	<query id="addDefaultIndexableContent">
		<!-- Insert default content for all contexts where it is not there
				PostgreSQL version: used for splitting of context -->
		<primary>
			<insert>
				<fields table="sq_sch_idx">
					<field>value</field>
					<field>assetid</field>
					<field>type_code</field>
					<field>component</field>
					<field>contextid</field>
					<field>type</field>
					<field>score</field>
					<field>use_default</field>
				</fields>
				<select>
					<fields>
						<value alias="value">:value</value>
						<value alias="assetid">:assetid</value>
						<value alias="type_code">:type_code</value>
						<value alias="component">:component</value>
						<field table="sq_ctx_def" column="contextid" />
						<value alias="type">:type</value>
						<value alias="score">:score</value>
						<value alias="use_default">:use_default</value>
					</fields>
					<from>
						<table>sq_ctx_def</table>
					</from>
					<where>
						<not-in>
							<function function="cast">
								<arg><field table="sq_ctx_def" column="contextid" /></arg>
								<arg>VARCHAR(11)</arg>
							</function>
							<select>
								<fields>
									<field table="sq_sch_idx" column="contextid" />
								</fields>
								<from>
									<table>sq_sch_idx</table>
								</from>
								<where>
									<equal table="sq_sch_idx" column="assetid">:assetid_1</equal>
									<equal table="sq_sch_idx" column="component">:component_1</equal>
									<equal table="sq_sch_idx" column="use_default">'0'</equal>
								</where>
							</select>
						</not-in>
					</where>
				</select>
			</insert>
		</primary>
	</query>

	<query id="flushDefaultIndexableContent">
		<!-- Delete all index entries for a specified asset ID and component(s),
		where 'use default' was set. -->
		<primary>
			<delete>
				<where>
					<equal table="sq_sch_idx" column="assetid">:assetid</equal>
					<in table="sq_sch_idx" column="component">:components</in>
					<equal table="sq_sch_idx" column="use_default">:use_default</equal>
				</where>
			</delete>
		</primary>
		<alternate>
			<!-- Delete all components if not specified. -->
			<assert-null data="components">
				<delete>
					<where>
						<equal table="sq_sch_idx" column="assetid">:assetid</equal>
						<equal table="sq_sch_idx" column="use_default">:use_default</equal>
					</where>
				</delete>
			</assert-null>
		</alternate>
	</query>

	<query id="flushIndexableContent">
		<!-- Delete all index entries for a specified asset ID and component(s),
			 filtered by context ID(s). -->
		<primary>
			<delete>
				<where>
					<equal table="sq_sch_idx" column="assetid">:assetid</equal>
					<in table="sq_sch_idx" column="component">:components</in>
					<in table="sq_sch_idx" column="contextid">:contextids</in>
				</where>
			</delete>
		</primary>
		<alternate>
			<!-- Delete all components if not specified. -->
			<assert-null data="components">
				<delete>
					<where>
						<equal table="sq_sch_idx" column="assetid">:assetid</equal>
						<in table="sq_sch_idx" column="contextid">:contextids</in>
					</where>
				</delete>
			</assert-null>
		</alternate>
	</query>

	<query id="flushDeadContextIndexableContent">
		<!-- Delete all index entries for a dead component. -->
		<primary>
			<delete>
				<where>
					<equal table="sq_sch_idx" column="contextid">:contextid</equal>
				</where>
			</delete>
		</primary>
	</query>

	<query id="getSearchRootTreeids">
		<!-- Gets the treeid(s) of the links of which the passed roots are a minor party of. -->
		<primary>
			<select>
				<fields>
					<field table="sq_ast_lnk" column="minorid" />
					<field table="sq_ast_lnk_tree" column="treeid" />
				</fields>
				<from>
					<table>sq_ast_lnk_tree</table>
					<table>sq_ast_lnk</table>
				</from>
				<joins>
					<join>
						<field table="sq_ast_lnk_tree" column="linkid" />
						<field table="sq_ast_lnk"      column="linkid" />
					</join>
				</joins>
				<where>
					<in table="sq_ast_lnk" column="minorid">:minorids</in>
				</where>
			</select>
		</primary>
	</query>
</queries>
