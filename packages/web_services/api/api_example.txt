
The below class is an example of a SOAP API.
Each function in the class represent an operation which can be called via the soap server.
Each of this operation is listed in the getFunctionList() function, with a default switch on, that is, enable all functions inside this class by default.
The PHP Doc comment for these functions need to be accurate, as they are used to describe the input output message to and from each of the operation, on the frontend. The getComplexTypes() function defines the input / output which is used to generate the WSDL.

Complex type within complex type can be achieved as of the createAsset() example.
Calling getArgType() to declare the data type being transfered, either a simple type (string, float, int, bool) or complex type (+ within another complex type)

Simple Restricted Types can be declared via the getSimpleRestrictedTypes() function. Note that if the simple type is of type enumeration,
then the each enumeration value can not contain spaces.

In order to return multiple objects / complex elements, the element must have the nillable attribute set to TRUE as this line
$assetobj_optional		= self::getArgType('AssetObject', 0, 'unbounded', TRUE);		(see the whole thing in context below)



<?php
/**
* +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
* | This MySource Matrix Module file is Copyright (c) Squiz Pty Ltd    |
* | ACN 084 670 600													   |
* +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
* | IMPORTANT: This Module is not available under an open source	   |
* | license and consequently distribution of this and any other files  |
* | that comprise this Module is prohibited. You may only use this	   |
* | Module if you have the written consent of Squiz.				   |
* +- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - +
*
* $Id: api_example.txt,v 1.1 2009/02/18 00:10:13 hnguyen Exp $
*
*/

check_ssv_licence();
require_once SQ_PACKAGES_PATH.'/web_services/api/soap_api/soap_api.inc';

/**
* SOAP API Core
*
* Purpose
*
*
* @author  Huan Nguyen <hnguyen@squiz.net>
* @version $Revision: 1.1 $
* @package MySource_Matrix_Packages
* @subpackage web_services
*/
class Soap_Api_Core extends Soap_Api
{


    /**
    * Constructor
    *
    * @param int    $assetid    the asset id to be loaded
    *
    */
    function __construct($assetid=0)
    {
        parent::__construct($assetid);

    }//end constructor


    /**
    * Returns a function list of the asset let the children handle this
    *
    * @return string
    * @access private
    * @see Asset::_getName()
    */
    public function getFunctionList()
    {
        return Array(
				'createAsset'		=> '1',
				'deleteAsset'		=> '1',
				'findChildren'		=> '1',
				'findLinks'			=> '1',
				'newAssetLink'		=> '1',
				'duplicateAsset'	=> '1',
				'changeStatus'		=> '1',
				'findStatus'		=> '1',
				'changeAttrValue'	=> '1',
			   );

    }//end getFunctionList()


	/**
	* Description: This function will create an asset of a specific type under a specific location
	*
    * @param array  $link_info	information used to create the initial link
    * <pre>
    * Array (
	*		 'type_code'	 => [type code of new asset],
	*		 'name'			 => [name for new asset],
	*		 'parentid'		 => [parentid of the new parent],
    *        'link_type'     => SQ_LINK_?,
    *        'value'         => [link value],
    *        'sort_order'    => [link sort order],
    *        'is_dependant'  => [0|1],
    *        'is_exclusive'  => [0|1]
    *        )
    * </pre>
	*
	* @return void
	* @access public
	*/
	function createAsset($request)
	{
		$link_info = (Array) $request;
		$parent_asset = $GLOBALS['SQ_SYSTEM']->am->getAsset($link_info['parentid']);
		$GLOBALS['SQ_SYSTEM']->am->includeAsset($link_info['type_code']);
		$object_name = str_replace(' ', '_', ucwords(str_replace('_', ' ', $link_info['type_code'])));
		$asset = new $object_name();
		$asset->setAttrValue('name', $link_info['name']);

		$link_info['asset']	= $parent_asset;
		$linkid = $asset->create($link_info);
		if ($linkid) {
			return Array (
					'CreateMessage' => Array (
										'message'	=> 'Asset was created successfully. Link id #'.$linkid,
									   ),
					'AssetObject'	=> Array (
										'object_xml'	=> 'walao xml',
									   ),
				   );
		}//end if

		throw new SoapFault('Server', 'Unable to create asset');

	}//end createAsset()


	/**
	* Description: This function returns all the children of a specific asset
	*
	* @param array $asset_info the info array to find children of a specific asset
    * <pre>
    * Array (
    *		'assetid'			=> [assetid of node],
	*		'type_code'			=> [type code of new asset],
	*		'strict_type_code'	=> [strict type code or not],
	*		'dependant'			=> [dependant or not],
    *		'link_value'		=> [link value],
    *        )
    * </pre>
	*
	* @return void
	* @access public
	*/
	function findChildren($request)
	{
		// THIS FUNCTION HAS NOT BEEN FULLY IMPLEMENTED.
		//$asset_info = (Array) $asset_info_request->asset_info;
		//$GLOBALS['SQ_SYSTEM']->am->getChildren($asset_info['assetid'], $asset_info['type_code'], $asset_info['strict_type_code'], $asset_info['dependant'], NULL, NULL, TRUE, NULL, NULL, TRUE, $asset_info['link_value']);
		$link_info	= (Array) $request;
		$root_asset = $GLOBALS['SQ_SYSTEM']->am->getAsset($link_info['rootid']);
		$result	= $GLOBALS['SQ_SYSTEM']->am->getChildren($link_info['rootid']);

		return Array (
				'Results'	=> Array ($result),
			   );

	}//end findChildren()


	/**
	* findLinks
	*
	* @return void
	* @access public
	*/
	function findLinks($assetid)
	{


	}//end findLinks()


	/**
	* newAssetLink
	*
	* @return void
	* @access public
	*/
	function newAssetLink($assetid)
	{


	}//end newAssetLink()


	/**
	* duplicateAsset
	*
	* @return void
	* @access public
	*/
	function duplicateAsset($assetid)
	{


	}//end duplicateAsset()


	/**
	* changeStatus
	*
	* @return void
	* @access public
	*/
	function changeStatus($assetid)
	{


	}//end changeStatus()


	/**
	* findStatus
	*
	* @return void
	* @access public
	*/
	function findStatus()
	{


	}//end findStatus()


	/**
	* changeAttrValue
	*
	* @return void
	* @access public
	*/
	function changeAttrValue($assetid)
	{


	}//end changeAttrValue()


	/**
	* getComplexType
	*
	* @return array
	* @access public
	*/
	public static function getComplexElements($func_list=Array())
	{
		$string_non_optional	= self::getArgType('string', 1, 1);
		$string_optional		= self::getArgType('string', 0, 1);
		$int_optional			= self::getArgType('int', 0, 1);
		$assetobj_optional		= self::getArgType('AssetObject', 0, 'unbounded', TRUE);
		$createmsg_optional		= self::getArgType('CreateMessage', 0, 1);
		$assetType_optional		= self::getArgType('AssetType', 0, 1);

		$complex_types	= Array (
							'createAsset'	=> Array (
												'createAsset'	=> Array (
									    									'type_code'     => $assetType_optional,
																			'name'          => $string_non_optional,
																			'parentid'      => $string_non_optional,
																			'link_type'     => $string_non_optional,
																			'value'         => $string_optional,
																			'sort_order'    => $int_optional,
																			'is_dependant'  => $string_optional,
																			'is_exclusive'  => $string_optional,
																		  ),
												'createAssetResponse'	=> Array (
																			'AssetObject'	=> $assetobj_optional,
																		  	'CreateMessage'	=> $createmsg_optional,
																		   ),
												'AssetObject'			=> array (
																			'object_xml'	=> $string_non_optional,
																		   ),
												'CreateMessage'			=> array (
																			'message'		=> $string_non_optional,
																		   ),
											   ),
							'deleteAsset'	=> Array (
												'deleteAsset'			=> Array (
																			'assetid'		=> $string_non_optional,
																		   ),
												'deleteAssetResponse'	=> Array (
																			'result'		=> $string_optional,
																		   ),
											   ),
							'findChildren'	=> Array (
												'findChildren'	=> Array (
																			'rootid'		=> $string_non_optional,
																		   ),
												'findChildrenResponse'	=> Array (
																			'Results'		=> $assetobj_optional,
																		   ),
											   ),
						  );

		$complex_types_available = parent::getComplexElements($complex_types);

		return $complex_types_available;


	}//end getComplexTypes();


	/**
	* getSimpleRestrictedTypes
	*
	* @return array
	* @access public
	*/
	public static function getSimpleRestrictedTypes($func_list=Array())
	{
		$string_non_optional	= self::getArgType('string', 0, 1);

		$simple_restricted_types	= Array (
							'createAsset'	=> Array (
												'AssetType'	=> Array (
																'restriction_base'	=> 'EnumType',
																'enumeration'		=> Array (
																						'StandardPage', 'CustomForm', 'Folder',
																					   ),
															   ),
												'CreditCardNumber'	=> Array (
																		'restriction_base'	=> 'string',
																		'pattern'			=> '\d{3}-\d{2}-\d{4}',
																	   ),
											   ),
							'findChildren'	=> Array (

											   ),
						  );

		$simple_restricted_types_available = parent::getSimpleRestrictedTypes($simple_restricted_types);

		return $simple_restricted_types_available;

	}//end getSimpleRestrictedTypes()


}//end class
?>
