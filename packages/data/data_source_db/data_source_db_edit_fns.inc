<?php
/**
* +--------------------------------------------------------------------+
* | This MySource Matrix Module file is Copyright (c) Squiz Pty Ltd    |
* | ACN 084 670 600                                                    |
* +--------------------------------------------------------------------+
* | IMPORTANT: This Module is not available under an open source       |
* | license and consequently distribution of this and any other files  |
* | that comprise this Module is prohibited. You may only use this     |
* | Module if you have the written consent of Squiz.                   |
* +--------------------------------------------------------------------+
*
* $Id: data_source_db_edit_fns.inc,v 1.37 2009/03/25 05:35:05 mbrydon Exp $
*
*/

require_once SQ_INCLUDE_PATH.'/asset_edit/asset_edit_fns.inc';
require_once SQ_CORE_PACKAGE_PATH.'/data_source/data_source/data_source_edit_fns.inc';

/**
* Data_Source_DB_Edit_Fns
*
* Purpose
*
*
* @author  Greg Sherwood <greg@squiz.net>
* @version $Revision: 1.37 $
* @package MySource_Matrix_Packages
* @subpackage __core__
*/
class Data_Source_DB_Edit_Fns extends Data_Source_Edit_Fns
{

	public $dsn = NULL;
	public $result = NULL;
	public $fields = Array();
	public $selected_fields = Array();
	public $group_by = Array();
	public $conn = NULL;


	/**
	* Constructor
	*
	*/
	function __construct()
	{
		parent::__construct();

	}//end constructor


	/**
	* Paints the root node selection box
	*
	* @param object	&$asset	asset being painted
	* @param object	&$o		backend outputter
	* @param string	$prefix	prefix for the html doc element name
	*
	* @return boolean
	* @access public
	*/
	function paintConnectorLink(&$asset, &$o, $prefix)
	{
		// get root links
		$connector_link = $GLOBALS['SQ_SYSTEM']->am->getLink($asset->id, SQ_LINK_NOTICE, 'db_connector', FALSE, 'db_connector');
		if (empty($connector_link)) {
			$connector_asset_id = NULL;
		} else {
			$connector_asset_id = $connector_link['minorid'];
		}

		if ($asset->writeAccess('links')) {
			asset_finder($prefix.'_connector_node', $connector_asset_id, Array('db_connector'=>'D'));
		} else {
			if (empty($connector_asset_id)) {
				echo 'No connector selected';
			} else {
				echo get_asset_tag_line($connector_asset_id);
			}
		}
		return TRUE;

	}//end paintConnectorLink()


	/**
	* Paints the root node selection box
	*
	* @param object	&$asset	asset being painted
	* @param object	&$o		backend outputter
	* @param string	$prefix	prefix for the html doc element name
	*
	* @return boolean
	* @access public
	*/
	function processConnectorLink(&$asset, &$o, $prefix)
	{
		$new_connector_id = @$_REQUEST[$prefix.'_connector_node']['assetid'];

		if (!$asset->writeAccess('links')) {
			trigger_error('You do not have write access to change the connector link', E_USER_WARNING);
			return FALSE;
		}

		$current_connector_link = $GLOBALS['SQ_SYSTEM']->am->getLink($asset->id, SQ_LINK_NOTICE, 'db_connector', FALSE, 'db_connector');
		$current_connector_asset_id = @$current_connector_link['minorid'];

		if (!empty($current_connector_link)) {
			// if the new connector id is not null and is equal to the current
			// connector asset id then return
			if ((!empty($new_connector_id)) && ($current_connector_asset_id === $new_connector_id)) {
				return TRUE;
			} else {
				// else means that we want to create a new link or we want to
				// clear the link
				$GLOBALS['SQ_SYSTEM']->am->deleteAssetLink($current_connector_link['linkid']);

				// if the new connector id is empty means we want to clear the
				// link we got nothing else to do so return TRUE
				if (empty($new_connector_id))return TRUE;
			}
		}

		if (!empty($new_connector_id)) {
			$new_connector_asset = $GLOBALS['SQ_SYSTEM']->am->getAsset($new_connector_id);
			$result_id = $GLOBALS['SQ_SYSTEM']->am->createAssetLink($asset, $new_connector_asset, SQ_LINK_NOTICE, 'db_connector');

			if (empty($result_id)) {
			trigger_error('Could not link the connector to this asset', E_USER_WARNING);
			return FALSE;
		}

		}

		return TRUE;

	}//end processConnectorLink()


	//--        DSN        --//


	/**
	* Paints the interface for entering Data Source details
	*
	* @param object	&$asset	the Data_Source_DB asset
	* @param object	&$o		the backend outputter
	* @param string	$prefix	prefix for form elements
	*
	* @return void
	* @access public
	*/
	function paintDSN(&$asset, &$o, $prefix)
	{
		$wa = $asset->writeAccess('attributes');
		$db_type = $asset->attr('db_type');
		$database = $asset->attr('database');
		$host = $asset->attr('host');
		?>
		<table class="sq-backend-table">
			<tr>
				<td><?php echo translate('database_type');?></td>
				<td>
					<?php
					$options = Array('postgres' => 'PostgreSQL', 'oracle' => 'Oracle', 'mysql' => 'MySQL');
					if ($wa) {
						combo_box('dsn[db_type]', $options, FALSE, $db_type);
					} else {
						if (empty($db_type)) {
							?><em>Ignored due to Complete DSN entry</em><?php
						} else {
							echo $options[$db_type];
						}
					}
					?>
				</td>
			</tr>
			<tr>
				<td><?php echo translate('database_name');?></td>
				<td>
					<?php
					if ($wa) {
						text_box('dsn[database]', $database, 35);
					} else {
						echo $database;
					}
					?>
				</td>
			</tr>
			<tr>
				<td><?php echo translate('host_name');?></td>
				<td>
					<?php
					if ($wa) {
						text_box('dsn[host]', $host, 35);
					} else {
						echo $host;
					}
					?>
				</td>
			</tr>
		</table>
		<?php
		if ($wa) {
			return TRUE;
		} else {
			return FALSE;
		}

	}//end paintDSN()


	/**
	* Processes the interface for entering DSN
	*
	* @param object	&$asset	the Data_Source_DB asset
	* @param object	&$o		the backend outputter
	* @param string	$prefix	prefix for form elements
	*
	* @return boolean
	* @access public
	*/
	function processDSN(&$asset, &$o, $prefix)
	{
		$dsn = $asset->attr('dsn');
		$new_dsn_string = NULL;
		$new_dsn = $_POST['dsn'];
		if (!empty($_POST['dsn']['dsn'])) {
			$new_dsn_string = $_POST['dsn']['dsn'];
			$new_dsn['db_type'] = NULL;
			$new_dsn['host'] = NULL;
			$new_dsn['database'] = NULL;
		} else {
			switch ($new_dsn['db_type']) {
				case 'postgres':
					$new_dsn_string = "pgsql:";
				break;
				case 'mysql':
					$new_dsn_string = "mysql:";
				break;
				case 'oracle':
					$new_dsn_string = "oci:";
				break;
			}

			if ($new_dsn['db_type'] == 'oracle') {
				// PDO_OCI compatible DSN is either:
				// oci:dbname=[db]...
				// oci:dbname=[hostname]/[db]...

				// Let's provide a PDO_OCI-like DSN and work it for PHP OCI out when connecting
				$new_dsn_string .= 'dbname=';

				// Start with the hostname...
				if (!empty($new_dsn['host'])) {
					$new_dsn_string .= "$new_dsn[host]/";
				}

				// Unless that isn't supplied, in which case we will be using a tnsnames-defined DB only
				$new_dsn_string .= "$new_dsn[database]";
			} else {
				$new_dsn_string .= "dbname=$new_dsn[database];host=$new_dsn[host]";
			}
		}
		if (strcasecmp($dsn, $new_dsn_string) != 0) {
			foreach ($new_dsn as $key => $value) {
				$asset->setAttrValue($key, $value);
			}

			$asset->setAttrValue('dsn', $new_dsn_string);
			return TRUE;
		}
		return FALSE;

	}//end processDSN()


	/**
	* Paints the interface for entering Data Source details
	*
	* @param object	&$asset	the Data_Source_DB asset
	* @param object	&$o		the backend outputter
	* @param string	$prefix	prefix for form elements
	*
	* @return void
	* @access public
	*/
	function paintDSNAlone(&$asset, &$o, $prefix)
	{
		$dsn = $asset->attr('dsn');
		$wa = $asset->writeAccess('attributes');
		$database = $asset->attr('database');
		if ($wa) {
			text_area('dsn[dsn]', empty($database) ? $dsn : '', 70, 5);
			return TRUE;
		} else {
			if (!empty($dsn)) echo $dsn;
			return FALSE;
		}

	}//end paintDSNAlone()


	/**
	* Processes the interface for entering DSN
	*
	* @param object	&$asset	the Data_Source_DB asset
	* @param object	&$o		the backend outputter
	* @param string	$prefix	prefix for form elements
	*
	* @return boolean
	* @access public
	*/
	function processDSNAlone(&$asset, &$o, $prefix)
	{
		return FALSE;

	}//end processDSNAlone()


//--        QUERY        --//


	/**
	* Paints the interface for painting the query
	*
	* @param object	&$asset	the DB Data source asset
	* @param object	&$o		the backend outputter
	* @param string	$prefix	prefix for form elements
	*
	* @return void
	* @access public
	*/
	function paintQuerySoFar(&$asset, &$o, $prefix)
	{
		$wa = $asset->writeAccess('attributes');
		$sql = $asset->attr('sql');

		if ($wa) {
			$dynamic_vars = $asset->attr('dynamic_vars');
			if (!empty($dynamic_vars)) {
				foreach ($dynamic_vars as $var => $value) {
					$keywords['%%'.$var.'%%'] = $var;
				}
				keyword_selector($keywords, $prefix.'_sql');
			}
			text_area($prefix.'_sql', $sql, 100, 40, 0, 'style="width: 100%; height: 30em; font-family: \'Courier New\', Courier, monospace; display: block"');
		} else {
			if (!empty($sql)) {
				echo nl2br($sql);
				hidden_field($prefix.'_sql', $sql);
			}
		}
		echo('&nbsp;');

		return $wa;

	}//end paintQuerySoFar()


	/**
	* Processes the interface for entering and reassigning the sql query
	*
	* @param object	&$asset	the search page asset
	* @param object	&$o		the backend outputter
	* @param string	$prefix	prefix for form elements
	*
	* @return boolean
	* @access public
	*/
	function processQuerySoFar(&$asset, &$o, $prefix)
	{
		if (isset($_POST[$prefix.'_sql'])) {
			return $asset->setAttrValue('sql', $_POST[$prefix.'_sql']);
		}

		return FALSE;

	}//end processQuerySoFar()


	//--        DYNAMIC DATA        --//


	/**
	* Paint the dynamic data interface
	*
	* @param object	&$asset	The asset that might use the files
	* @param string	&$o		Backend outputter
	* @param string	$prefix	the prefix for this asset
	*
	* @return boolean
	* @access protected
	*/
	function paintDynamicData(&$asset, &$o, $prefix)
	{
		$write_access = $asset->writeAccess('attributes');

		$var_list = $asset->attr('dynamic_vars');

		// MAYBE: detect keywords in SQL and inject them into variables

		$o->openRaw();

		echo '<table class="sq-backend-table">';
		echo '<tr>';
		echo '<th>Name</th>';
		echo '<th>Default Value</th>';
		if ($write_access) {
			echo '<th width="10%" align="right" style="border-left: dotted 1px grey;">Delete</th>';
		}
		echo '</tr>';
		foreach ($var_list as $var => $value) {
			$var_id = base64_encode($var);

			echo '<tr>';
			echo '<td>';
			if ($write_access) {
				text_box($prefix.'_var_name['.$var_id.']', urlencode($var));
			} else {
				echo urlencode($var);
			}
			echo '</td>';
			echo '<td valign="top" align="left">';
			if ($write_access) {
				text_box($prefix.'_var_value['.$var_id.']', urlencode($value));
			} else {
				echo urlencode($value);
			}
			echo '</td>';
			if ($write_access) {
				echo '<td style="border-left: dotted 1px grey;">';
				check_box($prefix.'_delete_var['.$var_id.']');
				echo '</td>';
			}
			echo '</tr>';
		}

		if ($write_access) {
			echo '<tr class="new-data-row">';
			echo '<th colspan="3" align="left">';
			echo '<em style="color:#666">Add New Variables Below</em>';
			echo '</th>';
			echo '</tr>';

			echo '<tr class="new-data-row">';
			echo '<td>';
			text_box($prefix.'_new_dynamic_data_name[]', NULL);
			echo '</td>';
			echo '<td>';
			text_box($prefix.'_new_dynamic_data_value[]', NULL);
			echo '</td>';
			echo '<td style="border-left: dotted 1px grey;">';
			echo '</td>';
			echo '</tr>';
		}
		echo '</table>';

		$o->closeRaw();

		$o->sectionNote(translate('db_data_source_variable_section_note'));

		$o->closeSection();

		$o->openSection('Data Mappings');
		$o->openRaw();
		$map = $asset->getAttribute('parameter_map');

		$parameter_names = $map->getParameters();

		foreach ($var_list as $var_name => $default) {
			$map->setParameter($var_name, 'Variable: '.$var_name);
		}

		$map->paint($prefix.'_parameter_map', !$write_access);
		$o->closeRaw();

		$o->sectionNote(translate('db_data_source_mappings_section_note'));

		return $write_access;

	}//end paintDynamicData()


	/**
	* Process the dynamic data interface
	*
	* @param object	&$asset	The asset that might use the files
	* @param string	&$o		Backend outputter
	* @param string	$prefix	the prefix for this asset
	*
	* @return boolean
	* @access protected
	*/
	function processDynamicData(&$asset, &$o, $prefix)
	{

		$var_name_pattern = '/^[a-zA-Z_\-0-9\.]+$/';


		$write_access = $asset->writeAccess('attributes');
		if (!$write_access) return FALSE;

		$to_delete = array_get_index($_REQUEST, $prefix.'_delete_var', Array());
		$var_value = array_get_index($_REQUEST, $prefix.'_var_value', Array());
		$var_name = array_get_index($_REQUEST, $prefix.'_var_name', Array());

		$var_list = $asset->attr('dynamic_vars');

		$map = $asset->getAttribute('parameter_map');

		$parameter_names = $map->getParameters();
		foreach ($var_list as $name => $default) {
			$map->setParameter($name, 'Variable: '.$name);
		}

		$map->process($prefix.'_parameter_map');

		foreach ($var_value as $hash => $value) {
			$name = base64_decode($hash);
			if (isset($to_delete[$hash])) {
				unset($var_list[$name]);
				// also need to delete it from the PARAMETER MAP
				if (in_array($name, $parameter_names)) {
					$map->unsetParameter($name);
				}

				continue;
			}

			$var_list[$name] = $value;
		}

		$new_var_list = Array();
		$rename_success = FALSE;

		// now we rename variables
		foreach ($var_name as $hash => $new_name) {
			$new_name = trim($new_name);

			if (empty($new_name)) {
				$rename_success = FALSE;
				trigger_error('Variable name cannot be empty. No variables were renamed.', E_USER_NOTICE);
				break;
			}

			// check new name against regex
			$new_name_is_valid = preg_match($var_name_pattern, $new_name);
			if (!$new_name_is_valid) {
				$rename_success = FALSE;
				trigger_error('Variable name ['.htmlentities($new_name).'] contains characters that are not allowed. Can only use letters (A-Za-z), digits(0-9), underscore (_), dash (-) and dot (.)', E_USER_NOTICE);
				break;
			}

			$name = base64_decode($hash);

			// skip the deleted vars
			if (!isset($var_list[$name])) continue;

			if (isset($new_var_list[$new_name])) {
				$rename_success = FALSE;
				trigger_error('Could not rename variables because variable name "'.htmlentities($new_name).'" already exists', E_USER_NOTICE);
				break;
			}

			if ($new_name != $name) {
				if (in_array($name, $parameter_names)) {
					$map->moveParameter($name, $new_name);
				}
				$rename_success = TRUE;
			}

			$new_var_list[$new_name] = $var_list[$name];

		}//end foreach


		if ($rename_success) $var_list = $new_var_list;

		$new_names = array_get_index($_REQUEST, $prefix.'_new_dynamic_data_name', Array());
		if (!empty($new_names)) {

			foreach ($new_names as $seq_number => $new_var_name) {
				$new_var_name = trim($new_var_name);

				$new_var_value = array_get_index($_REQUEST[$prefix.'_new_dynamic_data_value'], $seq_number, '');
				if (empty($new_var_name)) {
					if (!empty($new_var_value)) {
						trigger_error('New variable name cannot be empty', E_USER_WARNING);
					}
					continue;
				}

				// check new name against regex
				$new_name_is_valid = preg_match($var_name_pattern, $new_var_name);
				if (!$new_name_is_valid) {
					trigger_error('Variable name "'.htmlentities($new_var_name).'" contains characters that are not allowed. Can only use letters (A-Za-z), digits(0-9), underscore (_), dash (-) and dot (.)', E_USER_NOTICE);
					continue;
				}

				if (isset($var_list[$new_var_name])) {
					trigger_error('Variable Name "'.htmlentities($new_var_name).'" is already in use', E_USER_WARNING);
					continue;
				}

				$var_list[$new_var_name] = $new_var_value;
				$map->setParameter($new_var_name, 'Variable: '.$new_var_name);
			}
		}

		$asset->setAttrValue('dynamic_vars', $var_list);
		$asset->setAttrValue('parameter_map', unserialize($map->value));

		return TRUE;

	}//end processDynamicData()


}//end class
?>
