<?php
/**
* +--------------------------------------------------------------------+
* | This MySource Matrix CMS file is Copyright (c) Squiz Pty Ltd       |
* | ACN 084 670 600                                                    |
* +--------------------------------------------------------------------+
* | IMPORTANT: Your use of this Software is subject to the terms of    |
* | the Licence provided in the file licence.txt. If you cannot find   |
* | this file please contact Squiz (www.squiz.net) so we may provide   |
* | you a copy.                                                        |
* +--------------------------------------------------------------------+
*
* $Id: form_submission.inc,v 1.33.2.1 2009/04/08 03:26:01 lwright Exp $
*
*/


require_once SQ_INCLUDE_PATH.'/asset.inc';

/**
* Form_Submission
*
* Purpose
*
*
* @author  Marc Mcintyre <mmcintyre@squiz.net>
* @version $Revision: 1.33.2.1 $
* @package MySource_Matrix_Packages
* @subpackage cms
*/
class Form_Submission extends Asset
{


	/**
	* Constructor
	*
	* @param int	$assetid	the asset id to be loaded
	*
	*/
	function Form_Submission($assetid=0)
	{
		$this->_ser_attrs = TRUE;
		return $this->Asset($assetid);

	}//end constructor


	/**
	* returns the answer of an question
	*
	* @param int	$id	the id of the question
	*
	* @return mixed boolean|string
	* @access public
	*/
	function getAnswer($id)
	{
		$a = $this->attr('attributes');
		if (isset($a['answers'][$id]['answer'])) {
			return $a['answers'][$id]['answer'];
		}
		return FALSE;

	}//end getAnswer()


	/**
	* returns the Extra Data of an question - returns an empty array if not exist
	*
	* @param int	$id	the id of the question
	*
	* @return Array
	* @access public
	*/
	function getExtraData($id)
	{
		$a = $this->attr('attributes');
		if (isset($a['answers'][$id]['extra_data'])) {
			return $a['answers'][$id]['extra_data'];
		}
		return Array();

	}//end getExtraData()


	/**
	* returns the name of an question
	*
	* @param int	$id	the id of the question
	*
	* @return string
	* @access public
	*/
	function getName($id)
	{
		$a = $this->attr('attributes');
		if (isset($a['answers'][$id]['name'])) {
			return $a['answers'][$id]['name'];
		}
		return FALSE;

	}//end getName()


	/**
	* sets the answer of a question in this submission object
	*
	* @param int	$id		the id of the question
	* @param mixed	$value	the value of the question
	*
	* @return boolean
	* @access public
	*/
	function setAnswer($id, $value)
	{
		$a = $this->attr('attributes');
		if (empty($a['answers'])) $a['answers'] = Array();

		$a['answers'][$id]['answer'] = $value;

		if (!$this->setAttrValue('attributes', $a)) {
			return FALSE;
		}

		return TRUE;

	}//end setAnswer()


	/**
	* sets the Extra Data for a question's response
	*
	* @param int	$id		the id of the question
	* @param Array	$data	the Extra Data of the question
	*
	* @return boolean
	* @access public
	*/
	function setExtraData($id, Array $data=NULL)
	{
		$a = $this->attr('attributes');
		if (empty($a['answers'])) $a['answers'] = Array();

		$a['answers'][$id]['extra_data'] = $data;

		if (!$this->setAttrValue('attributes', $a)) {
			return FALSE;
		}

		return TRUE;

	}//end setAnswer()


	/**
	* set a form error into the error store
	*
	* @param string	$error	the error to set
	*
	* @return boolean
	* @access public
	*/
	function setError($error)
	{
		$a = $this->attr('attributes');
		if (!isset($a['is_error']) || !$a['is_error']) {
			$a['is_error'] = TRUE;
		}
		if (!isset($a['errors'])) $a['errors'] = Array();
		$a['errors'][] = $error;

		if (!$this->setAttrValue('attributes', $a)) {
			return FALSE;
		}
		return TRUE;

	}//end setError()


	/**
	* get the form errors from the store
	*
	* @return array
	* @access public
	*/
	function getErrors()
	{
		$a = $this->attr('attributes');
		return array_get_index($a, 'errors', Array());

	}//end getErrors()


	/**
	* flush the errors in the store
	*
	* @return boolean
	* @access public
	*/
	function flushErrors()
	{
		$a = $this->attr('attributes');
		$a['is_error'] = FALSE;
		$a['errors'] = Array();

		if (!$this->setAttrValue('attributes', $a)) {
			return FALSE;
		}

		return TRUE;

	}//end flushErrors()


	/**
	* returns true if there is a form error
	*
	* @return boolean
	* @access public
	*/
	function isError()
	{
		$a = $this->attr('attributes');
		return (isset($a['is_error']) && ($a['is_error'])) ? TRUE : FALSE;

	}//end isError()


	/**
	* returns the answers for question in the form:
	*
	* @return array
	* @access public
	*/
	function getAnswers()
	{
		$a = $this->attr('attributes');
		return array_get_index($a, 'answers', Array());

	}//end getAnswers()


	/**
	* sets a summary about a question used to print a complete summary of the answers of this form
	*
	* @param int	$question_id	the id of the question
	* @param string	$name			the name of the question
	* @param string	$value			the value of the question
	*
	* @return boolean
	* @access public
	*/
	function setSummary($question_id, $name, $value)
	{
		$a = $this->attr('attributes');

		if (empty($a['summary'])) $a['summary'] = Array();

		$a['summary'][$question_id]['answer']  = $value;
		$a['summary'][$question_id]['name']    = $name;

		if (!$this->setAttrValue('attributes', $a)) {
			return FALSE;
		}

		return TRUE;

	}//end setSummary()


	/**
	* returns an Array with summary information
	*
	* @param int	$q_id	Question id
	* @param string	$value	Value
	*
	* @return array
	* @access public
	*/
	function getSummary($q_id=NULL, $value='answer')
	{
		$a = $this->attr('attributes');
		if (!$a) return FALSE;

		if (is_null($q_id)) {
			return $a['summary'];
		} else {
			return $a['summary'][$q_id][$value];
		}

	}//end getSummary()


	/**
	* Save attributes set with setAttrValue to the database
	*
	* @param boolean	$dont_run_updated	if true this->_updated() won't be run
	*										(THIS IS ONLY EVER CALLED FROM Asset::create())
	*
	* @return boolean
	* @access public
	* @see asset::setAttrValue()
	*/
	function saveAttributes($dont_run_updated=FALSE)
	{
		$GLOBALS['SQ_SYSTEM']->setRunLevel(SQ_RUN_LEVEL_FORCED);
		$val = parent::saveAttributes($dont_run_updated);
		$GLOBALS['SQ_SYSTEM']->restoreRunLevel();

		return $val;

	}//end saveAttributes()


	/**
	* Increments the version number of the asset based on the part of the version passed in
	*
	* This will override incrementVersion() so the parents of form submissions
	* never get version increases linked to stuff that form submissions do. This
	* is for speed purposes, and generally cuts out half the number of queries
	* required to create a new submission
	*
	* @param string		$number			the part of the version to update (major|minor|micro)
	* @param boolean	$update_parents	should we go through an update all our dependant parents as well ?
	*									NOTE: this is passed to incrementVersion to let it know that the parents
	*									should have their versions updated as well.
	*
	* @return boolean
	* @access public
	*/
	function incrementVersion($number='micro', $update_parents=TRUE)
	{
		return parent::incrementVersion($number, FALSE);

	}//end incrementVersion()


	/**
	* Called to be printed before the design is finished
	*
	* @return void
	* @access public
	*/
	function printFrontend()
	{
		if ($_GET['q'] && (SQ_IN_BACKEND || SQ_IN_LIMBO)) {
			// Download a file upload, but only if we are on the backend somewhere
			$question_assetid = $_GET['q'];
			$question_asset = $GLOBALS['SQ_SYSTEM']->am->getAsset($question_assetid, '', TRUE);

			if ($question_asset && ($question_asset instanceof Form_Question_Type_File_Upload)) {
				$extra_data = $this->getExtraData($question_assetid);
				if (!empty($extra_data['filesystem_path'])) {
					$filepath = $extra_data['filesystem_path'];
					if (is_file($filepath)) {
						require SQ_FUDGE_PATH.'/standards_lists/mime_types.inc';
						$type = array_get_index($standards_lists_mime_types, get_file_type($filepath), 'application/octet-stream');

						header('Content-type: '.$type);
						header('Content-disposition: attachment; filename="'.(basename($filepath)).'"');
						header('Content-length: '.filesize($filepath));
						echo file_get_contents($filepath);
					}
				}
			}

			exit(0);
		}

	}//end printFrontend()
	

	/**
	* Called by the design to print the body of this asset
	*
	* @return void
	* @access public
	*/
	function printBody()
	{
		$summary = $this->attr('attributes');
		$summary = $summary['summary'];
		?>
		<table>
			<thead>
				<tr>
					<th>Question</th>
					<th>Answer</th>
				</tr>
			</thead>
			<tbody>
			<?php
			foreach ($summary as $item) {
				?>
				<tr>
					<td><?php echo $item['name']; ?></td>
					<td><?php echo $item['answer']; ?></td>
				</tr>
				<?php
			}
			?>
			</tbody>
		</table>
		<?php

	}//end printBody()


	/**
	* Get bodycopy keyword replacement
	*
	* Provides a mechanism for providing keyword replacement functions by
	* looking up the function named 'getKeywordNameKeywordReplacement'
	* so an asset wishing to add support for 'best_ever' custom keyword
	* should implement a function getBestEverKeywordReplacement()
	* which returns a replacement string
	*
	* @param string	$keyword	Keyword to find a replacement for
	*
	* @return string
	* @access public
	*/
	function getKeywordReplacement($keyword)
	{
		$matches = Array();
		if (preg_match('/question\_name\_q([0-9]+)/', $keyword, $matches)) {
			$attrs = $this->attr('attributes');
			foreach ($attrs['summary'] as $name => $value) {
				if (substr($name, -3) == ':q'.$matches[1]) {
					return $value['name'];
				}
			}
			return '';
		}
		if (preg_match('/question\_name\_(([0-9]+)\_q([0-9]+))/', $keyword, $matches)) {
			$attrs = $this->attr('attributes');
			$elt = array_get_index($attrs['summary'], $matches[2].':q'.$matches[3], Array('name' => ''));
			return $elt['name'];
		}
		if (preg_match('/question\_answer\_q([0-9]+)/', $keyword, $matches)) {
			$attrs = $this->attr('attributes');
			foreach ($attrs['summary'] as $name => $value) {
				if (substr($name, -3) == ':q'.$matches[1]) {
					return $value['answer'];
				}
			}
			return '';
		}
		if (preg_match('/question\_answer\_(([0-9]+)\_q([0-9]+))/', $keyword, $matches)) {
			$attrs = $this->attr('attributes');
			$elt = array_get_index($attrs['summary'], $matches[2].':q'.$matches[3], Array('answer' => ''));
			return $elt['answer'];
		}
		return parent::getKeywordReplacement($keyword);

	}//end getKeywordReplacement()


	/**
	* Return the keywords for this asset type.
	*
	* This function is called in asset-listing situations like the asset listing, search page etc
	* The return value is in the form:
	* <PRE>
	* Array(
	*   'name' => 'description' => 'the asset name',
	* );
	* </PRE>
	*
	* @return array
	* @access public
	*/
	function getAvailableKeywords()
	{
		$res = parent::getAvailableKeywords();
		$res['question_name_X_qY'] = 'The name of the question with ID X:qY';
		$res['question_answer_X_qY'] = 'The answer to the question with ID X:qY';
		$res['submission_ip_address'] = 'IP address that created this submission';
		return $res;

	}//end getAvailableKeywords()


	/**
	* returns the IP of a submission
	*
	* @return mixed boolean|string
	* @access public
	*/
	function getIP()
	{
		$a = $this->attr('attributes');
		if (isset($a['misc']['ip'])) return $a['misc']['ip'];
		return FALSE;

	}//end getIP()


	/**
	* sets the IP of a submission object
	*
	* @param string	$ip	the ip of the user who submitted
	*
	* @return boolean
	* @access public
	*/
	function setIP($ip)
	{
		$a = $this->attr('attributes');
		if (empty($a['mics'])) $a['misc'] = Array();

		$a['misc']['ip'] = $ip;

		if (!$this->setAttrValue('attributes', $a)) {
			return FALSE;
		}

		return TRUE;

	}//end setIP()


	/**
	* Get the IP of the submission
	*
	* @return string
	* @access public
	*/
	function getSubmissionIpAddressKeywordReplacement()
	{
		return $this->getIP();

	}//end getSubmissionIpAddressKeywordReplacement()


	/**
	* Returns an array of all the permitted link type, the type asset and the cardinality
	*
	* @return array
	* @access private
	* @see Asset::_getAllowLinks()
	*/
	function _getAllowedLinks()
	{
		$page_links = Array(
						SQ_LINK_NOTICE	=> Array(
											'file'	=> Array(
														'card'		=> 'M',
														'exclusive'	=> FALSE,
													   ),
										   ),
					  );
		return $page_links;

	}//end _getAllowedLinks()


}//end class
?>
