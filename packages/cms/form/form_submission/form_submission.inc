<?php
/**
* +--------------------------------------------------------------------+
* | Squiz.net Open Source Licence                                      |
* +--------------------------------------------------------------------+
* | Copyright (c), 2003 Squiz Pty Ltd (ABN 77 084 670 600).            |
* +--------------------------------------------------------------------+
* | This source file may be used subject to, and only in accordance    |
* | with, the Squiz Open Source Licence Agreement found at             |
* | http://www.squiz.net/licence.                                      |
* | Make sure you have read and accept the terms of that licence,      |
* | including its limitations of liability and disclaimers, before     |
* | using this software in any way. Your use of this software is       |
* | deemed to constitute agreement to be bound by that licence. If you |
* | modify, adapt or enhance this software, you agree to assign your   |
* | intellectual property rights in the modification, adaptation and   |
* | enhancement to Squiz Pty Ltd for use and distribution under that   |
* | licence.                                                           |
* +--------------------------------------------------------------------+
*
* $Id: form_submission.inc,v 1.17.2.2 2005/04/14 01:43:58 lwright Exp $
*
*/


require_once SQ_INCLUDE_PATH.'/asset.inc';

/**
* Form_Submission
*
* Purpose
*
*
* @author  Marc Mcintyre <mmcintyre@squiz.net>
* @version $Revision: 1.17.2.2 $
* @package MySource_Matrix_Packages
* @subpackage cms
*/
class Form_Submission extends Asset
{


	/**
	* Constructor
	*
	* @param int	$assetid	the asset id to be loaded
	*
	*/
	function Form_Submission($assetid=0)
	{
		$this->_ser_attrs = true;
		return $this->Asset($assetid);

	}//end constructor


	function create(&$link)
	{
		if (!($linkid = parent::create($link))) {
			return 0;
		}

		return $linkid;

	}//end create()


	/**
	* returns the answer of an question
	*
	* @param int $id the id of the question
	*
	* @return mixed answer
	* @access public
	*/
	function getAnswer($id)
	{
		$a = $this->attr('attributes');
		if (isset($a['answers'][$id]['answer'])) {
			return $a['answers'][$id]['answer'];
		}
		return false;

	}//end getAnswer()


	/**
	* returns the name of an question
	*
	* @param int $id the id of the question
	*
	* @return string name
	* @access public
	*/
	function getName($id)
	{
		$a = $this->attr('attributes');
		if (isset($a['answers'][$id]['name'])) {
			return $a['answers'][$id]['name'];
		}
		return false;

	}//end getName()


	/**
	* sets the answer of a question in this submission object
	*
	* @param integer	$id		the id of the question
	* @param string		$name	the name of the question (useful for printing form summary)
	* @param mixed		$value	the value of the question
	*
	* @return boolean
	* @access public
	*/
	function setAnswer($id, $value)
	{
		$a = $this->attr('attributes');
		if (empty($a['answers'])) $a['answers'] = Array();

		$a['answers'][$id]['answer'] = $value;

		if (!$this->setAttrValue('attributes', $a)) {
			return false;
		}

		return true;

	}//end setAnswer()


	/**
	* set a form error into the error store
	*
	* @param string		$error	the error to set
	*
	* @access public
	* @return boolean
	*/
	function setError($error)
	{
		$a = $this->attr('attributes');
		if (!isset($a['is_error']) || !$a['is_error']) $a['is_error'] = true;
		if (!isset($a['errors'])) $a['errors'] = Array();
		$a['errors'][] = $error;

		if (!$this->setAttrValue('attributes', $a)) {
			return false;
		}
		return true;

	}//end setError()


	/**
	* get the form errors from the store
	*
	* @access public
	* @return Array(string)
	*/
	function getErrors()
	{
		$a = $this->attr('attributes');
		return $a['errors'];

	}//end getErrors()


	/**
	* flush the errors in the store
	*
	* @access public
	* @return boolean
	*/
	function flushErrors()
	{
		$a = $this->attr('attributes');
		$a['is_error'] = false;
		$a['errors'] = Array();

		if (!$this->setAttrValue('attributes', $a)) {
			return false;
		}

		return true;

	}//end flushErrors()


	/**
	* returns true if there is a form error
	*
	* @access public
	* @return boolean
	*/
	function isError()
	{
		$a = $this->attr('attributes');
		return (isset($a['is_error']) && ($a['is_error'])) ? true : false;

	}//end isError()


	/**
	* returns the answers for question in the form:
	*
	* @access public
	* @return Array()
	*/
	function getAnswers()
	{
		$a = $this->attr('attributes');
		return $a['answers'];

	}//end getAnswers()


	/**
	* sets a summary about a question used to print a complete summary of the answers of this form
	*
	* @param integer	$question_id	the id of the question
	* @param string		$name			the name of the question
	* @param string		$value			the value of the question
	*
	* @access public
	* @return boolean
	*/
	function setSummary($question_id, $name, $value)
	{
		$a = $this->attr('attributes');

		if (empty($a['summary'])) $a['summary'] = Array();

		/*if (!isset($a['summary'][$section_id])) {
			$a['summary'][$section_id] = Array(
				'section_name'	=> $section_name,
				'questions'		=> Array(),
			);
		}*/

		$a['summary'][$question_id]['answer']  = $value;
		$a['summary'][$question_id]['name']    = $name;

		if (!$this->setAttrValue('attributes', $a)) {
			return false;
		}

		return true;

	}//end setSummary()


	/**
	* returns an Array with summary information
	*
	* @access public
	* @return Array()
	*/
	function getSummary($q_id=null, $value='answer')
	{
		$a = $this->attr('attributes');
		if (!$a) return false;

		if (is_null($q_id)) return $a['summary'];
		else return $a['summary'][$q_id][$value];

	}//end getSummary()


	/**
	* sets a question to signify that it has been processed
	*
	* @param integer $question_id the question id to set
	*
	* @access public
	* @return boolean
	*/
	function setProcessed($question_id)
	{
		$a = $this->attr('attributes');
		if (!isset($a['processed']))  $a['processed'] = Array();

		$a['processed'][$question_id] = true;

		if (!$this->setAttrValue('attributes', $a)) {
			return false;
		}

		return true;

	}//end setProcessed()


	/**
	* returns TRUE if a question has been processed
	*
	* @param integer $question_id the question id to check
	*
	* @access public
	* @return boolean
	*/
	function isProcessed($question_id)
	{
		$a = $this->attr('attributes');
		if (isset($a['processed'][$question_id]) && $a['processed'][$question_id]) {
			return true;
		}
		return false;

	}//end isProcessed()


	/**
	* Save attributes set with setAttrValue to the database
	*
	* @param boolean	$dont_run_updated	if true this->_updated() won't be run
	*										(THIS IS ONLY EVER CALLED FROM Asset::create())
	*
	* @return boolean
	* @access public
	* @see asset::setAttrValue()
	*/
	function saveAttributes($dont_run_updated=false)
	{
		$GLOBALS['SQ_INSTALL'] = true;
		$val = parent::saveAttributes($dont_run_updated);
		unset($GLOBALS['SQ_INSTALL']);

		return $val;

	}//end saveAttributes()


}//end class
?>
