<?php
/**
* +--------------------------------------------------------------------+
* | This MySource Matrix CMS file is Copyright (c) Squiz Pty Ltd       |
* | ABN 77 084 670 600                                                 |
* +--------------------------------------------------------------------+
* | IMPORTANT: Your use of this Software is subject to the terms of    |
* | the Licence provided in the file licence.txt. If you cannot find   |
* | this file please contact Squiz (www.squiz.com.au) so we may provide|
* | you a copy.                                                        |
* +--------------------------------------------------------------------+
*
* $Id: form_email.inc,v 1.85 2013/10/14 04:26:35 cupreti Exp $
*
*/


require_once dirname(__FILE__).'/../form/form.inc';
require_once SQ_FUDGE_PATH.'/general/www.inc';
require_once SQ_FUDGE_PATH.'/general/file_system.inc';
require_once SQ_FUDGE_PATH.'/general/text.inc';


define('SQ_FORM_ACTION_BEFORE_CREATE', 1);
define('SQ_FORM_ACTION_BEFORE_SUBMIT', 2);
define('SQ_FORM_ACTION_AFTER_SUBMIT', 3);

/**
* Form_Email
*
* Purpose
*
*
* @author  Marc Mcintyre <mmcintyre@squiz.net>
* @version $Revision: 1.85 $
* @package MySource_Matrix_Packages
* @subpackage cms
*/
class Form_Email extends Form
{


	/**
	* Constructor
	*
	* @param int	$assetid	the asset id to be loaded
	*
	*/
	function Form_Email($assetid=0)
	{
		$this->Form($assetid);

	}//end constructor


	/**
	* Returns name of the asset
	*
	* @param boolean	$short_name	whether or not we are after the shortname or the full name
	* @param int		$contextid	what context to return the name from
	*
	* @return string
	* @access private
	* @see Asset::_getName()
	*/
	function _getName($short_name=FALSE, $contextid=NULL)
	{
		// No context specified, using the current context
		if ($contextid === NULL) {
			$contextid = $GLOBALS['SQ_SYSTEM']->getContextId();
		}//end if

		// Obtain the attribute value for Name from the specified Context
		$values = $GLOBALS['SQ_SYSTEM']->am->getAttributeValuesByName('name', $this->type(), Array($this->id), $contextid);
		if (empty($values) === TRUE) {
			return parent::_getName($short_name, $contextid);
		} else {
			return $values[$this->id];
		}

	}//end _getName()


	/**
	* Lets asset.inc save a copy of this asset at this point in time
	* and then updates the reference to content_file_questions.php content_file.php
	* to point correctly to .sq_system/content_file_questions.php
	*
	* This copy gets used when the asset is live and the user does not have write access
	*
	* @return boolean
	* @access public
	*/
	function saveSystemVersion()
	{
		// let parents do the copying of the files first
		if (!parent::saveSystemVersion() || !is_file($this->data_path.'/.sq_system/content_file.php')) {
			return FALSE;
		}

		// Save the sections linked directly to this form, if any
		$section_links = $this->getSectionLinks();
		$links_data = is_array($section_links) ? serialize($section_links) : serialize(Array());
		if (file_put_contents($this->data_path.'/.sq_system/before_section_links', $links_data) === FALSE) {
			return FALSE;
		}
		if (file_put_contents($this->data_path.'/.sq_system/after_section_links', $links_data) === FALSE) {
			return FALSE;
		}

		// We need to fix file links to questions and sections content file that still points to safe edit version
		$content = file_to_string($this->data_path.'/.sq_system/content_file.php');

		// Change the form questions content file path to point to system version file
		$raw_data_path = str_replace(SQ_DATA_PATH.'/', 'SQ_DATA_PATH."/', $this->data_path);
		$content = str_replace($raw_data_path.'/content_file_questions.php"', $raw_data_path.'/.sq_system/content_file_questions.php"', $content);

		// Change the form sections content file path to their respective system versions
		$sections = $this->getSections();
		foreach($sections as $section) {
			if (!is_null($section)) {
				$raw_data_path = str_replace(SQ_DATA_PATH.'/', 'SQ_DATA_PATH."/', $section->data_path);
				$content = str_replace($raw_data_path.'/content_file.php"', $raw_data_path.'/.sq_system/content_file.php"', $content);
			}
		}//end foreach

		return file_put_contents($this->data_path.'/.sq_system/content_file.php', $content) !== FALSE;

	}//end saveSystemVersion()


	/**
	* Let the parent replace the editing version with the system (live) version
	* and then updates the .sq_system reference within the file
	*
	* @return boolean
	* @access public
	*/
	public function revertToSystemVersion()
	{
		// Revert the sections added to the form in safe edit
		if (is_file($this->data_path.'/.sq_system/before_section_links') && is_file($this->data_path.'/.sq_system/after_section_links')) {
			// Validate the system version files
			$after_links = @unserialize(file_get_contents($this->data_path.'/.sq_system/after_section_links'));
			if (!is_array($after_links)) {
				trigger_error(sprintf(translate('System version file %1$s for Form asset #%2$s holding the "after" section links info does not contains expected data.'), $this->data_path.'/.sq_system/after_section_links',  $this->id), E_USER_WARNING);
			}
			$before_links = @unserialize(file_get_contents($this->data_path.'/.sq_system/before_section_links'));
			if (!is_array($before_links)) {
				trigger_error(sprintf(translate('System version file %1$s for Form asset #%2$s holding the "before" section links info does not contains expected data.'), $this->data_path.'/.sq_system/before_section_links',  $this->id), E_USER_WARNING);
			}

			// NOTE: Sections can be added in safe edit mode, but cannot be deleted
			if (is_array($after_links) && is_array($before_links)) {
				foreach($after_links as $after_link) {
					if (isset($after_link['minorid']) && isset($after_link['minorid'])) {
						$live_version_link = FALSE;
						foreach($before_links as $before_link) {
							if (isset($before_link['minorid']) && isset($before_link['minorid'])) {
								if ($after_link['minorid'] == $before_link['minorid']) {
									// The section was there before we went safe edit
									$live_version_link = TRUE;
									break;
								}
							}//end if
						}//end foreach before_links

						// This link was added in safe edit, hence needs to go
						if (!$live_version_link) {
							$GLOBALS['SQ_SYSTEM']->setRunLevel(SQ_RUN_LEVEL_FORCED);
								$this->deleteLink($after_link['linkid']);
							$GLOBALS['SQ_SYSTEM']->restoreRunLevel();
						}

					}//end if
				}//end foreach after links
			}//end if
		}//end if

		// Clear the links info files
		unlink($this->data_path.'/.sq_system/before_section_links');
		unlink($this->data_path.'/.sq_system/after_section_links');

		// let asset.inc copy across the file back from .sq_system dir
		parent::revertToSystemVersion();

		// once copied fix the content of the files to not point at .sq_system
		return  parent::fileRegeneration();

	}//end revertToSystemVersion()


	/**
	* Returns the header of the form, ie. the start form tags and anything else
	* needed by them
	*
	* Form Email adds a hidden URL field specifying the referral URL, which can
	* be used by emails (in particular, generic send-to-a-friend type emails).
	* @param int	$use_confirmation	No need to print JS validation code on confirmation page
	*
	* @return boolean
	* @access public
	*/
	function getFormHeader($use_confirmation = FALSE)
	{
		$header = parent::getFormHeader($use_confirmation);

		$prefix = $this->getPrefix();

		// If we have a multi-page form, we would only need to know how we got
		// here originally. Therefore, if we have been sent a referral URL from
		// a previous page, use that instead.
		// Otherwise, generate the referrer using what we have been sent by the
		// HTTP request (with all the caveats that implies).
		if (array_key_exists($prefix.'_referral_url', $_POST)) {
			$referer = $_POST[$prefix.'_referral_url'];
		} else {
			$referer = (isset($_SERVER['HTTP_REFERER'])) ? $_SERVER['HTTP_REFERER'] : '';
		}

		ob_start();
			?><input type="hidden" name="<?php echo $prefix; ?>_referral_url" value="<?php echo htmlentities($referer); ?>" /><?php
		$header .= ob_get_clean();

		return $header;

	}//end getFormHeader()


	/**
	* Return form information (site name, site id, page name, page id, url, submission date)
	*
	* @param boolean	$html	return html formatted or not
	*
	* @return string
	* @access public
	*/
	function getFormInfo($html=FALSE)
	{
		$info = parent::getFormInfo();
		$title = 'Form Information';
		$information  = ($html) ? '<b>'.$title.'</b><br />' : $title."\n\n";
		$information .= ($html) ? '<table>' : '';

		foreach ($info as $name => $value) {
			$information .= ($html) ? '<tr><td valign="top">'.ucwords(str_replace('_', ' ', $name)).'</td>' : ucwords(str_replace('_', ' ', $name)).' : ';
			$information .= ($html) ? '<td valign="top">'.$value.'</td></tr>' : $value."\n";
		}
		// add form submission time
		$now = date('d M Y g:i a', time());
		$information .= ($html) ? '<tr><td valign="top">'.translate('Submission Time').'</td>' : translate('Submission Time').' : ';

		$information .= ($html) ? '<td valign="top">'.$now.'</td></tr>' : $now."\n";
		// add submission ip address
		$ip_address = $_SERVER['REMOTE_ADDR'];
		$information .= ($html) ? '<tr><td valign="top">'.translate('Submission IP Address').'</td>' : translate('Submission IP Address').' : ';

		$information .= ($html) ? '<td valign="top">'.$ip_address.'</td></tr>' : $ip_address."\n";

		$information .= ($html) ? '</table>' : '';
		return $information;

	}//end getFormInfo()


	/**
	* Clones certain specified components of the asset
	*
	* @param object		&$clone		the clone asset shell
	* @param array		$components	the wanted components to clone eg.
	* <pre>
	* 								Array(
	* 									'attributes',
	* 									'metadata_schemas',
	* 									'metadata',
	* 									'workflow',
	* 									'permissions',
	* 									'data',
	* 									'content_tags',
	* 									'roles',
	* 								);
	* 								or alternately
	* 								Array('all');
	* </pre>
	* @param boolean	$override	whether or not to override the existing permission, metadata schemas, workflow schemas with the new ones.
	*
	* @return boolean
	* @access public
	* @see asset::cloneComponents()
	*/
	function cloneComponents(&$clone, $components, $override=FALSE)
	{
		$GLOBALS['SQ_SYSTEM']->changeDatabaseConnection('db2');
		$GLOBALS['SQ_SYSTEM']->doTransaction('BEGIN');

		// Remove metadata schemas from form submission clone components
		$metadata_schemas_key = array_search('metadata_schemas', $components);
		if ($metadata_schemas_key !== FALSE) {
			unset($components[$metadata_schemas_key]);
		}

		if (!parent::cloneComponents($clone, $components, $override)) {
			$GLOBALS['SQ_SYSTEM']->doTransaction('ROLLBACK');
			$GLOBALS['SQ_SYSTEM']->restoreDatabaseConnection();
			return FALSE;
		}

		 $GLOBALS['SQ_CLONE_COMPONENTS'] = TRUE;

		if (in_array('attributes', $components) || in_array('all', $components)) {
			// send to a friend format
			$recip = unserialize($this->attr('recipient_emails_format'));

			if(array_key_exists('to',$recip)) {
				$recip = str_replace('%response_'.$this->id.'_', '%response_'.$clone->id.'_', $recip);
				$recip['to'] = str_replace('%response_'.$this->id.'_', '%response_'.$clone->id.'_', $recip['to']);
			} else {
				$recip = str_replace('%response_'.$this->id.'_', '%response_'.$clone->id.'_', $recip);
			}

			$rec = unserialize($this->attr('receipt_emails_format'));

			if (array_key_exists('to',$rec)) {
				$rec = str_replace('%response_'.$this->id.'_', '%response_'.$clone->id.'_', $rec);
				$rec['to'] = str_replace('%response_'.$this->id.'_', '%response_'.$clone->id.'_', $rec['to']);
			} else {
				$rec = str_replace('%response_'.$this->id.'_', '%response_'.$clone->id.'_', $rec);
			}

			$staf = unserialize($this->attr('staf_format'));

			if (array_key_exists('to',$staf)) {
				$staf = str_replace('%response_'.$this->id.'_', '%response_'.$clone->id.'_', $staf);
				$staf['to'] = str_replace('%response_'.$this->id.'_', '%response_'.$clone->id.'_', $staf['to']);
			} else {
				$staf = str_replace('%response_'.$this->id.'_', '%response_'.$clone->id.'_', $staf);
			}

			$sel = $this->attr('selective_emails');
			foreach ($sel as $key => $null) {
				$sel[$key]['address'] = str_replace('%response_'.$this->id.'_', '%response_'.$clone->id.'_', $sel[$key]['address']);
				$sel[$key]['assetid'] = str_replace($this->id.':q', $clone->id.':q', $sel[$key]['assetid']);
			}

			// field selections for STAF and receipt
			$staf_field = str_replace($this->id.':q', $clone->id.':q', $this->attr('staf_field'));
			$receipt_field = str_replace($this->id.':q', $clone->id.':q', $this->attr('receipt_field'));

			// save the information
			$clone->setAttrValue('recipient_emails_format', serialize($recip));
			$clone->setAttrValue('receipt_emails_format', serialize($rec));
			$clone->setAttrValue('staf_format', serialize($staf));
			$clone->setAttrValue('selective_emails', $sel);

			$clone->setAttrValue('staf_field', $staf_field);
			$clone->setAttrValue('receipt_field', $receipt_field);

			$clone->saveAttributes();

		}//end if

		 $GLOBALS['SQ_CLONE_COMPONENTS'] = FALSE;

		$GLOBALS['SQ_SYSTEM']->doTransaction('COMMIT');
		$GLOBALS['SQ_SYSTEM']->restoreDatabaseConnection();
		return TRUE;

	}//end cloneComponents()


	/**
	* delete a question to this form
	*
	* @param object	&$question	the question object to delete
	*
	* @return boolean
	* @access public
	*/
	function deleteQuestion(&$question)
	{
		$GLOBALS['SQ_SYSTEM']->changeDatabaseConnection('db2');
		$GLOBALS['SQ_SYSTEM']->doTransaction('BEGIN');

		if (!parent::deleteQuestion($question)) {
			$GLOBALS['SQ_SYSTEM']->doTransaction('ROLLBACK');
			$GLOBALS['SQ_SYSTEM']->restoreDatabaseConnection();
			return FALSE;
		}

		if ($this->attr('staf_field') == $question->id) {
			$this->setAttrValue('staf_field', '');
		}

		if ($this->attr('receipt_field') == $question->id) {
			$this->setAttrValue('receipt_field', '');
		}

		if (!$this->saveAttributes()) {
			$GLOBALS['SQ_SYSTEM']->doTransaction('ROLLBACK');
			$GLOBALS['SQ_SYSTEM']->restoreDatabaseConnection();
			return FALSE;
		}

		$GLOBALS['SQ_SYSTEM']->doTransaction('COMMIT');
		$GLOBALS['SQ_SYSTEM']->restoreDatabaseConnection();

		return TRUE;

	}//end deleteQuestion()


	/**
	* Actions to carry out before creating the form submission
	* Applies to single page form only
	*
	* @return boolean
	* @access protected
	*/
	protected function _preCreateForm()
	{
		// For multi page form, 'before create' actions will execute before finishing the submission
		/// See: self::_preFinishForm()
		if ($this->getTotalPages(FALSE) > 1) {
			return TRUE;
		}

		// Perform submission actions that are to be executed before finishing the form
		if (!$this->performSubmissionActions(SQ_FORM_ACTION_BEFORE_CREATE)) {
			return FALSE;
		}

		return parent::_preCreateForm();

	}//end _preCreateForm()


	/**
	* Actions to carry out before finishing the form submission
	*
	* @return boolean
	* @access protected
	*/
	protected function _preFinishForm()
	{
		// Execute the 'before create' actions for multi page form
		if ($this->getTotalPages(FALSE) > 1 && !$this->performSubmissionActions(SQ_FORM_ACTION_BEFORE_CREATE)) {
			return FALSE;
		}

		// Perform submission actions that are to be executed before finishing the form
		if (!$this->performSubmissionActions(SQ_FORM_ACTION_BEFORE_SUBMIT)) {
			return FALSE;
		}

		return parent::_preFinishForm();

	}//end _preFinishForm()


//--        POST-SUBMISSION ACTIONS        --//


	/**
	* Send all the emails when the form is completed
	*
	* @return boolean
	* @access public
	*/
	function finishForm()
	{
		parent::finishForm();
		$this->mailRecipients();
		$this->mailReceipt();
		$this->sendToFriends();

		// Perform submission actions that are to be executed after finishing the form
		$this->performSubmissionActions(SQ_FORM_ACTION_AFTER_SUBMIT);

		// Perform selective actions
		$this->runSelectiveEmails();

		return TRUE;

	}//end finishForm()


	/**
	* Mail a receipt to the user if a receipt email field has been assigned in Email Options
	*
	* @return boolean
	* @access public
	*/
	function mailReceipt()
	{
		$email_field_assetid = $this->attr('receipt_field');
		if (empty($email_field_assetid)) return FALSE;

		$email_field = $GLOBALS['SQ_SYSTEM']->am->getAsset($email_field_assetid);
		if (empty($email_field)) return FALSE;
		$address = $email_field->getValue();

		$additional_reps = Array(
							'receipt_address'	=> $address,
						   );

		$email_format_attr = $this->getAttribute('receipt_emails_format');

		// append the 'To:' address with the address from the e-mail field
		$current_value = @unserialize($email_format_attr->value);
		$current_value['to'][] = $address;
		$email_format_attr->value = serialize($current_value);

		$this->sendEmail($email_format_attr, $additional_reps);

		return TRUE;

	}//end mailReceipt()


	/**
	* Send mail to recipients set in the backend
	*
	* @return boolean
	* @access public
	*/
	function mailRecipients()
	{
		$email_format_attr = $this->getAttribute('recipient_emails_format');
		$this->sendEmail($email_format_attr);
		return TRUE;

	}//end mailRecipients()


	/**
	* Returns array of file attachment assetids
	*
	* @return array
	* @access public
	*/
	function _getAttachments()
	{
		$questions = $this->getAllQuestions();
		$db = MatrixDAL::getDb();

		$file_assets = Array();
		$filenames = Array();

		foreach ($questions as $q_assetid => $question) {
			if ($question['question_type_code'] == 'form_question_type_file_upload') {
				$q_asset = $GLOBALS['SQ_SYSTEM']->am->getAsset($q_assetid);
				if (!is_null($q_asset) && $q_asset->attr('attach_to_mail')) {
					$file_asset_id = $q_asset->getUploadedFileId();
					if (!empty($file_asset_id)) {
						$file_assets[] = $file_asset_id;
					} else {
						// We have a permanent storage
						if (isset($q_asset->extra_data['filesystem_path']) && !empty($q_asset->extra_data['filesystem_path'])) {
							$file_path = $q_asset->extra_data['filesystem_path'];
							if(strpos($file_path, '/') !== 0) $file_path = SQ_SYSTEM_ROOT.'/'.$file_path;
							$filenames[] = $file_path;
						}
					}
				}
			}
		}

		return Array(
				'assets'	=> $file_assets,
				'filenames'	=> $filenames,
			   );

	}//end _getAttachments()


	/**
	* Mail a receipt to friends if a STAF field has been assigned in Email Options
	*
	* @return boolean
	* @access public
	*/
	function sendToFriends()
	{
		$email_field_assetid = $this->attr('staf_field');
		if (empty($email_field_assetid)) return FALSE;

		$email_field = $GLOBALS['SQ_SYSTEM']->am->getAsset($email_field_assetid);
		if (empty($email_field)) return FALSE;
		$addresses = preg_split('/[\s;,]+/',$email_field->getValue());

		$email_format_attr = $this->getAttribute('staf_format');

		// append the 'To:' address with the address from the e-mail field
		$current_value = @unserialize($email_format_attr->value);
		$current_value['to'] = array_merge($current_value['to'], $addresses);
		$email_format_attr->value = serialize($current_value);

		$this->sendEmail($email_format_attr);

		return TRUE;

	}//end sendToFriends()


	/**
	* Run selective emails application
	*
	* @return boolean
	* @access public
	*/
	function runSelectiveEmails()
	{
		// attribute which holds all the selective email rules
		$selective_emails = $this->attr('selective_emails');

		// these are where we store the recipients of each respective type of email...
		// if rules pass then this will contain who is receiving each email
		$recipients	= Array();
		$receipts	= Array();
		$stafs		= Array();

		for (reset($selective_emails); NULL !== ($k = key($selective_emails)); next($selective_emails)) {
			$sel_email =& $selective_emails[$k];

			// check to see whether it is valid in the first place
			$valid = TRUE;

			if (empty($sel_email['rules'])) $valid = FALSE;				// no rule parts!
			if (empty($sel_email['send'])) $valid = FALSE;				// type of mail is empty
			if (empty($sel_email['address'])) $valid = FALSE;			// address to send to is empty

			if ($valid) {

				// Short circuiting rules for this loop. If we are requiring ALL rule parts to succeed
				// then we start with a Pass outcome and exit on the first Fail. If we are only needing
				// ANY then we start with a Fail and exit on the first Pass.
				$require_all = ($sel_email['require'] == 'all');
				$passed = $require_all;

				// find the rule parts
				$rule_parts =& $sel_email['rules'];

				for (reset($rule_parts); NULL !== ($rule_key = key($rule_parts)); next($rule_parts)) {
					$rule =& $rule_parts[$rule_key];
					$q_asset = $GLOBALS['SQ_SYSTEM']->am->getAsset($rule['assetid']);

					// if this rule is broken due to a deleted question, the rule
					// will automatically fail
					if (!$q_asset) {
						$passed = FALSE;
						break;
					}

					$answer = $q_asset->getValue();

					$type_code = 'form_question_rule_type_'.$rule['name'];
					$GLOBALS['SQ_SYSTEM']->am->includeAsset($type_code);
					$rule_asset = new $type_code();
					$rule_passed = $rule_asset->evaluate($answer, $rule, $q_asset);

					// Short Circuit evaluation, see note above this loop.
					if ($require_all && !$rule_passed) {
						// require ALL, rule part FAILED => fail whole rule
						$passed = FALSE;
						break;
					} else if (!$require_all && $rule_passed) {
						// require ANY, rule part PASSED => pass whole rule
						$passed = TRUE;
						break;
					}

				}//end for rule parts

				if ($passed) {
					// parse addresses into an array in case multiples are sent
					$addresses = preg_split('/[\s;,]+/',$sel_email['address']);

					switch ($sel_email['send']) {
						case 'recipient':
							$recipients	= array_merge($recipients, $addresses);
						break;
						case 'receipt':
							$receipts	= array_merge($receipts, $addresses);
						break;
						case 'staf':
							$stafs		= array_merge($stafs, $addresses);
						break;
					}
				}

			}//end if valid

		}//end for selective email rules


		// recipient emails
		if (!empty($recipients)) {
			// only send one of each type of email to each recipient
			$recipients = array_unique($recipients);

			$email_format = $this->getAttribute('recipient_emails_format');

			// substitute generic keywords with email format-specific keywords
			$current_value = @unserialize($email_format->value);

			if (!empty($current_value)) {
				$current_value['to'] = $recipients;
				$email_format->value = serialize($current_value);
				$this->sendEmail($email_format);
			}
		}


		// receipt emails
		if (!empty($receipts)) {
			// only send one of each type of email to each recipient
			$receipts = array_unique($receipts);

			$email_format = $this->getAttribute('receipt_emails_format');

			// substitute generic keywords with email format-specific keywords
			$current_value = @unserialize($email_format->value);

			if (!empty($current_value)) {
				$current_value['to'] = $receipts;
				$email_format->value = serialize($current_value);

				$additional_reps = Array('receipt_address' => '');
				$this->sendEmail($email_format, $additional_reps);
			}
		}


		// send to a friend
		if (!empty($stafs)) {
			// only send one of each type of email to each recipient
			$stafs = array_unique($stafs);

			$email_format = $this->getAttribute('staf_format');

			// substitute generic keywords with email format-specific keywords
			$current_value = @unserialize($email_format->value);

			if (!empty($current_value)) {
				$current_value['to'] = $stafs;
				$email_format->value = serialize($current_value);
				$this->sendEmail($email_format);
			}
		}

		return TRUE;

	}//end runSelectiveEmails()


	/**
	* Common function for sending away an email format
	*
	* This function automatically replaces the common Thank You/email bodycopy
	* keywords. Additional keywords to replace can be sent through the
	* $additional_reps parameter.
	*
	* @param object	&$email_format_attr	(Asset_Attribute_Email_Format)
	*									The email format to send off
	* @param array	$replacements		(string => string) Additional
	*									replacements for a certain
	*									email (eg. receipt address)
	*
	* @return void
	* @access private
	*/
	function sendEmail(&$email_format_attr, $replacements=Array())
	{
		$current_value = @unserialize($email_format_attr->value);
		$filenames = Array();

		// return false if there is no-one to send to
		if (empty($current_value['to']) && empty($current_value['to_assetids'])) {
			return FALSE;
		}

		// substitute generic keywords with email format-specific keywords
		$current_value['html_format'] = str_replace(
			Array('%form_info%',      '%form_summary%'),
			Array('%form_info_html%', '%form_summary_html%'), $current_value['html_format']);
		$current_value['text_format'] = str_replace(
			Array('%form_info%',      '%form_summary%'),
			Array('%form_info_text%', '%form_summary_text%'), $current_value['text_format']);

		// add attachments to emails
		$current_value['attachments'] = Array();
		$filenames = Array();
		$dynamic_attachments_attr = NULL;
		if (array_get_index($current_value, 'inc_attachments', FALSE)) {
			$attachments = $this->_getAttachments();
			$current_value['attachments'] = $attachments['assets'];
			$filenames = $attachments['filenames'];

			// Include dynamic file attachments for the given email format attribute
			$dynamic_attachments_attr = NULL;
			switch($email_format_attr->name) {
				case 'recipient_emails_format':
					$dynamic_attachments_attr = $this->getAttribute('recipient_email_attachments');
				break;
				case 'receipt_emails_format':
					$dynamic_attachments_attr = $this->getAttribute('receipt_email_attachments');
				break;
				case 'staf_format':
					$dynamic_attachments_attr = $this->getAttribute('staf_email_attachments');
				break;
			}//end switch

			if (!is_null($dynamic_attachments_attr)) {
				// Get the form specific keyword replacments for keywords in dynamic file attribute settings, if any
				$attr_keywords = $dynamic_attachments_attr->getKeywords();
				$attr_replacements = Array();
				foreach ($attr_keywords as $keyword) {
					if (!isset($attr_replacements[$keyword])) {
						$attr_replacements[$keyword] = $this->_getThankYouKeywordReplacement($keyword);
					}
				}

				$additional_attachments = $dynamic_attachments_attr->generateFiles($attr_replacements);
				if (!empty($additional_attachments)) {
					$filenames = array_merge($filenames, $additional_attachments);
				}
			}
		}

		$all_text = $current_value['html_format']
					.' '.$current_value['text_format']
					.' '.implode(', ', $current_value['to'])
					.' '.$current_value['from']
					.' '.array_get_index($current_value, 'reply_to', '')
					.' '.$current_value['subject'];

		$all_keywords = extract_keywords($all_text);

		if (!is_array($replacements)) $replacements = Array();

		foreach ($all_keywords as $keyword) {
			if (isset($replacements[$keyword])) continue;
			$replacements[$keyword] = $this->_getThankYouKeywordReplacement($keyword);
		}

		$email_format_attr->value = serialize($current_value);
		$email_format_attr->sendMail($replacements, $filenames);

		if (!is_null($dynamic_attachments_attr)) {
			$dynamic_attachments_attr->cleanUpGeneratedFiles();
		}

	}//end sendEmail()


	/**
	* Perform any submission actions that are valid and active
	*
	* @param int $submit_at	At what point to run the form actions
	*
	* @return boolean
	*/
	public function performSubmissionActions($submit_at=SQ_FORM_ACTION_AFTER_SUBMIT)
	{
		$success = TRUE;
		$actions = $this->attr('actions');
		foreach ($actions as $action_id => $action) {
			$action_type = $action['type_code'];
			$GLOBALS['SQ_SYSTEM']->am->includeAsset($action_type);

			// If need to perform 'before create' actions, skip other actions
			if ($submit_at == SQ_FORM_ACTION_BEFORE_CREATE && !isset($action['settings']['before_create'])) continue;

			// If need to perform 'before submit' actions, skip other actions
			if ($submit_at == SQ_FORM_ACTION_BEFORE_SUBMIT && !isset($action['settings']['before_submit'])) continue;

			// If need to perform 'after submit' actions, skip other actions
			if ($submit_at == SQ_FORM_ACTION_AFTER_SUBMIT && (isset($action['settings']['before_create']) || isset($action['settings']['before_submit']))) continue;

			if ($action['active'] && call_user_func(Array($action_type, 'isValid'), $this, $action['settings'])) {
				$success &= call_user_func(Array($action_type, 'execute'), $this, $action['settings'], $action_id);
				// if a submission action fails, we must stop rest of actions
				if(!$success) break;
			}
		}

		return $success;

	}//end performSubmissionActions()


	/**
	* Get appropriate keywords for Thank You bodycopy and emails
	*
	* Since referral assets have always been added at the Form_Email level,
	* additional keywords should be added here instead
	*
	* @param string	$keyword	keyword to replace
	*
	* @return string
	*/
	public function _getThankYouKeywordReplacement($keyword)
	{
		$full_keyword = $keyword;
		$keyword = parse_keyword($keyword, $modifiers);
		$prefix = $this->getPrefix();
		$replacement = NULL;

		// Referrer is used by several keywords below
		$referrer = (isset($_POST[$prefix.'_referral_url'])) ? $_POST[$prefix.'_referral_url'] : '';

		if ($keyword == 'referral_url') {
			$replacement = $referrer;
		} else if (preg_match('|^referring_asset_(.*)|', $keyword, $matches)) {
			// referring asset keyword, if we have a Matrix asset URL
			// eg. %referring_asset_assetid%
			if (!empty($referrer)) {
				// use the url to work out the referring asset
				$referrer = clean_url($referrer);

				$url_parts = parse_url($referrer);
				$protocol = array_get_index($url_parts, 'scheme');
				$path = array_get_index($url_parts, 'host').array_get_index($url_parts, 'path');

				$referrer_asset = $GLOBALS['SQ_SYSTEM']->am->getAssetFromURL($protocol, $path, TRUE, TRUE);
				if (!is_null($referrer_asset)) {
					$referrer_keyword = 'asset_'.$matches[1];

					$referrer_replacement = $referrer_asset->getKeywordReplacement($referrer_keyword);
					if ($referrer_replacement !== "%$referrer_keyword%") {
						$replacement = $referrer_replacement;
					} else {
						$replacement = '';
					}
				}
			}//end if referrer is not empty

		} else if ($keyword == 'youtube_video_link'){
			$replacement = (isset($this->form_action_keywords['youtube_video_link'])) ? $this->form_action_keywords['youtube_video_link'] : '';
		} else if ($keyword == 'youtube_video_id'){
			$replacement = (isset($this->form_action_keywords['youtube_video_id'])) ? $this->form_action_keywords['youtube_video_id'] : '';
		} else if ($keyword == 'youtube_video_published_date'){
			$replacement = (isset($this->form_action_keywords['youtube_video_published_date'])) ? $this->form_action_keywords['youtube_video_published_date'] : '';
		} else {
			$replacement = parent::_getThankYouKeywordReplacement($keyword);
		}

		// If keyword was not replaced, put it back to be replaced later
		if ($replacement == '%'.$keyword.'%') {
			$replacement = '%'.$full_keyword.'%';
		} else {
			$replace_keywords = Array(
									'assetid' 	=> $this->id,
									'call_fns'	=> Array ('_getThankYouKeywordReplacement', 'getKeywordReplacement'),
								);
			apply_keyword_modifiers($replacement, $modifiers, $replace_keywords);
		}

		return $replacement;

	}//end _getThankYouKeywordReplacement()

}//end class

?>
