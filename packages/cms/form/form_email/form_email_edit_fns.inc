<?php
/**
* +--------------------------------------------------------------------+
* | Squiz.net Commercial Module Licence                                |
* +--------------------------------------------------------------------+
* | Copyright (c) Squiz Pty Ltd (ACN 084 670 600).                     |
* +--------------------------------------------------------------------+
* | This source file is not open source or freely usable and may be    |
* | used subject to, and only in accordance with, the Squiz Commercial |
* | Module Licence.                                                    |
* | Please refer to http://www.squiz.net/licence for more information. |
* +--------------------------------------------------------------------+
*
* $Id: form_email_edit_fns.inc,v 1.38.2.17 2005/10/18 02:27:13 lwright Exp $
*
*/


require_once dirname(__FILE__).'/../form/form_edit_fns.inc';
require_once SQ_FUDGE_PATH.'/datetime_field/datetime_field.inc';
require_once SQ_FUDGE_PATH.'/general/datetime.inc';

/**
* Form_Email_Edit_Fns
*
* Purpose
*
*
* @author  Marc McIntyre <mmcintyre@squiz.net>
* @version $Revision: 1.38.2.17 $
* @package MySource_Matrix_Packages
* @subpackage cms
*/
class Form_Email_Edit_Fns extends Form_Edit_Fns
{


	/**
	* Constructor
	*
	*/
	function Form_Email_Edit_Fns()
	{
		$this->Form_Edit_Fns();

	}//end constructor


//--        SUBMISSIONS        --//


	/**
	* Paints the submissions block
	*
	* @param object Form_Email			&$asset	the asset whose interface we are painting
	* @param object	Backend_Outputter	&$o		the outputter class
	* @param string						$prefix	prefix for the form elements
	*
	* @return boolean
	* @access public
	*/
	function paintSubmissions(&$asset, &$o, $prefix)
	{
		if (!$asset->writeAccess('attributes')) return false;

		$expand_list = isset($_POST[$prefix.'_viewsub']) ? array_keys($_POST[$prefix.'_viewsub']) : Array();
		$num_subs = 0;

		$parameters = Array(
						'min'			=> '2003-01-01 00:00:00',
						'max'			=> ts_iso8601(time()),
						'allow_circa'	=> '0',
						'show'			=> Array('y', 'm', 'd'),
						'null'			=> Array(),
						'style'			=> Array(
											'y'	=> 's',
											'm'	=> 's',
											'd'	=> 's',
										   ),
					  );

		$parameters['print_format'] = 'j M Y';

		$from_value = isset($_POST[$prefix.'_fromvalue']) ? ts_iso8601(mktime(0,0,0,$_POST[$prefix.'_fromvalue']['m'],$_POST[$prefix.'_fromvalue']['d'],$_POST[$prefix.'_fromvalue']['y'])) : date('Y-m-d',time()-7*86400).' --:--:--';
		$to_value = isset($_POST[$prefix.'_tovalue']) ? ts_iso8601(mktime(0,0,0,$_POST[$prefix.'_tovalue']['m'],$_POST[$prefix.'_tovalue']['d'],$_POST[$prefix.'_tovalue']['y'])) : date('Y-m-d').' --:--:--';

		$from = new Datetime_Field($prefix.'_from', $from_value, $parameters);
		$to = new Datetime_Field($prefix.'_to', $to_value, $parameters);

		// grab the number of assets per page, defaulting to 50 at a time
		$num_per_page = array_get_index($_REQUEST, $prefix.'_per_page', 50);
		$submission_offset = array_get_index($_REQUEST, $prefix.'_submission_offset', 0);

		if ($num_per_page < 1) {
			$num_per_page = 50;
		}

		// grab the fields for printing as a substitution
		ob_start();
			$from->printField();
			$from_field = ob_get_contents();
		ob_end_clean();

		ob_start();
			$to->printField();
			$to_field = ob_get_contents();
		ob_end_clean();

		ob_start();
			text_box($prefix.'_per_page', $num_per_page, 3);
			$page_field = ob_get_contents();
		ob_end_clean();

		?>View submissions from <?php echo $from_field ?> to <?php echo $to_field ?> and display <?php echo $page_field ?> submissions at a time<?php

		$o->closeField();

		$o->openField('Submissions');

		$from_value = iso8601_date_component($from_value).' 00:00:00';
		$to_value = iso8601_date_component($to_value).' 23:59:59';

		// convert the ISO times to time stamps but manually because we can't be sure
		// about the h:m:s section of the above times
		$from_ts = mktime(0,0,0,$from_value[1],$from_value[2],$from_value[0]);
		$to_ts   = mktime(23,59,59,$to_value[1],$to_value[2],$to_value[0]);

		$sql = 'SELECT
					*
				FROM
					('.SQ_TABLE_RUNNING_PREFIX.'ast a JOIN '.SQ_TABLE_RUNNING_PREFIX.'ast_typ_inhd i ON a.type_code = i.type_code)
					JOIN '.SQ_TABLE_RUNNING_PREFIX.'ast_lnk l
					ON l.minorid = a.assetid';
		$count_sql = str_replace('*', 'count(*)', $sql);

		$where = 'l.majorid IN ('.$GLOBALS['SQ_SYSTEM']->db->quote($asset->id).') AND i.inhd_type_code = '.$GLOBALS['SQ_SYSTEM']->db->quote('form_submission').
			' AND a.created BETWEEN '.$GLOBALS['SQ_SYSTEM']->db->quoteSmart($from_value).' AND '.$GLOBALS['SQ_SYSTEM']->db->quoteSmart($to_value);
		$where = $GLOBALS['SQ_SYSTEM']->constructRollbackWhereClause($where, 'a');
		$where = $GLOBALS['SQ_SYSTEM']->constructRollbackWhereClause($where, 'i');
		$where = $GLOBALS['SQ_SYSTEM']->constructRollbackWhereClause($where, 'l');

		// grab the number of assets
		$asset_count = $GLOBALS['SQ_SYSTEM']->db->getOne($count_sql.$where);
		$num_pages = ceil($asset_count / $num_per_page);


		if (($submission_offset % $num_per_page) != 0) {
			$submission_offset = $submission_offset - ($submission_offset % $num_per_page);
		}

		if ($submission_offset < 0) {
			$submission_offset = 0;
		}

		if ($submission_offset >= $asset_count) {
			$submission_offset = ($num_pages - 1) * $num_per_page;
		}

		$sql = $sql.$where.' ORDER BY a.created DESC';
		$sql = $GLOBALS['SQ_SYSTEM']->db->modifyLimitQuery($sql, $submission_offset, $num_per_page);

		if ($asset_count == 0) {
			?><p><i>There are no submissions during the time period specified above</i></p><?php
		} else {
			?>

			<style type="text/css">
				td.sq-form-sub {
					padding-top: 0px;
				}
				.sq-form-sub table.sq-backend-table {
					border-top: 0px;
					margin: 0 8px 8px 8px;
				}
				.sq-form-sub table.sq-backend-table th {
					font-weight: normal;
					text-decoration: italic;
				}
				table.sq-backend-table tr td.sq-form-sub-header {
					background-color: #666;
					color: #fff;
					font-size: 11px;
				}
			</style>
			<table class="sq-backend-table">
			<tr>
			<td class="sq-form-sub-header" colspan="2"><b><?php
				hidden_field($prefix.'_submission_offset', $submission_offset);
				if ($submission_offset > 0) {
					?><a title="Go to the first page of submissions" style="text-decoration: none; color: #fff" href="#" onClick="Javascript: set_hidden_field('<?php echo $prefix ?>_submission_offset', '0'); set_hidden_field('process_form', '0'); submit_form(); return false;"><?php
				} else {
					?><span title="This is the first page; you cannot go any further back" style="color: #333"><?php
				}
				?>
				&lt;&lt;
				<?php
				if ($submission_offset > 0) {
					?></a><?php
				} else {
					?></span><?php
				}
				?> &nbsp; &nbsp; <?php
				if ($submission_offset > 0) {
					?><a title="Go to the previous page of submissions" style="text-decoration: none; color: #fff" href="#" onClick="Javascript: set_hidden_field('<?php echo $prefix ?>_submission_offset', '<?php echo $submission_offset - $num_per_page; ?>'); set_hidden_field('process_form', '0'); submit_form(); return false;"><?php
				} else {
					?><span title="This is the first page; you cannot go any further back" style="color: #333"><?php
				}
				?>
				&lt;
				<?php
				if ($submission_offset > 0) {
					?></a><?php
				} else {
					?></span><?php
				}
				?>
				&nbsp; &nbsp; Page <?php echo round(($submission_offset + $num_per_page) / $num_per_page) ?> of <?php echo ceil($asset_count / $num_per_page); ?> &nbsp; &nbsp;
				<?php
				if (($submission_offset + $num_per_page) < $asset_count) {
					?><a title="Go to the next page of submissions" style="text-decoration: none; color: #fff" href="#" onClick="Javascript: set_hidden_field('<?php echo $prefix ?>_submission_offset', '<?php echo $submission_offset + $num_per_page; ?>'); set_hidden_field('process_form', '0'); submit_form(); return false;"><?php
				} else {
					?><span title="This is the last page; you cannot go any further forward" style="color: #333"><?php
				}
				?>
				&gt;
				<?php
				if (($submission_offset + $num_per_page) < $asset_count) {
					?></a><?php
				} else {
					?></span><?php
				}
				?> &nbsp; &nbsp; <?php
				if (($submission_offset + $num_per_page) < $asset_count) {
					?><a title="Go to the last page of submissions" style="text-decoration: none; color: #fff" href="#" onClick="Javascript: set_hidden_field('<?php echo $prefix ?>_submission_offset', '<?php echo ($num_pages - 1) * $num_per_page; ?>'); set_hidden_field('process_form', '0'); submit_form(); return false;"><?php
				} else {
					?><span title="This is the last page; you cannot go any further forward" style="color: #333"><?php
				}
				?>
				&gt;&gt;
				<?php
				if (($submission_offset + $num_per_page) < $asset_count) {
					?></a><?php
				} else {
					?></span><?php
				}
				?></b>
			</td>
			<td class="sq-form-sub-header" colspan="2" align="right">Displaying submissions <b><?php echo $submission_offset + 1 ?></b> to <b><?php echo min($asset_count, $submission_offset + $num_per_page) ?></b>, out of <b><?php echo $asset_count ?></b> total submissions
			</td>
			</tr>
			<tr>
				<th>
					Asset ID
				</th>
				<th>
					Submission Time
				</th>
				<th>
					User
				</th>
				<th>
					Expand ?
				</th>
			</tr>
			<?php
			// For memory reasons, we are going to fetch this one row at a time
			// because we could be displaying a lot on this page
			$result = $GLOBALS['SQ_SYSTEM']->db->query($sql);
			while ($asset_info = $result->fetchRow()) {
				$assetid = $asset_info['assetid'];

				$sub_asset =& $GLOBALS['SQ_SYSTEM']->am->getAsset($assetid);
				$sub_user = $asset_info['created_userid'];
				$sub_time = date('d M Y H:i:s', strtotime($asset_info['created']));
				$sub_expanded = array_search($assetid, $expand_list) !== false;
				$num_subs++;
				//if ($num_subs <= $submission_offset) continue;
				//if ($num_subs > $submission_offset + $num_per_page) break;
				?>
				<tr<?php
					echo ($sub_expanded) ? ' class="alt"' : '';
				?>>
					<td>
						<?php echo $assetid ?>
					</td>
					<td>
						<?php echo $sub_time ?>
					</td>
					<td>
						<?php
						$valid_user = false;
						if (!empty($sub_user)) {
							$sub_user_asset = &$GLOBALS['SQ_SYSTEM']->am->getAsset($sub_user);
							if (!empty($sub_user_asset)) {
								echo $sub_user_asset->name . ' (Id: #'.$sub_user.')';
								$valid_user = true;
							}
						}
						if (!$valid_user) {
							?><i>No logged in user</i><?php
						}
						?>
					</td>
					<td>
						<input type="checkbox" name="<?php echo $prefix ?>_viewsub[<?php echo $assetid ?>]" value="1" <?php if ($sub_expanded) echo ' checked="checked"' ?>>
					</td>
				</tr>
				<?php
				// display only if expanded
				if ($sub_expanded) {
					?>
					<tr>
						<td colspan="5" class="sq-form-sub">
							<table class="sq-backend-table">
								<tr>
									<?php
									$i = 0;
									$elements =& $sub_asset->getSummary();
									if (count($elements) % 2 != 0) {
										$elements[] = Array('name' => '', 'answer' => '');
									}
									foreach ($elements as $element) {
										$i++;
										?>
										<th><?php echo $element['name'] ?>:</th>
										<td><?php echo $element['answer'] ?></td>
										<?php
										if (($i < count($elements)) && ($i % 2 == 0)) {
											?>
								</tr>
								<tr>
											<?php
										}
									}//end foreach elemnent
									?>
								</tr>
							</table>
						</td>
					</tr>
					<?php
				}//end if expanded
			}//end foreach submission
			?>
			</table>
		<?php
		}

	}//end paintSubmissions()


	/**
	* Processes the submissions block (nothing to process!)
	*
	* @param object Form_Email			&$asset	the asset whose interface we are painting
	* @param object	Backend_Outputter	&$o		the outputter class
	* @param string						$prefix	prefix for the form elements
	*
	* @return boolean
	* @access public
	*/
	function processSubmissions(&$asset, &$o, $prefix)
	{
		return false;

	}//end processSubmissions()


	/**
	* Paints the export block
	*
	* @param object Form_Email			&$asset	the asset whose interface we are painting
	* @param object	Backend_Outputter	&$o		the outputter class
	* @param string						$prefix	prefix for the form elements
	*
	* @return boolean
	* @access public
	*/
	function paintExport(&$asset, &$o, $prefix)
	{
		if (!$asset->writeAccess('attributes')) return false;

		$parameters = Array(
						'min'			=> '2003-01-01 00:00:00',
						'max'			=> ts_iso8601(time()),
						'allow_circa'	=> '0',
						'show'			=> Array('y', 'm', 'd'),
						'null'			=> Array(),
						'style'			=> Array(
											'y'	=> 's',
											'm'	=> 's',
											'd'	=> 's',
										   ),
					  );

		$parameters['print_format'] = 'j M Y';

		$from_value = isset($_POST[$prefix.'_export_fromvalue']) ? ts_iso8601(mktime(0,0,0,$_POST[$prefix.'_export_fromvalue']['m'],$_POST[$prefix.'_export_fromvalue']['d'],$_POST[$prefix.'_export_fromvalue']['y'])) : date('Y-m-d', time()-7*86400).' --:--:--';
		$to_value = isset($_POST[$prefix.'_export_tovalue']) ? ts_iso8601(mktime(0,0,0,$_POST[$prefix.'_export_tovalue']['m'],$_POST[$prefix.'_export_tovalue']['d'],$_POST[$prefix.'_export_tovalue']['y'])) : date('Y-m-d').' --:--:--';

		$from = new Datetime_Field($prefix.'_export_from', $from_value, $parameters);
		$to = new Datetime_Field($prefix.'_export_to', $to_value, $parameters);

		$from->printField();
		echo ' to ';
		$to->printField();

		$o->closeField();

		$o->openField('Format');

		$options = Array(
					''			=> '------- Please Select -------',
					'csv'		=> 'Character Delimited List',
					'csv_nhr'	=> 'Character Delimited List - No Header Row',
					'xml'		=> 'XML Format',
				   );

		echo combo_box($prefix.'_export_format', $options, false, '');
		echo hidden_field($prefix.'_export_switch', '0');

		$delimiter_text = isset($_POST[$prefix.'_delimiter']) ? $_POST[$prefix.'_delimiter'] : ',';
		echo ' &nbsp; Delimiter &nbsp;';
		echo text_box($prefix.'_delimiter',$delimiter_text,1,1,true);

		$o->closeField();

		// explanation for onClick for the Download button, there is some trickery involved here >:)
		// - set export switch to 1 = "ON"
		// - submit form (automatically sets SQ_FORM_SUBMITTED) - we're still here though, as the
		//   browser will be sent through the CSV/XML file and it will be offered to save - not display
		//   (DEPENDS on browser - CSV should be offered to save, XML could be intercepted by browser!)
		// - unset SQ_FORM_SUBMITTED so the form can still be submitted via Commit
		// - set export switch to 0 = "OFF" so Commit doesn't try to save a file either
		// - return true for the event as per JS standard

		$o->openField('Download');

		echo normal_button($prefix.'_export', 'Download File', 'this.form.'.$prefix.'_export_switch.value = 1; this.form.submit(); SQ_FORM_SUBMITTED = false; this.form.'.$prefix.'_export_switch.value = 0; return true;');

		return true;

	}//end paintExport()


	/**
	* Processes the export block
	*
	* This function will pass off the work to processExportCSV() or processExportXML(), as appropriate.
	* If we aren't downloading a file, this function will silently return a success.
	*
	* @param object Form_Email			&$asset	the asset whose interface we are painting
	* @param object	Backend_Outputter	&$o		the outputter class
	* @param string						$prefix	prefix for the form elements
	*
	* @return boolean
	* @access public
	*/
	function processExport(&$asset, &$o, $prefix)
	{
		if (!$_POST[$prefix.'_export_switch']) return true;

		$export_delimiter = isset($_POST[$prefix.'_delimiter']) ? $_POST[$prefix.'_delimiter'] : '';

		$export_type = isset($_POST[$prefix.'_export_format']) ? $_POST[$prefix.'_export_format'] : '';

		switch ($export_type) {

			case 'csv':
				$this->processExportCSV($asset, $o, $prefix, true, $export_delimiter);
			break;

			case 'csv_nhr':
				$this->processExportCSV($asset, $o, $prefix, false, $export_delimiter);
			break;

			case 'xml':
				$this->processExportXML($asset, $o, $prefix);
			break;
		}

		return true;

	}//end processExport()


	/**
	* Exports chosen submissions to a comma separated value (CSV) file
	*
	* Will only perform export for the date range which was
	* selected in the Export block.
	*
	* @param object Form_Email			&$asset		the asset whose interface we are painting
	* @param object	Backend_Outputter	&$o			the outputter class
	* @param string						$prefix		prefix for the form elements
	* @param boolean					$header_row whether the header row is filled in
	*
	* @return boolean
	* @access public
	*/
	function processExportCSV(&$asset, &$o, $prefix, $header_row=true, $delimiter=',')
	{
		require_once SQ_FUDGE_PATH.'/csv/csv.inc';
		$csv = new CSV();
		$csv->setFilename('submission_log.csv');
		$csv->setDeliminator($delimiter);

		// get the from and to values
		$from_value = isset($_POST[$prefix.'_export_fromvalue']) ? ts_iso8601(mktime(0,0,0,$_POST[$prefix.'_export_fromvalue']['m'],$_POST[$prefix.'_export_fromvalue']['d'],$_POST[$prefix.'_export_fromvalue']['y'])) : '---------- --:--:--';
		$to_value = isset($_POST[$prefix.'_export_tovalue']) ? ts_iso8601(mktime(0,0,0,$_POST[$prefix.'_export_tovalue']['m'],$_POST[$prefix.'_export_tovalue']['d'],$_POST[$prefix.'_export_tovalue']['y'])) : '---------- --:--:--';

		$from_value = explode('-',iso8601_date_component($from_value));
		$to_value = explode('-',iso8601_date_component($to_value));

		// convert the ISO times to time stamps but manually because we can't be sure
		// about the h:m:s section of the above times
		$from_ts = mktime(0,0,0,$from_value[1],$from_value[2],$from_value[0]);
		$to_ts   = mktime(23,59,59,$to_value[1],$to_value[2],$to_value[0]);

		$logs = Array();
		$headers = Array('__time__' => 'Submission Time', '__user__' => 'User Submitting Form');

		$sql = 'SELECT
					*
				FROM
					('.SQ_TABLE_RUNNING_PREFIX.'ast a JOIN '.SQ_TABLE_RUNNING_PREFIX.'ast_typ_inhd i ON a.type_code = i.type_code)
					JOIN '.SQ_TABLE_RUNNING_PREFIX.'ast_lnk l
					ON l.minorid = a.assetid';

		$where = 'l.majorid IN ('.$GLOBALS['SQ_SYSTEM']->db->quote($asset->id).') AND i.inhd_type_code = '.$GLOBALS['SQ_SYSTEM']->db->quote('form_submission').
			' AND a.created BETWEEN '.$GLOBALS['SQ_SYSTEM']->db->quoteSmart(ts_iso8601($from_ts)).' AND '.$GLOBALS['SQ_SYSTEM']->db->quoteSmart(ts_iso8601($to_ts));
		$where = $GLOBALS['SQ_SYSTEM']->constructRollbackWhereClause($where, 'a');
		$where = $GLOBALS['SQ_SYSTEM']->constructRollbackWhereClause($where, 'i');
		$where = $GLOBALS['SQ_SYSTEM']->constructRollbackWhereClause($where, 'l');

		// Going to fetch this one row at a time for memory reasons, because this
		// could potentially be a very big download
		$result = $GLOBALS['SQ_SYSTEM']->db->query($sql.$where);
		while ($asset_info = $result->fetchRow()) {
			$assetid = $asset_info['assetid'];
			$type_code = $asset_info['type_code'];
			$create_time = strtotime($asset_info['created']);

			$sub_asset =& $GLOBALS['SQ_SYSTEM']->am->getAsset($assetid, $type_code);
			if (!$sub_asset->attr('complete')) continue;
			$summary = $sub_asset->getSummary();

			$logs[$assetid] = Array(
								'__time__'	=> date('Y-m-d H:i:s', $create_time),
								'__user__'	=> $asset_info['created_userid'],
							  );
			if (empty($summary)) $summary = Array();
			foreach ($summary as $id => $element) {
				if (!isset($headers[$id])) {
					$headers[$id] = $element['name'];
				}

				$logs[$assetid][$id] = $element['answer'];
			}
		}

		if ($header_row) {
			$csv->setFieldHeaders($headers);
		}
		$csv->setValues($logs);

		// export with keyed fields
		$csv->export(true);
		exit(0);

		return true;

	}//end processExportCSV()


	/**
	* Exports chosen submissions to an XML format
	*
	* XML format is the same format used to store the submission logs, with an overarching
	* "submissions" root tag around it. Will only perform export for the date range which was
	* selected in the Export block.
	*
	* @param object Form_Email			&$asset	the asset whose interface we are painting
	* @param object	Backend_Outputter	&$o		the outputter class
	* @param string						$prefix	prefix for the form elements
	*
	* @return boolean
	* @access public
	*/
	function processExportXML(&$asset, &$o, $prefix)
	{
		header('Content-Type: application/xml');

		// defining the file as attachment forces most browsers to offer it for download
		header('Content-Disposition: attachment; filename=submission_log.xml;');

		// get the from and to values
		$from_value = isset($_POST[$prefix.'_export_fromvalue']) ? ts_iso8601(mktime(0,0,0,$_POST[$prefix.'_export_fromvalue']['m'],$_POST[$prefix.'_export_fromvalue']['d'],$_POST[$prefix.'_export_fromvalue']['y'])) : '---------- --:--:--';
		$to_value = isset($_POST[$prefix.'_export_tovalue']) ? ts_iso8601(mktime(0,0,0,$_POST[$prefix.'_export_tovalue']['m'],$_POST[$prefix.'_export_tovalue']['d'],$_POST[$prefix.'_export_tovalue']['y'])) : '---------- --:--:--';

		$from_value = explode('-',iso8601_date_component($from_value));
		$to_value = explode('-',iso8601_date_component($to_value));

		// convert the ISO times to time stamps but manually because we can't be sure
		// about the h:m:s section of the above times
		$from_ts = mktime(0,0,0,$from_value[1],$from_value[2],$from_value[0]);
		$to_ts   = mktime(23,59,59,$to_value[1],$to_value[2],$to_value[0]);

		$logs = Array();
		$headers = Array('__time__' => 'Submission Time', '__user__' => 'User Submitting Form');

		echo '<submissions>';

		$sql = 'SELECT
					*
				FROM
					('.SQ_TABLE_RUNNING_PREFIX.'ast a JOIN '.SQ_TABLE_RUNNING_PREFIX.'ast_typ_inhd i ON a.type_code = i.type_code)
					JOIN '.SQ_TABLE_RUNNING_PREFIX.'ast_lnk l
					ON l.minorid = a.assetid';

		$where = 'l.majorid IN ('.$GLOBALS['SQ_SYSTEM']->db->quote($asset->id).') AND i.inhd_type_code = '.$GLOBALS['SQ_SYSTEM']->db->quote('form_submission').
			' AND a.created BETWEEN '.$GLOBALS['SQ_SYSTEM']->db->quoteSmart(ts_iso8601($from_ts)).' AND '.$GLOBALS['SQ_SYSTEM']->db->quoteSmart(ts_iso8601($to_ts));
		$where = $GLOBALS['SQ_SYSTEM']->constructRollbackWhereClause($where, 'a');
		$where = $GLOBALS['SQ_SYSTEM']->constructRollbackWhereClause($where, 'i');
		$where = $GLOBALS['SQ_SYSTEM']->constructRollbackWhereClause($where, 'l');

		// Going to fetch this one row at a time for memory reasons, because this
		// could potentially be a very big download
		$result = $GLOBALS['SQ_SYSTEM']->db->query($sql.$where);
		while ($asset_info = $result->fetchRow()) {
			$assetid = $asset_info['assetid'];
			$type_code = $asset_info['type_code'];
			$create_time = strtotime($asset_info['created']);

			$sub_asset =& $GLOBALS['SQ_SYSTEM']->am->getAsset($assetid, $type_code);
			if (!$sub_asset->attr('complete')) continue;
			if (trim($sub_asset->attr('xml')) == '') continue;
			echo $sub_asset->attr('xml');
		}

		echo '</submissions>';
		exit(0);

		return true;

	}//end processExportXML()


	/**
	* Returns a list of name-value pairs for a submission result
	*
	* @param object XML_Tree_Node &$tree_root the XML node that we are going to process
	*
	* @return array with each element containing indices ('name', 'id', 'content')
	* @access private
	*/
	function &_generateSubmissionList(&$tree_root)
	{
		$children = Array();

		$kids =& $tree_root->children;

		for (reset($kids); null !== ($k = key($kids)); next($kids)) {
			$this_child =& $kids[$k];
			$child_id =& $this_child->getAttribute('id');
			$child_name =& $this_child->getAttribute('name');
			switch ($this_child->name) {
				case 'section':
				break;

				case 'text_q':
					$child_value = $this_child->content;
				break;

				case 'datetime_q':
					$child_value = date('d M Y H:i:s',	iso8601_ts($this_child->content));
					$circa =& $this_child->getAttribute('circa');
					if ($circa) $child_value = 'circa '.$child_value;
				break;

				case 'select_q':
					$select_options =& $this_child->children;
					$child_value = Array();		// store child as an array

					for (reset($select_options); null !== ($k = key($select_options)); 	next($select_options)) {
						$this_option =& $select_options[$k];
						$child_value[] = $this_option->content;
					}
					$child_value = implode(', ', $child_value);
				break;
			}

			if ($this_child->name != 'section') {
				$children[] = Array('id' => $child_id, 'name' => $child_name, 'content' => $child_value);
			}
		}

		return $children;

	}//end _generateSubmissionList()


//--        RECEIPT FIELD        --//


	/**
	* Paints the interface for selecting a field containing send to a friend entries
	*
	* @param object Form_Email			&$asset		the form involved
	* @param object Backend_Outputter	&$o			the backend outputter
	* @param string						$prefix		a unique prefix for variables
	*
	* @return boolean
	* @access public
	*/
	function paintReceiptField(&$asset, &$o, $prefix)
	{
		if (!$asset->writeAccess('attributes')) return false;
		$assetid = $asset->attr('receipt_field');
		asset_finder($prefix.'_rec_field', $assetid, Array('form_question_type_email_address' => 'I'));

		return true;

	}//end paintReceiptField()


	/**
	* Processes the interface for selecting a field containing a receipt email
	*
	* @param object Form_Email			&$asset		the form involved
	* @param object Backend_Outputter	&$o			the backend outputter
	* @param string						$prefix		a unique prefix for variables
	*
	* @return boolean
	* @access public
	*/
	function processReceiptField(&$asset, &$o, $prefix)
	{
		if (!isset($_POST[$prefix.'_rec_field'])) return false;
		$assetid = $_POST[$prefix.'_rec_field']['assetid'];

		// add check that this is in the same form

		// if we already have this as the not found asset, don't set it again
		if ($assetid == $asset->attr('receipt_field')) return false;
		if (!$asset->setAttrValue('receipt_field', $assetid)) return false;

		return true;

	}//end processReceiptField()


//--        SEND TO A FRIEND        --//


	/**
	* Paints the interface for selecting a field containing send to a friend entries
	*
	* @param object Form_Email			&$asset		the form involved
	* @param object Backend_Outputter	&$o			the backend outputter
	* @param string						$prefix		a unique prefix for variables
	*
	* @return boolean
	* @access public
	*/
	function paintSTAFField(&$asset, &$o, $prefix)
	{
		if (!$asset->writeAccess('attributes')) return false;
		$assetid = $asset->attr('staf_field');
		asset_finder($prefix.'_staf_field', $assetid, Array('form_question_type_text' => 'D'));

		return true;

	}//end paintSTAFField()


	/**
	* Processes the interface for selecting a field containing send to a friend entries
	*
	* @param object Form_Email			&$asset		the form involved
	* @param object Backend_Outputter	&$o			the backend outputter
	* @param string						$prefix		a unique prefix for variables
	*
	* @return boolean
	* @access public
	*/
	function processSTAFField(&$asset, &$o, $prefix)
	{
		if (!isset($_POST[$prefix.'_staf_field'])) return false;
		$assetid = $_POST[$prefix.'_staf_field']['assetid'];

		// todo: add check that this is in the same form

		// if we already have this as the not found asset, don't set it again
		if ($assetid == $asset->attr('staf_field')) return false;
		if (!$asset->setAttrValue('staf_field', $assetid)) return false;

		return true;

	}//end processSTAFField()


//--        SELECTIVE E-MAILS        --//


	/**
	* Paints the interface for creating a new Selective Email rule
	*
	* @param object Form_Email			&$asset		the asset whose interface we are painting
	* @param object	Backend_Outputter	&$o			the outputter class
	* @param string						$prefix		prefix for the form elements
	*
	* @return boolean
	* @access public
	*/
	function paintAddSelectiveEmailRule(&$asset, &$o, $prefix)
	{
		if (!$asset->writeAccess('attributes')) return false;
		check_box($prefix.'_new_se_rule', '1', false);
		echo ' New Rule';

		return true;

	}//end paintAddSelectiveEmailRule()


	/**
	* Processes the interface for creating a new, blank Selective Email rule
	*
	* @param object Form_Email			&$asset		the asset whose interface we are painting
	* @param object	Backend_Outputter	&$o			the outputter class
	* @param string						$prefix		prefix for the form elements
	*
	* @return boolean
	* @access public
	*/
	function processAddSelectiveEmailRule(&$asset, &$o, $prefix)
	{
		if (!isset($_REQUEST[$prefix.'_new_se_rule'])) return false;
		$all_se = $asset->attr('selective_emails');

		// pull out a new index for this question
		if (empty($all_se)) {
			$new_id = 0;
		} else {
			$new_id = max(array_keys($all_se)) + 1;
		}

		// fill out the defaults
		$all_se[$new_id] = Array(
							'assetid'	=> '',
							'rules'		=> Array(),
							'require'	=> 'all',
							'send'		=> 'recipient',
							'address'	=> '',
						   );

		// set the post/request variables so the later functions know to show the new rule
		$_REQUEST[$prefix.'_se_active_ruleid'] = $new_id;

		$_POST[$prefix.'_require']	 = 'all';
		$_POST[$prefix.'_send']		 = 'recipient';
		$_POST[$prefix.'_address']	 = '';

		if (!$asset->setAttrValue('selective_emails', $all_se)) return false;
		return $asset->saveAttributes();

	}//end processAddSelectiveEmailRule()


	/**
	* paint the current rules
	*
	* @param object Form_Section		&$asset		the asset whose interface we are painting
	* @param object	Backend_Outputter	&$o			the outputter class
	* @param string						$prefix		prefix for the form elements
	*
	* @return boolean
	* @access public
	*/
	function paintCurrentSelectiveEmails(&$asset, &$o, $prefix)
	{
		$admin_access = $asset->adminAccess('attributes');

		$am = &$GLOBALS['SQ_SYSTEM']->am;

		$ruleid = isset($_REQUEST[$prefix.'_se_active_ruleid']) ? $_REQUEST[$prefix.'_se_active_ruleid'] : -1;

		if (isset($_REQUEST[$prefix.'_se_active_ruleid'])) {
			$o->addHiddenField($prefix.'_se_active_ruleid', $_REQUEST[$prefix.'_se_active_ruleid']);
		}

		$all_se = $asset->attr('selective_emails');

		if (empty($all_se)) {
			echo 'There are no Selective Email rules yet set up for this form';
			return false;
		}

		?>
		<table class="sq-backend-table">
			<tr>
				<?php
				if ($admin_access) {
					?><td align="center" width="30" class="sq-backend-table-header" style="font-weight: bold;">Edit</td><?php
				}
				?><td class="sq-backend-table-header">
					Rule
				</td>
				<td align="center" width="50" class="sq-backend-table-header" style="font-weight: bold;">Valid ?</td>
				<?php
				if ($admin_access) {
					?><td align="center" width="70" class="sq-backend-table-header" style="font-weight: bold;">Delete ?</td>
				<?php
				}
				?>
			</tr>
		<?php
		for (reset($all_se); null !== ($k = key($all_se)); next($all_se)) {
			$info = &$all_se[$k];
			$rule_prefix = $prefix.'_r'.$k;
			$valid = true;
			?>
			<tr>
				<?php
				if ($admin_access) {
					?>
					<td valign="top" align="center" width="30" class="sq-backend-table-cell<?php if ($ruleid == $k) echo '-alt' ?>"><a href="<?php echo $o->getCurrentLocation(); ?>&<?php echo $prefix?>_se_active_ruleid=<?php echo $k ?>"><img src="<?php echo sq_web_path('lib'); ?>/web/images/icons/edit_mode.png" width="15" height="15" border="0" /></a></td>
					<?php
				}
				?>
				<td valign="top" class="sq-backend-table-cell<?php if ($ruleid == $k) echo '-alt' ?>">
					<?php
					if (empty($info['rules'])) {
						?>
						<span><b>WARNING:</b> This rule contains no parts</span><br/>
						<?php
						$valid = false;
					} else {
						$rules = $info['rules'];
						$rule_logic = ($info['require'] == 'all') ? 'AND' : 'OR';
						$descriptions = Array();
						$deleted_q = false;

						$i = 0;
						for (reset($rules); null !== ($rule_key = key($rules)); next($rules)) {
							$rule =& $rules[$rule_key];
							$type_code = 'form_question_rule_type_'.$rule['name'];
							$q_asset =& $am->getAsset($rule['assetid']);

							// deleted question = invalid rule!
							if (!$q_asset) {
								$deleted_q = true;
								$valid = false;
								break;
							}

							$GLOBALS['SQ_SYSTEM']->am->includeAsset($type_code);
							$rule_asset = new $type_code();
							$descriptions[] = $rule_asset->ruleDescription($q_asset, $rule);

							$i++;
						}//end for

						if ($deleted_q) {
							?><b>WARNING:</b> This Selective Email rule is invalid because it refers to deleted questions<?php
						} else {
							echo implode('<br/><b>'.$rule_logic.'</b>', $descriptions);
						}
						echo '<br/>';

					}//end if rules not empty

					echo 'Send a <b>';
					if ($info['send'] == 'staf') {
						echo 'Send To A Friend';
					} else if ($info['send'] == 'recipient') {
						echo 'Recipient';
					} else if ($info['send'] == 'receipt') {
						echo 'Receipt';
					} else {
						echo 'Unknown E-mail Type';
						$valid = false;
					}

					echo '</b> email to <b>';
					if (empty($info['address'])) {
						$valid = false;
						echo 'No Email Address Specified';
					} else {
						echo $info['address'];
					}
					echo '</b>';
					?>
				</td>
				<td valign="top" align="center" width="70" class="sq-backend-table-cell<?php if ($ruleid == $k) echo '-alt' ?>"><img src="<?php echo sq_web_path('lib'); ?>/web/images/<?php echo $valid ? 'tick' : 'cross'; ?>.gif" width="15" height="15" /></td>
				<?php
				if ($admin_access) {
					?><td valign="top"  align="center" width="50" class="sq-backend-table-cell<?php if ($ruleid == $k) echo '-alt' ?>"><?php check_box($prefix.'_deletes[]', $k); ?></td><?php
				}
				?>
			</tr>
			<?php
		}//end for all selective emails
		?>
		</table>
		<?php

		return true;

	}//end paintCurrentSelectiveEmails()


	/**
	* Processes the interface for deleting current selective email rules
	*
	* @param object Form_Email			&$asset		the asset whose interface we are painting
	* @param object	Backend_Outputter	&$o			the outputter class
	* @param string						$prefix		prefix for the form elements
	*
	* @return boolean
	* @access public
	*/
	function processCurrentSelectiveEmails(&$asset, &$o, $prefix)
	{
		if (!isset($_POST[$prefix.'_deletes'])) return true;

		$all_se = $asset->attr('selective_emails');
		$delete_ruleids = $_POST[$prefix.'_deletes'];

		// delete our selective e-mail rules
		foreach ($delete_ruleids as $ruleid) {
			unset($all_se[$ruleid]);
			if (!empty($_REQUEST[$prefix.'_se_active_ruleid'])) {
				if ($ruleid == $_REQUEST[$prefix.'_se_active_ruleid']) {
					unset($_REQUEST[$prefix.'_se_active_ruleid']);
				}
			}
		}

		$asset->setAttrValue('selective_emails', $all_se);
		return $asset->saveAttributes();

	}//end processCurrentSelectiveEmails()


	/**
	* Processes the interface for selecting a question for a rule part
	*
	* @param object Form_Email			&$asset		the asset whose interface we are painting
	* @param object	Backend_Outputter	&$o			the outputter class
	* @param string						$prefix		prefix for the form elements
	*
	* @return boolean
	* @access public
	*/
	function paintActiveQuestion(&$asset, &$o, $prefix)
	{
		if (!$asset->writeAccess('attributes')) return false;

		if (isset($_REQUEST[$prefix.'_se_active_ruleid'])) {
			$current_assetid = isset($_POST[$prefix.'_se_new_qid']['assetid']) ? $_POST[$prefix.'_se_new_qid']['assetid'] : 0;
			asset_finder($prefix.'_se_new_qid', $current_assetid, Array('form_question' => 'D'));
			return true;
		} else {
			return false;
		}

	}//end paintActiveQuestion()


	/**
	* Processes the interface for selecting active question (no implementation required)
	*
	* @param object Form_Email			&$asset		the asset whose interface we are painting
	* @param object	Backend_Outputter	&$o			the outputter class
	* @param string						$prefix		prefix for the form elements
	*
	* @return boolean
	* @access public
	*/
	function processActiveQuestion(&$asset, &$o, $prefix)
	{
		return true;

	}//end processActiveQuestion()


	/**
	* Paint the dropdowns to add rule parts to a Selective Email rule
	*
	* @param object Form_Section		&$asset		the asset whose interface we are painting
	* @param object	Backend_Outputter	&$o			the outputter class
	* @param string						$prefix		prefix for the form elements
	*
	* @return boolean
	* @access public
	*/
	function paintAddRulePart(&$asset, &$o, $prefix)
	{
		if (!$asset->adminAccess('attributes')) return false;
		if (!isset($_REQUEST[$prefix.'_se_active_ruleid'])) return false;

		// we cleared the asset finder for adding a new rule part
		if (isset($_POST[$prefix.'_se_new_qid']) && $_POST[$prefix.'_se_new_qid']['assetid'] == 0) {
			unset($_POST[$prefix.'_se_new_qid']['assetid']);
		}

		if (!isset($_POST[$prefix.'_se_new_qid']['assetid'])) {
			echo 'You must select a question before you can select the type of rule part';
			return false;
		} else {
			$active_question = &$GLOBALS['SQ_SYSTEM']->am->getAsset($_POST[$prefix.'_se_new_qid']['assetid']);

			$rule_codes = $active_question->getAllowedRules();
			$type_codes = Array();
			foreach ($rule_codes as $rule_code) {
				$type_code = 'form_question_rule_type_'.$rule_code;
				$GLOBALS['SQ_SYSTEM']->am->includeAsset($type_code);
				$se_rule = eval('return '.$type_code.'::isSelectiveEmailRule();');
				if ($se_rule) $type_codes[] = $type_code;
			}

			$desc = $GLOBALS['SQ_SYSTEM']->am->getTypeInfo($type_codes, 'description');
			combo_box($prefix.'_new_rule', array_merge(Array(' ' => '------ Please Select ------'), $desc), false, '');

			return true;
		}

	}//end paintAddRulePart()


	/**
	* Process the interface for adding a rule part to a Selective Email rule
	*
	* @param object Form_Section		&$asset	the asset whose interface we are painting
	* @param object	Backend_Outputter	&$o		the outputter class
	* @param string						$prefix	prefix for the form elements
	*
	* @return boolean
	* @access public
	*/
	function processAddRulePart(&$asset, &$o, $prefix)
	{
		if (!$asset->adminAccess('attributes')) return false;

		// rule id is not set || required "new rule part" fields not set = FAIL
		if (!isset($_REQUEST[$prefix.'_se_active_ruleid']) ||
			!isset($_REQUEST[$prefix.'_new_rule']) || empty($_POST[$prefix.'_se_new_qid']['assetid'])) {
			return false;

		} else {
			$ruleid = $_REQUEST[$prefix.'_se_active_ruleid'];
			$qid = $_POST[$prefix.'_se_new_qid']['assetid'];
			$active_question = &$GLOBALS['SQ_SYSTEM']->am->getAsset($qid);

			$type_code = $_POST[$prefix.'_new_rule'];
			$rule_code = substr($type_code,24);
			if (!trim($rule_code)) return false;

			$all_se = $asset->attr('selective_emails');

			$rules =& $all_se[$ruleid]['rules'];

			$GLOBALS['SQ_SYSTEM']->am->includeAsset($type_code);
			$operators = array_keys(eval('return '.$type_code.'::getOperators();'));

			$rules[] = Array(
						'assetid'					=> $qid,
						'name'						=> $rule_code,
						'operator'					=> $operators[0],
						'value'						=> '',
						'comparison_question_id'	=> 0,
					   );


			$asset->setAttrValue('selective_emails', $all_se);
			return $asset->saveAttributes();
		}

	}//end processAddRulePart()


	/**
	* Paints the interface for editing and deleting Rule Parts
	*
	* @param object Form_Email			&$asset		the asset whose interface we are painting
	* @param object	Backend_Outputter	&$o			the outputter class
	* @param string						$prefix		prefix for the form elements
	*
	* @return boolean
	* @access public
	*/
	function paintRuleParts(&$asset, &$o, $prefix)
	{
		if (!$asset->writeAccess('attributes')) {
			$o->openField('Note');
			echo 'Unlock the form to select an active Selective Email rule';
			$o->closeField();
			return false;
		}

		if (!isset($_REQUEST[$prefix.'_se_active_ruleid'])) {
			$o->openField('Note');
			echo 'Select an active Selective Email rule to edit it';
			$o->closeField();
			return false;
		}

		$ruleid = $_REQUEST[$prefix.'_se_active_ruleid'];

		$write_access = $asset->writeAccess('attributes');

		$am		=& $GLOBALS['SQ_SYSTEM']->am;
		$all_se	=& $asset->attr('selective_emails');
		$rules  =& $all_se[$ruleid]['rules'];
		$descs  =  Array();

		if (empty($rules)) {
			$o->openField('Note');
			echo 'This Selective Email rule is empty';
			$o->closeField();
			return false;
		}

		for (reset($rules); null !== ($k = key($rules)); next($rules)) {
			$rule = &$rules[$k];
			// let the rule paint itself here!!
			$type_code = 'form_question_rule_type_'.$rule['name'];
			$GLOBALS['SQ_SYSTEM']->am->includeAsset($type_code);
			$rule_asset = new $type_code();
			$edit_fns = $rule_asset->getEditFns();

			if (!isset($descs[$type_code])) {
				$asset_info = $GLOBALS['SQ_SYSTEM']->am->getTypeInfo(Array($type_code), 'description');
				$descs[$type_code] = $asset_info[$type_code];
			}

			$o->openSection($descs[$type_code]);

			$o->openField('Applies To');
				$q_asset =& $GLOBALS['SQ_SYSTEM']->am->getAsset($rule['assetid']);
				if ($q_asset) {
					echo $q_asset->attr('name').' (Id: #'.$q_asset->id.')';
				} else {
					?><i class="sq-backend-warning">The question that this rule part applied to (Id: #<?php echo $rule['assetid'] ?>) has been deleted; you cannot edit this rule. It is recommended that you delete it</i><?php
				}
			$o->closeField();

			$edit_fns->paintRule($rule_asset, $o, $prefix.'_rule_'.$k, $rule, $write_access, $q_asset);

			if ($write_access) {
				$o->openField('Delete ?');
				check_box($prefix.'_rule_'.$k.'[delete]');
				$o->closeField();
			}

			$o->closeSection();

		}//end for all rules

		return $write_access;

	}//end paintRuleParts()


	/**
	* Processes the interface for editing and deleting Rule Parts
	*
	* @param object Form_Section		&$asset		the asset whose interface we are painting
	* @param object	Backend_Outputter	&$o			the outputter class
	* @param string						$prefix		prefix for the form elements
	*
	* @return boolean
	* @access public
	*/
	function processRuleParts(&$asset, &$o, $prefix)
	{
		$all_se = $asset->attr('selective_emails');
		if (!isset($_REQUEST[$prefix.'_se_active_ruleid'])) return false;

		$ruleid = $_REQUEST[$prefix.'_se_active_ruleid'];
		if (!isset($all_se[$ruleid])) return false;

		$rules =& $all_se[$ruleid]['rules'];

		$prefix = $asset->getPrefix();

		// delete rules first
		if (empty($rules)) $rules = Array();
		foreach (array_keys($rules) as $k) {
			$rule_prefix = $prefix.'_rule_'.$k;
			if (!isset($_POST[$rule_prefix])) {
				continue;
			}
			if (array_get_index($_POST[$rule_prefix], 'delete', 0)) {
				unset($rules[$k]);
			}
		}

		// modify what's left
		for (reset($rules); null !== ($k = key($rules)); next($rules)) {
			$rule = &$rules[$k];
			// let the rule paint itself here!!
			$type_code = 'form_question_rule_type_'.$rule['name'];
			$GLOBALS['SQ_SYSTEM']->am->includeAsset($type_code);
			$rule_asset = new $type_code();
			$edit_fns = $rule_asset->getEditFns();

			$edit_fns->processRule($rule_asset, $o, $prefix.'_rule_'.$k, $rule);
		}

		$asset->setAttrValue('selective_emails', $all_se);
		return $asset->saveAttributes();

	}//end processRuleParts()


	/**
	* Paint the dropdowns etc for the rule logic
	*
	* "When <all|any> rule parts are matched, send an <email type> email to <email address>
	*
	* @param object Form_Section		&$asset		the asset whose interface we are painting
	* @param object	Backend_Outputter	&$o			the outputter class
	* @param string						$prefix		prefix for the form elements
	*
	* @return boolean false if no questions in this section, true otherwise
	* @access public
	*/
	function paintActiveSend(&$asset, &$o, $prefix)
	{
		if (!$asset->adminAccess('attributes')) return false;
		if (!isset($_REQUEST[$prefix.'_se_active_ruleid'])) return false;

		$ruleid = $_REQUEST[$prefix.'_se_active_ruleid'];
		$all_se = $asset->attr('selective_emails');

		echo 'When ';
		combo_box($prefix.'_require', Array('all' => 'ALL', 'any' => 'ANY'), false, Array($all_se[$ruleid]['require']));
		echo ' rule parts are matched,<br/>send a ';
		combo_box($prefix.'_send', Array('recipient' => 'Recipient E-mail', 'receipt' => 'Receipt', 'staf' => 'Send To A Friend E-mail'), false, Array($all_se[$ruleid]['send']));
		echo ' to ';
		text_box($prefix.'_address', $all_se[$ruleid]['address'], 30, 255);

		return true;

	}//end paintActiveSend()


	/**
	* Process the newly added questions
	*
	* @param object Form_Section		&$asset	the asset whose interface we are painting
	* @param object	Backend_Outputter	&$o		the outputter class
	* @param string						$prefix	prefix for the form elements
	*
	* @return boolean
	* @access public
	*/
	function processActiveSend(&$asset, &$o, $prefix)
	{
		if (!$asset->adminAccess('attributes')) return false;
		if (!isset($_REQUEST[$prefix.'_se_active_ruleid']) || !isset($_POST[$prefix.'_address'])) return false;

		$ruleid = $_REQUEST[$prefix.'_se_active_ruleid'];
		$all_se = $asset->attr('selective_emails');

		$all_se[$ruleid]['require'] = $_POST[$prefix.'_require'];
		$all_se[$ruleid]['send']    = $_POST[$prefix.'_send'];
		$all_se[$ruleid]['address'] = $_POST[$prefix.'_address'];

		$asset->setAttrValue('selective_emails', $all_se);
		return $asset->saveAttributes();

	}//end processActiveSend()


	/**
	* Paint a note giving instructions for complex formatting
	*
	* @param object Form				&$asset	the asset whose interface we are painting
	* @param object	Backend_Outputter	&$o		the outputter class
	* @param string						$prefix	prefix for the form elements
	*
	* @return boolean
	* @access public
	*/
	function paintKeywordReplacementText(&$asset, &$o, $prefix)
	{
		?>
		<p>In addition to the simple formatting options shown underneath each email, you can use the same keyword replacements as is available for the Thank You bodycopy. Click here for a <a href="#" onClick="javascript: var win = window.open('<?php echo sq_web_path('data')?>/asset_types/form/popups/thank_you_keywords.php?assetid=<?php echo $asset->id ?>', 'keywords', 'toolbar=0,menubar=0,location=0,status=0,scrollbars=1,resizable=1,width=580,height=520')">list of keywords available for use in emails</a>.<br/></p>

		<?php
		return true;

	}//end paintKeywordReplacementText()


	/**
	* Process the note giving instructions for keyword replacements
	*
	* Nothing to process, so return false always.
	*
	* @param object Metadata_Field		$asset	the asset to which we belong
	* @param object	Backend_Outputter	$o		the outputter class
	* @param string						$prefix	prefix for the form element
	*
	* @return boolean (false always)
	* @access public
	*/
	function processKeywordReplacementText(&$asset, &$o, $prefix)
	{
		return false;

	}//end processKeywordReplacementText()


}//end class
?>
