<?php
/**
* +--------------------------------------------------------------------+
* | Squiz.net Commercial Module Licence                                |
* +--------------------------------------------------------------------+
* | Copyright (c) Squiz Pty Ltd (ACN 084 670 600).                     |
* +--------------------------------------------------------------------+
* | This source file is not open source or freely usable and may be    |
* | used subject to, and only in accordance with, the Squiz Commercial |
* | Module Licence.                                                    |
* | Please refer to http://www.squiz.net/licence for more information. |
* +--------------------------------------------------------------------+
*
* $Id: form_question_rule_type_contain.inc,v 1.15.2.2 2005/05/02 02:44:57 gsherwood Exp $
*
*/


require_once dirname(__FILE__).'/../../form_question_rule/form_question_rule.inc';

/**
* Form_Question_Rule_Type_Contain
*
* Purpose
*
*
* @author  Marc Mcintyre <mmcintyre@squiz.net>
* @version $Revision: 1.15.2.2 $
* @package MySource_Matrix_Packages
* @subpackage cms
*/
class Form_Question_Rule_Type_Contain extends Form_Question_Rule
{


	/**
	* Returns a list of operators for this rule type
	*
	* @access public
	* @return array (mixed => string) an array of descriptions indexed by operator id (which can be
	*                                 anything, generally string or (int)0|1 for a boolean value)
	*/
	function getOperators()
	{
		return Array(
				1	=> 'Must contain',
				0	=> 'Must not contain',
			   );

	}//end getOperators()


	/**
	* writes JavaScript code for client side validation
	*
	* This function assumes the skeleton of a JS validation function has been created around this code
	* with a form variable named 'form' passed (this is done when generating the content file).
	*
	* @param object form_question	&$q_asset		reference to the question asset
	* @param string					$operator		the operator being used to compare
	* @param mixed					&$comparison	either a value or a form_question asset (based on
	*												comparison question id), being used to compare
	*
	* @access public
	* @return string
	*/
	function generateJSCode(&$q_asset, $rule_data)
	{
		// have we printed out the validation function yet?
		// (since this is static across all class instances, this will work)
		static $printed_fn = false;

		$operator = array_get_index($rule_data, 'operator', 1);
		$cq_id = array_get_index($rule_data, 'comparison_question_id', 0);
		$value = array_get_index($rule_data, 'value', '');
		$case_sensitive = array_get_index($rule_data, 'case_sensitive', 1);

		ob_start();			// buffer this please

			if (!$printed_fn) {
				$printed_fn = true;

					?>
					function sq_form_validate_contain(answer, comparison, case_sensitive)
					{
						if (case_sensitive) {
							return answer.indexOf(comparison) != -1;
						} else {
							return answer.toLowerCase().indexOf(comparison.toLowerCase()) != -1;
						}
					}//end sq_form_validate_contain()
					<?php

			}

			if ($cq_id != 0) {
				$comparison = 'document.getElementById("'.$cq_id.'").value';
			} else {
				$comparison = '"'.addslashes($value).'"';
			}

			?>
				if (<?php echo ($operator == 1) ? '!' : ''; ?>sq_form_validate_contain(document.getElementById("<?php echo $q_asset->id; ?>").value, <?php echo $comparison ?>, <?php echo (int)$case_sensitive; ?>)) {
					submission_errors[submission_errors.length] = "<?php
						if (empty($rule_data['custom_text'])) {
							echo addslashes($this->defaultError($q_asset, $rule_data));
						} else {
							echo addslashes($rule_data['custom_text']);
						}
					?>";
				}
			<?php

		$contents = ob_get_contents();
		ob_end_clean();

		return $contents;

	}//end generateJSCode()


	/**
	* processes a test on a single static value
	*
	* Rule data is an array with the following fields:
	* [operator] => operator to compare with (string, ==, !=, <, <=, >, >=)
	* [value] => comparison static value
	* [comparison_question_id] => comparison question assetid
	* [case_sensitive] => whether the comparison is case sensitive
	*
	* @param mixed	$answer			the answer being passed to us
	* @param string	$rule_data		the rule's data
	*
	* @access public
	* @return boolean true only if rule succeeds
	*/
	function evaluate($answer, $rule_data)
	{
		$operator = array_get_index($rule_data, 'operator', 1);
		$cq_id = array_get_index($rule_data, 'comparison_question_id', 0);
		$value = array_get_index($rule_data, 'value', '');
		$case_sensitive = array_get_index($rule_data, 'case_sensitive', 1);

		if ($cq_id != 0) {
			$comparison =& $GLOBALS['SQ_SYSTEM']->am->getAsset($cq_id);
			if ($case_sensitive) {
				$valid = (strpos($answer, $comparison->getValue()) !== false) ? 1 : 0;
			} else {
				$valid = (strpos(strtolower($answer), strtolower($comparison->getValue())) !== false) ? 1 : 0;
			}
		} else {	// sent just a value
			if ($case_sensitive) {
				$valid = (strpos($answer, $value) !== false) ? 1 : 0;
			} else {
				$valid = (strpos(strtolower($answer), strtolower($value)) !== false) ? 1 : 0;
			}
		}

		return $valid == $operator;

	}//end evaluate()


	/**
	* returns a description of the rule
	*
	* @param object Form_Question	&$q_asset	the question asset that failed
	* @param array					$rule_data	the rule data
	*
	* @return string	the error message
	* @access public
	*/
	function ruleDescription(&$q_asset, $rule_data)
	{
		$operator = array_get_index($rule_data, 'operator', 1);
		$cq_id = array_get_index($rule_data, 'comparison_question_id', 0);
		$value = array_get_index($rule_data, 'value', '');
		$case_sensitive = array_get_index($rule_data, 'case_sensitive', 1);

		$error_str = 'The response to "'.$q_asset->attr('name').'" must '.($operator == 0 ? 'not ' : '').' contain ';

		if ($cq_id != 0) {
			$comparison =& $GLOBALS['SQ_SYSTEM']->am->getAsset($cq_id);
		$error_str .= 'the response to question "'.$comparison->attr('name').'"';
		} else {	// sent just a value
			$value = array_get_index($rule_data, 'value', '');
			$error_str .= '"'.$value.'"';
		}

		$error_str .= ' (';

		if (!$case_sensitive) {
			$error_str .= 'not ';
		}

		$error_str .= 'case sensitive)';

		return $error_str;

	}//end ruleDescription()


}//end class
?>
