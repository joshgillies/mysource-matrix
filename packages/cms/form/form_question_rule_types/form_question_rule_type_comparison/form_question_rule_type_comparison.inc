<?php
/**
* +--------------------------------------------------------------------+
* | Squiz.net Open Source Licence                                      |
* +--------------------------------------------------------------------+
* | Copyright (c), 2003 Squiz Pty Ltd (ABN 77 084 670 600).            |
* +--------------------------------------------------------------------+
* | This source file may be used subject to, and only in accordance    |
* | with, the Squiz Open Source Licence Agreement found at             |
* | http://www.squiz.net/licence.                                      |
* | Make sure you have read and accept the terms of that licence,      |
* | including its limitations of liability and disclaimers, before     |
* | using this software in any way. Your use of this software is       |
* | deemed to constitute agreement to be bound by that licence. If you |
* | modify, adapt or enhance this software, you agree to assign your   |
* | intellectual property rights in the modification, adaptation and   |
* | enhancement to Squiz Pty Ltd for use and distribution under that   |
* | licence.                                                           |
* +--------------------------------------------------------------------+
*
* $Id: form_question_rule_type_comparison.inc,v 1.20.2.2 2005/04/14 01:43:56 lwright Exp $
*
*/


require_once dirname(__FILE__).'/../../form_question_rule/form_question_rule.inc';

/**
* Form_Question_Rule_Type_Comparison
*
* Purpose
*
*
* @author  Marc Mcintyre <mmcintyre@squiz.net>
* @version $Revision: 1.20.2.2 $
* @package MySource_Matrix_Packages
* @subpackage cms
*/
class Form_Question_Rule_Type_Comparison extends Form_Question_Rule
{


	/**
	* Returns a list of operators for this rule type
	*
	* @access public
	* @return array (mixed => string) an array of descriptions indexed by operator id (which can be
	*                                 anything, generally string or (int)0|1 for a boolean value)
	*/
	function getOperators()
	{
		$operators = Array(
						'=='	=> 'Must Be Equal to ',
						'!='	=> 'Must Not Be Equal to ',
						'>'		=> 'Must be Greater Than ',
						'<'		=> 'Must be Less Than ',
						'>='	=> 'Must be Greater Than or Equal To ',
						'<='	=> 'Must be Less Than or Equal To ',
					 );

		return $operators;

	}//end getOperators()


	/**
	* writes JavaScript code for client side validation
	*
	* This function assumes the skeleton of a JS validation function has been created around this code
	* with a form variable named 'form' passed (this is done when generating the content file).
	*
	* @param object Form_Question	&$q_asset		reference to the question asset
	* @param Array					$rule_data		the rule data being used
	*
	* @access public
	* @return boolean
	*/
	function generateJSCode(&$q_asset, $rule_data)
	{
		$operator = array_get_index($rule_data, 'operator', 1);
		$cq_id = array_get_index($rule_data, 'comparison_question_id', 0);
		$value = array_get_index($rule_data, 'value', '');

		ob_start();			// buffer this please

			if ($cq_id != 0) {
				$comparison = 'document.getElementById("'.$cq_id.'").value';
			} else {
				$comparison = '"'.addslashes($value).'"';
			}

			// if it's a numeric field, make sure that JavaScript
			// interprets it as a number
			if (is_a($q_asset, 'form_question_type_numeric')) {	?>
				if (!(parseFloat(document.getElementById("<?php echo $q_asset->id; ?>").value) <?php echo $operator ?> parseFloat(<?php echo $comparison ?>))) {
			<?php } else { ?>
				if (!(document.getElementById("<?php echo $q_asset->id; ?>").value <?php echo $operator ?> <?php echo $comparison ?>)) {
			<?php } ?>
					submission_errors[submission_errors.length] = "<?php
						if (empty($rule_data['custom_text'])) {
							echo addslashes($this->defaultError($q_asset, $rule_data));
						} else {
							echo addslashes($rule_data['custom_text']);
						}
					?>";
				}
			<?php

		$contents = ob_get_contents();
		ob_end_clean();

		return $contents;

	}//end generateJSCode()


	/**
	* processes a test on a single static value
	*
	* Rule data is an array with the following fields:
	* [operator] => operator to compare with (string, ==, !=, <, <=, >, >=)
	* [value] => comparison static value
	* [comparison_question_id] => comparison question assetid
	* [case_sensitive] => whether the comparison is case sensitive
	*
	* @param mixed	$answer			the answer being passed to us
	* @param string	$rule_data		the rule's data
	*
	* @access public
	* @return boolean true only if rule succeeds
	*/
	function evaluate($answer, $rule_data)
	{
		$operator = array_get_index($rule_data, 'operator', '==');
		$cq_id = array_get_index($rule_data, 'comparison_question_id', 0);
		$value = array_get_index($rule_data, 'value', '');

		if ($cq_id != 0) {
			$comparison =& $GLOBALS['SQ_SYSTEM']->am->getAsset($cq_id);
			$valid = eval('return \''.$answer.'\''.$operator.'\''.$comparison->getValue().'\';');
		} else {	// sent just a value
			$valid = eval('return \''.$answer.'\''.$operator.'\''.$value.'\';');
		}

		return $valid;

	}//end evaluate()


	/**
	* returns a description of the rule
	*
	* @param object Form_Question	&$q_asset	the question asset that failed
	* @param array					$rule_data	the rule data
	*
	* @return string	the error message
	* @access public
	*/
	function ruleDescription(&$q_asset, $rule_data)
	{
		$operator = array_get_index($rule_data, 'operator', '==');
		$cq_id = array_get_index($rule_data, 'comparison_question_id', 0);
		$value = array_get_index($rule_data, 'value', '');

		if (($value == '') && ($operator == '!=')) {
			$error_str = 'Question "'.$q_asset->attr('name').'" is a required field; it must be filled in';
		} else {
			$operator_list = $this->getOperators();
			$error_str = 'The response to "'.$q_asset->attr('name').'" '.strtolower($operator_list[array_get_index($rule_data, 'operator', '==')]).' ';

			if ($cq_id != 0) {
				$comparison =& $GLOBALS['SQ_SYSTEM']->am->getAsset($cq_id);
			$error_str .= 'the response to question "'.$comparison->attr('name').'"';
			} else {	// sent just a value
				$error_str .= '"'.$value.'"';
			}
		}

		return $error_str;

	}//end ruleDescription()


}//end class
?>
