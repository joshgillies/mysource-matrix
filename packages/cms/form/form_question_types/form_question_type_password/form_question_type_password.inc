<?php
/**
* +--------------------------------------------------------------------+
* | Squiz.net Commercial Module Licence                                |
* +--------------------------------------------------------------------+
* | Copyright (c) Squiz Pty Ltd (ACN 084 670 600).                     |
* +--------------------------------------------------------------------+
* | This source file is not open source or freely usable and may be    |
* | used subject to, and only in accordance with, the Squiz Commercial |
* | Module Licence.                                                    |
* | Please refer to http://www.squiz.net/licence for more information. |
* +--------------------------------------------------------------------+
*
* $Id: form_question_type_password.inc,v 1.13.2.2 2005/05/02 02:44:57 gsherwood Exp $
*
*/


require_once dirname(__FILE__).'/../../form_question/form_question.inc';

/**
* Form_Question_Type_Password
*
* Purpose
*
*
* @author  Marc Mcintyre <mmcintyre@squiz.net>
* @version $Revision: 1.13.2.2 $
* @package MySource_Matrix_Packages
* @subpackage cms
*/
class Form_Question_Type_Password extends Form_Question
{


	/**
	* Constructor
	*
	* @param int	$assetid	the asset id to be loaded
	* @param array	$data		the section's entry for this question (contains all question data)
	*
	*/
	function Form_Question_Type_Password($assetid=0,$data=Array())
	{
		$this->Form_Question($assetid, $data);

	}//end constructor


	/**
	* Returns an array of all the permitted link type, the type asset and the cardinality
	*
	* @see Asset::_getAllowLinks()
	* @access private
	*/
	function _getAllowedLinks()
	{
		return Array();

	}//end _getAllowedLinks()


	/**
	* generates the html for this question to display it in the frontend
	*
	* @param boolean	$content_file	if TRUE, this function will generate content for the content file
	* @param string		$value			current value of the question
	*
	* @access public
	* @return string
	*/
	function getAnswer($content_file=true, $value='')
	{
		$width  = $this->attr('width');
		$max    = $this->attr('max');
		$extras = $this->attr('extra');
		$name   = $this->id.'_1';
		$name2   = $this->id.'_2';


		// generate some php for the value, which can be used for both
		// auto-answer and returning to saved forms
		$value = '';

		ob_start();
		password_box($name, $value, $width, $max, $extras);
		if ($this->attr('verify')) {
			echo '<br />';
			password_box($name2, $value, $width, $max, $extras);
		}
		$html = ob_get_contents();
		ob_end_clean();

		// calling text_box will convert the open and close php tags into their html counter-parts
		// so we need to convert them back to proper php tags

		return html_entity_decode($html);

	}//end getAnswer()


	/**
	* process this question
	*
	* @param &object $submission the current submission object
	*
	* @access public
	* @return boolean
	*/
	function evaluate()
	{
		if (!$this->active_submission) return false;

		if (!$this->answeredCorrectly()) {
			$this->failed_rules[] = 'Password field "'.$this->attr('name').'" was entered differently on each try';
			return false;
		}

		if (isset($_POST[$this->id.'_1'])) {
			$val = $_POST[$this->id.'_1'];

			if (strlen($val) < $this->attr('min')) {
				$this->failed_rules[] = 'Password field "'.$this->attr('name').'" must be no less than '.$this->attr('min').' characters';
				return false;
			}
			if (strlen($val) > $this->attr('max')) {
				$this->failed_rules[] = 'Password field "'.$this->attr('name').'" must be no more than '.$this->attr('max').' characters';
				return false;
			}

			return parent::evaluate($val);
		}

	}//end evaluate()


	/**
	* returns TRUE if this question has been answered correctly
	*
	* @access public
	* @return boolean
	*/
	function answeredCorrectly()
	{
		if (!isset($_POST[$this->id.'_1'])) return false;
		$val1 = $_POST[$this->id.'_1'];
		if (strlen($val1) > $this->attr('max') || strlen($val1) < $this->attr('min')) return false;

		if ($this->attr('verify')) {
			if (!isset($_POST[$this->id.'_2'])) return false;
			$val2 = $_POST[$this->id.'_2'];
			if ($val1 != $val2) return false;
		}
		return true;

	}//end answeredCorrectly()


	/**
	* returns an answer summary in XML format (suitable for submission logs)
	*
	* @param mixed	$answer	the answer for the question
	*
	* @access public
	* @return string the summary XML
	*/
	function getXML($answer)
	{
		ob_start();

		// save as a text question for now, we may need a better idea here
		echo '<text_q id="'.addslashes($this->id).'"  name="'.htmlspecialchars($this->attr('name')).'">';
		echo htmlspecialchars($answer);
		echo '</text_q>';

		$contents = ob_get_contents();
		ob_end_clean();

		return $contents;

	}//end getXML()


}//end class
?>