<?php
/**
* +--------------------------------------------------------------------+
* | Squiz.net Commercial Module Licence                                |
* +--------------------------------------------------------------------+
* | Copyright (c) Squiz Pty Ltd (ACN 084 670 600).                     |
* +--------------------------------------------------------------------+
* | This source file is not open source or freely usable and may be    |
* | used subject to, and only in accordance with, the Squiz Commercial |
* | Module Licence.                                                    |
* | Please refer to http://www.squiz.net/licence for more information. |
* +--------------------------------------------------------------------+
*
* $Id: form_question_type_tickbox_table_edit_fns.inc,v 1.3.2.3 2005/05/02 02:44:58 gsherwood Exp $
*
*/


require_once dirname(__FILE__).'/../../form_question/form_question_edit_fns.inc';

/**
* Form_Question_Type_Tickbox_Table_Edit_Fns
*
* Purpose
*
*
* @author  Andrei Railean <arailean@squiz.net>
* @version $Revision: 1.3.2.3 $
* @package MySource_Matrix_Packages
* @subpackage cms
*/
class Form_Question_Type_Tickbox_Table_Edit_Fns extends Form_Question_Edit_Fns
{


	/**
	* Constructor
	*
	*/
	function Form_Question_Type_Tickbox_Table_Edit_Fns()
	{
		$this->Form_Question_Edit_Fns();

	}//end constructor


	/**
	* Paint the interface for editing the tickbox table options
	*
	* @param object	Asset 				$asset	asset whose interface is being printed
	* @param object	Backend_Outputter	$o		backend outputter
	* @param string 					$prefix	unique prefix for this asset
	*
	* @access public
	* @return boolean
	*/
	function paintQuestionInterface(&$asset, &$o, $prefix)
	{
		$write_access = $asset->writeAccess('attributes');

		if ($write_access) {
			$output_type = 'editor';
		} else {
			$output_type = 'passive';
		}

		echo $asset->_getOutput($output_type);

		return $write_access;

	}//end paintQuestionInterface()


	/**
	* Process the interface for editing the tickbox table options
	*
	* @param object	Asset 				$asset	asset whose interface is being processed
	* @param object	Backend_Outputter	$o		backend outputter
	* @param string						$prefix	unique prefix for this asset
	*
	* @access public
	* @return boolean
	*/
	function processQuestionInterface(&$asset, &$o, $prefix)
	{
		$safe_prefix = $asset->getSafePrefix();

		$table = array_get_index($_REQUEST, $safe_prefix, false);

		if (!$table || empty($table)) return false;

		// the last table row is an artifact, remove it
		array_pop($table);
		if (empty($table)) return false;

		// the last item in the first row an artifact, remove it
		$header = array_shift($table);
		array_pop($header);
		array_unshift($table, $header);

		$asset->setAttrValue('question_contents', $table);

		return true;

	}//end processQuestionInterface()


}//end class

?>
