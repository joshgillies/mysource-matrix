<?php
/**
* +--------------------------------------------------------------------+
* | Squiz.net Open Source Licence                                      |
* +--------------------------------------------------------------------+
* | Copyright (c), 2003 Squiz Pty Ltd (ABN 77 084 670 600).            |
* +--------------------------------------------------------------------+
* | This source file may be used subject to, and only in accordance    |
* | with, the Squiz Open Source Licence Agreement found at             |
* | http://www.squiz.net/licence.                                      |
* | Make sure you have read and accept the terms of that licence,      |
* | including its limitations of liability and disclaimers, before     |
* | using this software in any way. Your use of this software is       |
* | deemed to constitute agreement to be bound by that licence. If you |
* | modify, adapt or enhance this software, you agree to assign your   |
* | intellectual property rights in the modification, adaptation and   |
* | enhancement to Squiz Pty Ltd for use and distribution under that   |
* | licence.                                                           |
* +--------------------------------------------------------------------+
*
* $Id: page_redirect.inc,v 1.16.2.2 2005/06/30 07:03:15 ykasim Exp $
*
*/


require_once SQ_CORE_PACKAGE_PATH.'/page/page.inc';

/**
* Page_Redirect
*
* Purpose
*
*
* @author  Greg Sherwoood <greg@squiz.net>
* @version $Revision: 1.16.2.2 $
* @package MySource_Matrix_Packages
* @subpackage cms
*/
class Page_Redirect extends Page
{

	/**
	* Constructor
	*
	* @param int	$assetid	the asset id to be loaded
	*
	*/
	function Page_Redirect($assetid=0)
	{
		$this->Page($assetid);

	}//end constructor


	/**
	* Returns a list of lock types available for this asset type
	*
	* @return Array()
	* @access public
	*/
	function lockTypes()
	{
		$lock_types = parent::lockTypes();
		$lock_types['redirect'] = ($lock_types['attributes'] | $lock_types['links']);
		return $lock_types;

	}//end lockTypes()


	/**
	* Returns an array of all the permitted link type, the type asset and the cardinality
	*
	* @see Asset::_getAllowLinks()
	* @return array
	* @access private
	*/
	function _getAllowedLinks()
	{
		$page_links = parent::_getAllowedLinks();
		$page_links[SQ_LINK_NOTICE]['asset'] = Array('card' => 'M', 'exclusive' => false);
		return $page_links;

	}//end _getAllowedLinks()


	/**
	* Returns the asset (if any) that we are redirecting to
	*
	* @return NULL|object Asset
	* @access public
	*/
	function &getRedirectAsset()
	{
		$link = $GLOBALS['SQ_SYSTEM']->am->getLink($this->id, SQ_LINK_NOTICE, '', true, 'redirect_asset');
		if (empty($link)) {
			$null = null;
			return null;
		}

		return $GLOBALS['SQ_SYSTEM']->am->getAsset($link['minorid'], $link['minor_type_code']);

	}//end getRedirectAsset()


	/**
	* Set's the asset (if any) that we are going to be redirecting to
	*
	* @param object Asset	the asset that we want to redirect to (NULL clears the redirect asset)
	*
	* @return boolean
	* @access public
	*/
	function setRedirectAsset(&$asset)
	{
		$old_link = $GLOBALS['SQ_SYSTEM']->am->getLink($this->id, SQ_LINK_NOTICE, '', true, 'redirect_asset');
		$GLOBALS['SQ_SYSTEM']->doTransaction('BEGIN');
		if (empty($old_link)) {
			// if there is not existing asset, and we aren't setting on, we are done here
			if (is_null($asset)) {
				$GLOBALS['SQ_SYSTEM']->doTransaction('COMMIT');
				return true;
			}

		// else if there is a link, and we are about to set an asset, but it is the same as we already have
		} elseif (!is_null($asset) && $old_link['minorid'] == $asset->id) {
			$GLOBALS['SQ_SYSTEM']->doTransaction('COMMIT');
			return true;

		// else something different, delete the old link
		} else {
			if (!$this->deleteLink($old_link['linkid'])) {
				$GLOBALS['SQ_SYSTEM']->doTransaction('ROLLBACK');
				return false;
			}
		}

		if (!is_null($asset)) {
			if (!$this->createLink($asset, SQ_LINK_NOTICE, 'redirect_asset')) {
				$GLOBALS['SQ_SYSTEM']->doTransaction('ROLLBACK');
				return false;
			}
		}

		$GLOBALS['SQ_SYSTEM']->doTransaction('COMMIT');

		return true;

	}//end setRedirectAsset()


	/**
	* Prints out the Frontend for the asset
	*
	* The user is redirected to another location, so no design is printed
	*
	* @return void
	* @access public
	*/
	function printFrontend()
	{
		// check that the user has read access to the site
		if (!$this->readAccess()) {
			$GLOBALS['SQ_SYSTEM']->paintLogin('Login', translate('cannot_access_asset', $this->name));
			return;
		}

		$url = '';

		// See if we are given a query string value to look at
		$qrystr_param = $this->attr('use_querystring_parameter');
		if ($qrystr_param && isset($_GET[$qrystr_param]) && trim($_GET[$qrystr_param]) != '') {
			$url = trim($_GET[$qrystr_param]);

		// if there is no url, see if we have an asset selected
		} else if (($url = $this->attr('redirect_url')) == '') {
			$redirect_asset = &$this->getRedirectAsset();
			if (!is_null($redirect_asset)) {
				if (($url = $redirect_asset->getURL()) == '') {
					$url = current_url().'?a='.$redirect_asset->id;
				}
			}
		}//end if

		if ($url == '') {
			trigger_localised_error('CMS0037', E_USER_WARNING, $GLOBALS['SQ_SYSTEM']->am->getTypeInfo($this->type(), 'name'));
			return;
		}

		$url .= trim($this->attr('url_suffix'));

		// See if we need to append the query string and there is a query string
		if ($this->attr('append_querystring') && !empty($_SERVER['QUERY_STRING'])) {
			$url .= ((strpos($url, '?') === false) ? '?' : '&').$_SERVER['QUERY_STRING'];
		}

		if ($this->attr('new_window')) {

			$options = $this->attr('new_window_options');
			$params  =	 'location='.((strpos($options, 'hide_location'  ) !== false) ? '0' : '1').','
						.'menubar='.((strpos($options, 'hide_menubar'   ) !== false) ? '0' : '1').','
						.'scrollbars='.((strpos($options, 'hide_scrollbars') !== false) ? '0' : '1').','
						.'statusbar='.((strpos($options, 'hide_status'    ) !== false) ? '0' : '1').','
						.'toolbar='.((strpos($options, 'hide_toolbar'   ) !== false) ? '0' : '1').','
						.'resizable=' .((strpos($options, 'not_resizable'  ) !== false) ? '0' : '1');

			if ($w = $this->attr('new_window_width'))  $params .= ',width='.$w;
			if ($h = $this->attr('new_window_height')) $params .= ',height='.$h;

			// if the headers have been sent then other stuff
			$wrap_script = !headers_sent();
			if ($wrap_script) {
				?><html><body><?php
			}
			?>
				<script language="JavaScript" type="text/javascript">
					var page = window.open('<?php echo addslashes($url); ?>','<?php echo time(); ?>','<?php echo addslashes($params);?>');
					history.go(-1);
				</script>
			<?php
			if ($wrap_script) {
				?></body></html><?php
			}

		// not in a new window, just relocate them
		} else {
			if (headers_sent()) {
				?>
				<script language="JavaScript" type="text/javascript">
					self.location = '<?php echo addslashes($url); ?>';
				</script>
				<?php
			} else {
				header('Location: '.$url);
			}

		}

	}//end printFrontend()


	/**
	* Prints out the body of the asset
	*
	* This function just calls printFrotnend()
	*
	* @return void
	* @access public
	* @see printFrontend()
	*/
	function printBody()
	{
		$this->printFrontend();

	}//end printBody()

}//end class

?>
