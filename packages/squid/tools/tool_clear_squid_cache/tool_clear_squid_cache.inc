<?php
/**
* +--------------------------------------------------------------------+
* | This MySource Matrix Module file is Copyright (c) Squiz Pty Ltd    |
* | ACN 084 670 600                                                    |
* +--------------------------------------------------------------------+
* | IMPORTANT: This Module is not available under an open source       |
* | license and consequently distribution of this and any other files  |
* | that comprise this Module is prohibited. You may only use this     |
* | Module if you have the written consent of Squiz.                   |
* +--------------------------------------------------------------------+
*
* $Id: tool_clear_squid_cache.inc,v 1.4 2008/01/29 03:46:32 lwright Exp $
*
*/

check_ssv_licence();
require_once SQ_SYSTEM_ROOT.'/core/assets/system/tool/tool.inc';

/**
* Tool_Clear_Squid_Cache
*
* Purpose
*
* Tool to clear Squid cache using asset's URLs
*
* @author Rayn Ong <rong@squiz.net>
* @version $Revision: 1.4 $
* @package MySource_Matrix_Packages
* @subpackage squid
*/

class Tool_Clear_Squid_Cache extends Tool
{


	/**
	* Constructor
	*
	* @param int	$assetid  the asset id to be loaded
	*
	*/
	function __construct($assetid=0)
	{
		parent::__construct($assetid);

	}//end constructor


	/**
	* Paints the tool interface.
	*
	* @param Backend_Outputter	$o			reference to the backend outputter of the object painting the tool
	* @param string				$type_code	the type code of the tool being painted
	*
	* @return void
	* @access public
	*/
	public static function paintTool(Backend_Outputter $o, $type_code)
	{
		$tool_info = $GLOBALS['SQ_SYSTEM']->am->getTypeInfo($type_code);
		$o->openSection($tool_info['name']);

		// interface to get to asset using asset finder
		$o->openField(translate('asset'));
			asset_finder($type_code.'_assetid');
			$o->note(translate('squid_tool_asset_note'));
		$o->closeField();

		// if clear now box is checked, cache is cleared at commit
		$o->openField(translate('squid_tool_clear_now_field'));
			check_box($type_code.'_clear_now', TRUE);
		$o->closeField();

		// if populate now box is checked, will request page using CURL
		$o->openField(translate('squid_tool_populate_question'));
			check_box($type_code.'_populate_now', TRUE);
			echo translate('squid_tool_populate_note');
		$o->closeField();

		// cascade options
		$o->openField(translate('cascade_question'));
			$options = Array(
						'single'	=> translate('this_asset'),
						'children'	=> translate('this_asset_and_children'),
					   );
			check_box($type_code.'_cascade', TRUE);
			// combo_box($type_code.'_cascade', $options, '', FALSE);
			echo translate('squid_tool_cascade_note');
			echo '<br /><br />';
			$o->note(translate('squid_tool_note'));
		$o->closeField();

		$o->closeSection();

		// scheduled jobs section
		$o->openSection(translate('squid_tool_schedule_section'));

		$cron_mgr = $GLOBALS['SQ_SYSTEM']->am->getSystemAsset('cron_manager');
		$GLOBALS['SQ_SYSTEM']->am->includeAsset('cron_job_squid_cache_purge');
		$purge_jobs = Cron_Job_Squid_Cache_Purge::getActiveJobs();

		// print scheduled jobs, one_off or repeating
		if (!empty($purge_jobs)) {
			$o->openField(translate('squid_tool_scheduled_job_field'), 'new_line');
			?>
			<table class="sq-backend-table">
				<tr>
					<td class="sq-backend-table-header"><?php echo translate('asset'); ?></td>
					<td class="sq-backend-table-header"><?php echo translate('when'); ?></td>
					<td align="center" class="sq-backend-table-header" style="text-align: center;"><?php echo translate('delete_question'); ?></td>
				</tr>
				<?php
					for ($i = 0; $i < count($purge_jobs); $i++) {
					?>
					<tr>
						<td class="sq-backend-table-cell">
							<?php echo get_asset_tag_line($purge_jobs[$i]->attr('ownerid')); ?>

						</td>
						<td class="sq-backend-table-cell">
							<?php echo $purge_jobs[$i]->readableWhen(); ?>
						</td>
						<td align="center" class="sq-backend-table-cell">
						<?php
							// only print checkbox if user has write access to asset
							if ($purge_jobs[$i]->canDelete()) {
								if ($purge_jobs[$i]->writeAccess('')) {
									check_box($type_code.'_remove_fs[]', $purge_jobs[$i]->id);
								}
							} else {
								echo '&nbsp;';
							}
						?>
						</td>
					</tr>
					<?php
				}//end for
				?>
			</table><br />
			<?php
			$o->closeField();
		}//end if

		$cron_epoc = (int)$cron_mgr->attr('epoch');
		$cron_refresh = (int)$cron_mgr->attr('refresh_time');
		if ($cron_epoc > 0 && $cron_refresh > 0) {

			// prints the interface for adding a new one-off job
			$o->openField(translate('squid_tool_one_off_field'), 'new_line');
				require_once SQ_FUDGE_PATH.'/general/datetime.inc';
				$new_job = new Cron_Job_Squid_Cache_Purge();
				$edit_fns = $new_job->getEditFns();
				$edit_fns->paintInLineBackend($new_job, $o, $type_code.'_one_off');
				echo '&nbsp;<br /><br />';
			$o->closeField();

			// prints the interface for adding a new repeating job
			$o->openField(translate('squid_tool_repeating_field'), 'new_line');
				$new_job =& new Cron_Job_Squid_Cache_Purge();
				$GLOBALS['SQ_SYSTEM']->doTransaction('BEGIN');
					$new_job->setAttrValue('type', 'repeating');
				$GLOBALS['SQ_SYSTEM']->doTransaction('COMMIT');
				$edit_fns = $new_job->getEditFns();
				$edit_fns->paintInLineBackend($new_job, $o, $type_code.'_repeating');
				$o->note(translate('cron_manager_next_run', $cron_mgr->readableRefreshTime(), readable_datetime($cron_mgr->timeOfNextRun())));
			$o->closeField();

		} else {
				echo translate('cron_manager_not_configured');
		}

		$GLOBALS['SQ_SYSTEM']->am->forgetAsset($cron_mgr);

		$o->closeSection();

	}//end paintTool()


	/**
	* Processes the user input and performs the function of the tool.
	*
	* @param Backend_Outputter	$o			reference to the backend outputter of the object painting the tool
	* @param string				$type_code	the type code of the tool being painted
	*
	* @return boolean
	* @access public
	*/
	public static function processTool(Backend_Outputter $o, $type_code)
	{
		$cron_mgr = $GLOBALS['SQ_SYSTEM']->am->getSystemAsset('cron_manager');
		$GLOBALS['SQ_SYSTEM']->am->includeAsset('cron_job_squid_cache_purge');

		// remove jobs
		if (!empty($_POST[$type_code.'_remove_fs'])) {
			$GLOBALS['SQ_SYSTEM']->am->includeAsset('cron_job_squid_cache_purge');
			$purge_jobs = Cron_Job_Squid_Cache_Purge::getActiveJobs();
			if (!empty($purge_jobs)) {
				if ($GLOBALS['SQ_SYSTEM']->am->acquireLock($cron_mgr->id, 'links')) {
					for ($i = 0; $i < count($purge_jobs); $i++) {
						if (in_array($purge_jobs[$i]->id, $_POST[$type_code.'_remove_fs'])) {
							$cron_mgr->removeJob($purge_jobs[$i]);
						}
					}

					$GLOBALS['SQ_SYSTEM']->am->releaseLock($cron_mgr->id, 'links');
				} else {
					trigger_localised_error('SYS0232', E_USER_NOTICE);
				}
			}
			// remove job only, do not print error msg
			if (!$_REQUEST[$type_code.'_assetid']['assetid']) {
				return FALSE;
			}
		}

		// error: asset is not defined
		if (!$_REQUEST[$type_code.'_assetid']['assetid']) {
			trigger_localised_error('SQUID0001', E_USER_NOTICE);
			return FALSE;
		}

		// set HIPO running_vars
		$assetid = $_REQUEST[$type_code.'_assetid']['assetid'];
		$cascade = (isset($_REQUEST[$type_code.'_cascade'])) ? $_REQUEST[$type_code.'_cascade'] : FALSE;
		$populate_now = FALSE;
		if (isset($_REQUEST[$type_code.'_populate_now']) && $_REQUEST[$type_code.'_populate_now']) {
			$populate_now = TRUE;
		}
		$vars = Array(
					'assetid'		=> $assetid,
					'cascade'		=> $cascade,
					'repopulate'	=> $populate_now,
				);

		// schedule job
		$owner = $GLOBALS['SQ_SYSTEM']->am->getAsset($assetid);

		$urls = $GLOBALS['SQ_SYSTEM']->am->getURLs($assetid);
		if (empty($urls)) {
			return FALSE;
		}

		if ($owner->adminAccess('')) {

			// one off
			$new_job = new Cron_Job_Squid_Cache_Purge();
			$edit_fns = $new_job->getEditFns();
			$GLOBALS['SQ_SYSTEM']->doTransaction('BEGIN');
				$new_job->setAttrValue('ownerid', $assetid);
				$new_job->setAttrValue('cascade', $cascade);
				$new_job->setAttrValue('repopulate', $populate_now);
			$GLOBALS['SQ_SYSTEM']->doTransaction('COMMIT');
			if ($edit_fns->processInLineBackend($new_job, $o, $type_code.'_one_off')) {
				$cron_mgr->addJob($new_job, $GLOBALS['SQ_SYSTEM']->user);
			}

			// repeating
			$new_job = new Cron_Job_Squid_Cache_Purge();
			$edit_fns = $new_job->getEditFns();
			$GLOBALS['SQ_SYSTEM']->doTransaction('BEGIN');
				$new_job->setAttrValue('type', 'repeating');
				$new_job->setAttrValue('ownerid',$assetid);
				$new_job->setAttrValue('cascade', $cascade);
				$new_job->setAttrValue('repopulate', $populate_now);
			$GLOBALS['SQ_SYSTEM']->doTransaction('COMMIT');
			if ($edit_fns->processInLineBackend($new_job, $o, $type_code.'_repeating')) {
				$cron_mgr->addJob($new_job, $GLOBALS['SQ_SYSTEM']->user);
			}

			// run HIPO job if the 'clear now' box is checked
			$run_now = isset($_REQUEST[$type_code.'_clear_now']) && $_REQUEST[$type_code.'_clear_now'];
			if ($populate_now) $run_now = TRUE;
			if ($run_now) {
				$hh = $GLOBALS['SQ_SYSTEM']->getHipoHerder();
				$hh->queueHipo('hipo_job_tool_clear_squid_cache', $vars, '', SQ_PACKAGES_PATH.'/squid/hipo_jobs');
				$url = $hh->runQueuedJobs();
				if (!empty($url)) $o->setRedirect($url);
			}

		} else {
			trigger_localised_error('SQUID0003', E_USER_NOTICE, translate('squid_cron_name', $owner->id));
		}//end if has write access

		return FALSE; // we want to repaint the tool

	}//end processTool()


}//end class


?>