<?php
/**
* +--------------------------------------------------------------------+
* | This MySource Matrix CMS file is Copyright (c) Squiz Pty Ltd       |
* | ACN 084 670 600                                                    |
* +--------------------------------------------------------------------+
* | IMPORTANT: Your use of this Software is subject to the terms of    |
* | the Licence provided in the file licence.txt. If you cannot find   |
* | this file please contact Squiz (www.squiz.net) so we may provide   |
* | you a copy.                                                        |
* +--------------------------------------------------------------------+
*
* $Id: saml_account_manager_edit_fns.inc,v 1.1.1.1 2012/08/21 05:17:12 ewang Exp $
*
*/

require_once SQ_PACKAGES_PATH.'/cms/page_templates/page_asset_builder/page_asset_builder_edit_fns.inc';

/**
* Physical_Folder_Edit_Fns
*
* Purpose
*
*
* @author  Benjamin Pearson <bpearson@squiz.net>
* @version $Revision: 1.1.1.1 $
* @package MySource_Matrix_Packages
* @subpackage file
*/
class SAML_Account_Manager_Edit_Fns extends Page_Asset_Builder_Edit_Fns
{


	/**
	* Constructor
	*
	*/
	function __construct()
	{
		parent::__construct();
	}//end constructor
	
	
	
	/**
	* Paint the interface to display if simplesamlphp lib is installed
	*
	* @param object	&$asset	the asset whose interface we are painting
	* @param object	&$o		the outputter class
	* @param string	$prefix	prefix for the form elements
	*
	* @return boolean
	* @access public
	*/
	function paintSimplesamlphpInstall (&$asset, &$o, $prefix)
	{
		$installed = $asset->isSimplesamlphpInstalled();
		if ($installed) {
			echo '<span style="color:green;font-weight:bold">Installed</span>';
		} else {
			echo '<span style="color:red;font-weight:bold">Not Installed</span>';
		}//end if

	}//end paintSimplesamlphpInstall()
	
	
	/**
	* Paint the interface for choosing authSource defined in simplesamlphp library
	*
	* @param object	&$asset	the asset whose interface we are painting
	* @param object	&$o		the outputter class
	* @param string	$prefix	prefix for the form elements
	*
	* @return boolean
	* @access public
	*/
	function paintAuthSource(&$asset, &$o, $prefix)
	{
		$installed = $asset->isSimplesamlphpInstalled();
		if ($installed) {
			require SQ_TOOL_SIMPLESAMLPHP_PATH.'/config/authsources.php';
			$options[''] = '';
			foreach ($config as $name => $value) {
			    $options[$name] = $name;
			}
				
			if (!$asset->writeAccess('attributes')) {
			    echo $options[$asset->attr('auth_source')];
			} else {	
				combo_box($prefix.'_auth_source', $options, FALSE, $asset->attr('auth_source'));
			}
		} 

	}//end paintAuthSource()
	
	
	/**
	* Process the interface of setting authSource
	*
	* @param object	&$asset	the asset whose interface we are painting
	* @param object	&$o		the outputter class
	* @param string	$prefix	prefix for the form elements
	*
	* @return boolean
	* @access public
	*/
	function processAuthSource(&$asset, &$o, $prefix)
	{
		if (isset($_POST[$prefix.'_auth_source'])) {
			$id = trim($_POST[$prefix.'_auth_source']);
			if (empty($id)) return FALSE;
			$asset->setAttrValue('auth_source', $id);
			return TRUE;
		}
		return FALSE;

	}//end processAuthSource()
	
	/**
	* Paint the SP metadata download URL
	*
	* @param object	&$asset	the asset whose interface we are painting
	* @param object	&$o		the outputter class
	* @param string	$prefix	prefix for the form elements
	*
	* @return boolean
	* @access public
	*/
	function paintMetadataUrl(&$asset, &$o, $prefix)
	{
		if($asset->attr('auth_source')) {
			 $url = $asset->getUrl();
			 echo $url.'?showMetadata';
		}
	}
	
		/**
	* Paint the SP metadata download URL
	*
	* @param object	&$asset	the asset whose interface we are painting
	* @param object	&$o		the outputter class
	* @param string	$prefix	prefix for the form elements
	*
	* @return boolean
	* @access public
	*/
	function paintAcsUrl(&$asset, &$o, $prefix)
	{
		   $acs_asset = $GLOBALS['SQ_SYSTEM']->am->getLink($asset->id, SQ_LINK_TYPE_2, 'saml2_acs', TRUE, 'saml2_assertion_consumer_service', 'major', '1');
		   $acs_asset =  $GLOBALS['SQ_SYSTEM']->am->getAsset($acs_asset['minorid']);
		   if($acs_asset) {
		       echo ($acs_asset->getUrl());
		   }
	}
	
	
	/**
	* Paint the SP metadata download URL
	*
	* @param object	&$asset	the asset whose interface we are painting
	* @param object	&$o		the outputter class
	* @param string	$prefix	prefix for the form elements
	*
	* @return boolean
	* @access public
	*/
	function paintSlsUrl(&$asset, &$o, $prefix)
	{
		   $sls_asset = $GLOBALS['SQ_SYSTEM']->am->getLink($asset->id, SQ_LINK_TYPE_2, 'saml2_sls', TRUE, 'saml2_single_logout_service', 'major', '1');
		   $sls_asset =  $GLOBALS['SQ_SYSTEM']->am->getAsset($sls_asset['minorid']);
		   if($sls_asset) {
			echo ($sls_asset->getUrl());
		   }
	}
	
	
	

	/**
	* Paint the interface for selecting the asset to redirect to
	*
	* @param object	&$asset	the asset whose interface we are painting
	* @param object	&$o		the outputter class
	* @param string	$prefix	prefix for the form elements
	*
	* @return boolean
	* @access public
	*/
	function paintRedirectAssetid(&$asset, &$o, $prefix)
	{
		$redirect_asset = $asset->getRedirectAsset();
		if ($asset->writeAccess('links')) {
			asset_finder($prefix.'_redirect_assetid', (is_null($redirect_asset) ? 0 : $redirect_asset->id));
		} else {
			if (is_null($redirect_asset)) {
				echo translate('saml_redirect_none_set');
			} else {
				echo get_asset_tag_line($redirect_asset->id);
			}
		}
		return TRUE;

	}//end paintRedirectAssetid()


	/**
	* Process the interface for selecting the asset to redirect to
	*
	* @param object	&$asset	the asset whose interface we are painting
	* @param object	&$o		the outputter class
	* @param string	$prefix	prefix for the form elements
	*
	* @return boolean
	* @access public
	*/
	function processRedirectAssetid(&$asset, &$o, $prefix)
	{
		if (!isset($_POST[$prefix.'_redirect_assetid']['assetid']) || (isset($asset->_tmp['reverting_to_system_version']) && $asset->_tmp['reverting_to_system_version'])) {
			return TRUE;
		}

		$redirect_assetid = $_POST[$prefix.'_redirect_assetid']['assetid'];

		if ($redirect_assetid) {
			$redirect_asset = $GLOBALS['SQ_SYSTEM']->am->getAsset($redirect_assetid);
		} else {
			$redirect_asset = NULL;
		}

		return $asset->setRedirectAsset($redirect_asset);

	}//end processRedirectAssetid()
	
	
	
	/**
	* Paint the interface for choosing the user type that is created
	*
	* @param object	&$asset	the asset whose interface we are painting
	* @param object	&$o		the outputter class
	* @param string	$prefix	prefix for the form elements
	*
	* @return boolean
	* @access public
	*/
	function paintAddCreateType(&$asset, &$o, $prefix)
	{
		if (!$asset->writeAccess('attributes')) {
			parent::paintAssetTypes($asset, $o, $prefix);
		} else {
			$user_types = $GLOBALS['SQ_SYSTEM']->am->getTypeDescendants('user');

			$options = Array('user' => 'User');
			foreach ($user_types as $type_code) {
				$info = $GLOBALS['SQ_SYSTEM']->am->getTypeInfo($type_code);
				if ($info['allowed_access'] != 'system' && $info['instantiable']) {
					$options[$type_code] = $info['name'];
				}
			}
			combo_box($prefix.'_create_type', $options, FALSE, array_keys($asset->attr('create_type')));
		}

	}//end paintAddCreateType()


	/**
	* Process the section for choosing the user type that is created
	*
	* This is overridden from Asset Builder because it makes sense for the account
	* manager to still be only allowed to create one type of user from the frontend interface.
	*
	* @param object	&$asset	the asset whose interface we are painting
	* @param object	&$o		the outputter class
	* @param string	$prefix	prefix for the form elements
	*
	* @return boolean
	* @access public
	*/
	function processAddCreateType(&$asset, &$o, $prefix)
	{
		if (isset($_POST[$prefix.'_create_type'])) {
			$type = trim($_POST[$prefix.'_create_type']);
			if (empty($type)) return FALSE;
			$types = Array($type => TRUE);
			$asset->setAttrValue('create_type', $types);
			return TRUE;
		}
		return FALSE;

	}//end processAddCreateType()
	
	
	
	/**
	* Paints the interface for choosing create types whose form should be customised
	*
	* @param object	&$asset	the asset to which we belong
	* @param object	&$o		the outputter class
	* @param string	$prefix	prefix for the form element
	*
	* @return boolean
	* @access public
	*/
	function paintCreateFormCustomisation(&$asset, &$o, $prefix)
	{
		$customised_types = $asset->attr('create_form_customisations');
		$wa = $asset->writeAccess('attributes');
		if ($wa) {
			hidden_field($prefix.'_customise_form_submitted', 1);
			echo check_box($prefix.'_customise_form', 1, !empty($customised_types));
		} else {
			$fn = !empty($customised_types) ? 'tick' : 'cross';
			echo '<img src="'.sq_web_path('lib').'/web/images/'.$fn.'.gif" />';
		}

	}//end paintCreateFormCustomisation()


	/**
	* Processes the interface for choosing create types whose form should be customised
	*
	* @param object	&$asset	the asset to which we belong
	* @param object	&$o		the outputter class
	* @param string	$prefix	prefix for the form element
	*
	* @return boolean
	* @access public
	*/
	function processCreateFormCustomisation(&$asset, &$o, $prefix)
	{
		if ($asset->writeAccess('attributes') && isset($_POST[$prefix.'_customise_form_submitted'])) {
			$customise = array_get_index($_POST, $prefix.'_customise_form');
			$customised_types = $customise ? array_keys($asset->attr('create_type')) : Array();
			return $asset->setAttrValue('create_form_customisations', $customised_types);
		}
		return FALSE;

	}//end processCreateFormCustomisation()

	
	
	
	/**
	* A tool to parse IDP XML metadata to simplesamlphp config array
	*
	* @param object	&$asset	the asset to which we belong
	* @param object	&$o		the outputter class
	* @param string	$prefix	prefix for the form element
	*
	* @return boolean
	* @access public
	*/
	function paintParseMetadata (&$asset, &$o, $prefix)
	{
		$wa = $asset->writeAccess('attributes');
		$xmldata = isset($_POST[$prefix.'_parse_metadata']) ? trim($_POST[$prefix.'_parse_metadata']) : '';
		if ($wa) {
		    if (!empty($xmldata)) {
			try {
			SimpleSAML_Utilities::validateXMLDocument($xmldata, 'saml-meta');
			$entities = SimpleSAML_Metadata_SAMLParser::parseDescriptorsString($xmldata);

			/* Get all metadata for the entities. */
			foreach($entities as &$entity) {
				$entity = array(
					'saml20-idp-remote' => $entity->getMetadata20IdP(),
					);

			}

			/* Transpose from $entities[entityid][type] to $output[type][entityid]. */
			$output = SimpleSAML_Utilities::transposeArray($entities);
			}
			catch (Exception $e) {
			    trigger_error($e->getMessage());
			    return TRUE;
			}
			pre_echo($output);
			return TRUE;
		    }
		    else {
			text_area($prefix.'_parse_metadata', '', 100, 5);
		    }
		}
		return TRUE;
	}//end paintParseMetadata()

	
	
	
	
	/**
	* Use extensions elements in Auth Request?
	*
	* @param object	&$asset	the asset to which we belong
	* @param string	$prefix	prefix for the form element
	*
	* @return boolean
	* @access public
	*/
	function use_extensions (&$asset, $prefix)
	{
	    $use_extensions = $asset->attr('use_extensions');
	    return ($use_extensions);
	} // end use_extensions()
	
	/**
	* Does SAML user id exist in  returned user attributes?
	*
	* @param object	&$asset	the asset to which we belong
	* @param string	$prefix	prefix for the form element
	*
	* @return boolean
	* @access public
	*/
	function saml_userid_in_attribute (&$asset, $prefix)
	{
	    $location = $asset->attr('saml_userid_location');
	    return ($location == 'attribute');
	} // end saml_userid_in_attribute()
	
	
	
	
}//end class

?>
