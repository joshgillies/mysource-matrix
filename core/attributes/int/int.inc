<?php
/**
* +--------------------------------------------------------------------+
* | Squiz.net Open Source Licence                                      |
* +--------------------------------------------------------------------+
* | Copyright (c), 2003 Squiz Pty Ltd (ABN 77 084 670 600).            |
* +--------------------------------------------------------------------+
* | This source file may be used subject to, and only in accordance    |
* | with, the Squiz Open Source Licence Agreement found at             |
* | http://www.squiz.net/licence.                                      |
* | Make sure you have read and accept the terms of that licence,      |
* | including its limitations of liability and disclaimers, before     |
* | using this software in any way. Your use of this software is       |
* | deemed to constitute agreement to be bound by that licence. If you |
* | modify, adapt or enhance this software, you agree to assign your   |
* | intellectual property rights in the modification, adaptation and   |
* | enhancement to Squiz Pty Ltd for use and distribution under that   |
* | licence.                                                           |
* +--------------------------------------------------------------------+
*
* $Id: int.inc,v 1.28.2.1 2006/05/01 06:18:12 tbarrett Exp $
*
*/


require_once SQ_INCLUDE_PATH.'/asset_attribute.inc';

/**
* Integer Asset Attribute
*
* parameters => Array(
*                     'allow_negative' => [true|false]
*               )
*
*
* <!-- Sample Edit Interface XML Node -->
*    <int width="10" />
*
* @author  Blair Robertson <blair@squiz.net>
* @version $Revision: 1.28.2.1 $
* @package MySource_Matrix
* @subpackage attributes
*/
class Asset_Attribute_Int extends Asset_Attribute
{


	/**
	* Constructor
	*
	* @param int	$attributeid	the attribute id to be loaded
	* @param mixed	$value			the current value for the element
	*
	*/
	function Asset_Attribute_Int($attributeid=0, $value=null)
	{
		$this->Asset_Attribute($attributeid, (int) $value);
		if (!isset($this->_params['allow_negative'])) $this->_params['allow_negative'] = true;

	}//end constructor


	/**
	* Takes an XML_Tree_Node from an edit interface XML file and creates
	* the params array from it
	*
	* @param object XML_Tree_Node	$node
	*
	* @return boolean
	* @access public
	*/
	function setEditParams(&$node)
	{
		if (!parent::setEditParams($node)) return false;
		$this->_edit_params['width']  = (int) $node->attributes['width'];

		return true;

	}//end setEditParams()


	/**
	* Prints the interface for filling in a value
	*
	* @param string		$prefix		prefix for the form element
	* @param boolean	$read_only	are we just printing the value
	*
	* @access public
	*/
	function paint($prefix, $read_only=false)
	{
		if ($read_only) {
			echo (int) $this->value;
			return;
		}

		$allow_negative = array_get_index($this->_params, 'allow_negative', true);
		//TODO: TRANSLATE: other js changes here
		$javascript ='
			onFocus="javascript: this.__sq_init_value = this.value;"
			onKeyPress="javascript:
			my_value = parseInt(this.value, 10);
			if (typeof sq_backup  == \'undefined\') {
				sq_backup = '.$this->value.';
			}

			if (isNaN(my_value)) {
				this.value = this.__sq_init_value;
				alert(js_translate(\'cannot_accept_non_digit_characters\'));
				this.value = sq_backup;
			';

		if (!$allow_negative) {
			$javascript .= '
			} else if (my_value < 0) {
				alert(js_translate(\'cannot_be_negative\'));
				this.value = sq_backup;
			';

		}

		$javascript .= '
			} else {
				this.value	= my_value;
				sq_backup	= my_value;
			}"
		';

		require_once SQ_LIB_PATH.'/html_form/html_form.inc';
		text_box($prefix, (int) $this->value, $this->_edit_params['width'], 0, false, $javascript);

	}//end paint()


	/**
	* Prints the interface for filling in a value
	*
	* @param string	prefix	prefix for the form element
	*
	* @access public
	*/
	function process($prefix)
	{
		if (!isset($_REQUEST[$prefix])) return false;
		$value = (int) $_REQUEST[$prefix];
		if ($this->value != $value && $this->setValue($value)) {
			$this->processed = true;
		} else {
			$this->processed = false;
		}

	}//end process()


	/**
	* Ensure the attribute being set is an integer
	*
	* @param mixed	&$value	value to be validated
	*
	* @return boolean
	* @access public
	*/
	function validateValue(&$value)
	{
		$value = trim($value);

		$allow_negative = array_get_index($this->_params, 'allow_negative', true);

		if (!$allow_negative && $value < 0) {
			return false;
		}

		$new_value = (int)$value;

		// we are comparing by string here, reason is that passing in a string as $value
		// becomes comparing $value with zero which is TRUE. So instead we would be comparing
		// it with a string '0', which is FALSE and what we want for it to invalidate.
		// Only genuine ints will pass through.
		if ((string)$new_value != $value) return false;
		return true;

	}//end validateValue()


	/**
	* Retrieve a list of indexable values from this attribute
	*
	* The return value not only contains the indexable values, but also the number of
	* times they occur in this attributes value
	*
	* @return array(string => int)
	* @access public
	*/
	function getKeyData()
	{
		if (empty($this->value)) return Array();
		return Array($this->value => 1);

	}//end getKeyData()


}//end class

?>
