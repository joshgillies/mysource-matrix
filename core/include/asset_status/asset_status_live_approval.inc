<?php
/**
* +--------------------------------------------------------------------+
* | Squiz.net Open Source Licence                                      |
* +--------------------------------------------------------------------+
* | Copyright (c), 2003 Squiz Pty Ltd (ABN 77 084 670 600).            |
* +--------------------------------------------------------------------+
* | This source file may be used subject to, and only in accordance    |
* | with, the Squiz Open Source Licence Agreement found at             |
* | http://www.squiz.net/licence.                                      |
* | Make sure you have read and accept the terms of that licence,      |
* | including its limitations of liability and disclaimers, before     |
* | using this software in any way. Your use of this software is       |
* | deemed to constitute agreement to be bound by that licence. If you |
* | modify, adapt or enhance this software, you agree to assign your   |
* | intellectual property rights in the modification, adaptation and   |
* | enhancement to Squiz Pty Ltd for use and distribution under that   |
* | licence.                                                           |
* +--------------------------------------------------------------------+
*
* $Id: asset_status_live_approval.inc,v 1.26.2.1 2004/10/06 00:20:59 gsherwood Exp $
* $Name: not supported by cvs2svn $
*/

require_once SQ_INCLUDE_PATH.'/asset_status/asset_status.inc';

/**
* Asset_Status_Live_Approval
*
* Purpose
*    Provide an Up For Review status for an asset.
*
* Valid Transitions
*    LIVE_APPROVAL -> LIVE_APPROVAL if there is workflow running and current user can approve
*                                   but is not the last publisher
*    LIVE_APPROVAL -> LIVE          if there is a workflow and current user can approve
*                                   and is the last publisher
*    LIVE_APPROVAL -> EDITING       if there is workflow running and the current user can approve
*                                   but chooses to reject the changes OR
*                                   there is workflow running and the user is an admin
*
* @author  Greg Sherwood <greg@squiz.net>
* @version $Version$ - 1.0
* @package MySource_Matrix
*/
class Asset_Status_Live_Approval extends Asset_Status
{


	/**
	* Constructor
	*
	* @param object Asset	&$owner	the asset that this status belongs to
	*/
	function Asset_Status_Live_Approval(&$owner)
	{
		$this->Asset_Status($owner);
		$this->status_tag = SQ_STATUS_LIVE_APPROVAL;

	}//end constructor


	/**
	* Returns a string used to describe this status
	*
	* @return string
	* @access public
	* @static
	*/
	function getDescription()
	{
		return 'Up For Review';

	}//end getDescription()


	/**
	* Returns an array of statii that the current user can set for this asset
	* Value returned is a key => value array for a drop down
	*
	* @return array
	* @access public
	*/
	function getAvailableStatii()
	{
		$statii = Array();

		// cant do anything without write access
		if (!$this->owner->readAccess()) return $statii;

		if ($this->owner->adminAccess('')) {
			$statii[SQ_STATUS_EDITING] = 'Safe Edit';
		}

		$wfm = &$GLOBALS['SQ_SYSTEM']->getWorkflowManager();
		$running_schemas = $wfm->getSchemas($this->owner->id, true, true);

		if (!empty($running_schemas)) {
			$userid = $GLOBALS['SQ_SYSTEM']->currentUserId();

			// check to see if the user logged in can publish
			$publishers = $wfm->whoCanPublish($this->owner->id);

			// if nobody can publish we better let admins do it
			$admin_access = $this->owner->adminAccess('');

			if (in_array($userid, $publishers) || $admin_access) {
				// the current user can approve this asset to keep the workflow going
				$wf_complete = $wfm->testPublish($this->owner->id, $GLOBALS['SQ_SYSTEM']->currentUserId());

				// we also need to check what if all the required metadata fields are completed
				$mm = &$GLOBALS['SQ_SYSTEM']->getMetadataManager();
				if ($mm->allowsMetadata($this->owner->id)) {
					$m_complete = $mm->requiredFieldsComplete($this->owner->id);
	
					if ($wf_complete && $m_complete) $statii[SQ_STATUS_LIVE] = 'Approve and Make Live';
					else if (in_array($userid, $publishers)) $statii[SQ_STATUS_LIVE_APPROVAL] = 'Apply for Approval';
				} else {
					// this asset needs to allow both statuses because it cant check metadata requirements
					// due to it not allowing metadata
					$statii[SQ_STATUS_LIVE] = 'Approve and Make Live';
					$statii[SQ_STATUS_LIVE_APPROVAL] = 'Apply for Approval';
				}

				$statii[SQ_STATUS_EDITING] = 'Safe Edit';
			}
		} else {
			// now running workflow means that anyone with admin access can
			// make this live (up for review is just a flag in this case)
			$statii[SQ_STATUS_LIVE] = 'Approve and Make Live';

		}//end if workflow running

		return $statii;

	}//end getAvailableStatii()


	/**
	* Processes the changes required when a new status is set
	* Does not change the status of the owner asset or this object
	*
	* @param int	$new_status	the new status to set for this asset
	*
	* @return boolean
	* @access public
	*/
	function processStatusChange($new_status)
	{
		if (!parent::processStatusChange($new_status)) return false;

		$wfm = &$GLOBALS['SQ_SYSTEM']->getWorkflowManager();
		$current_userid = $GLOBALS['SQ_SYSTEM']->currentUserId();

		if ($new_status == SQ_STATUS_EDITING) {

			$running_schemas = $wfm->getSchemas($this->owner->id, true, true);
			if (!empty($running_schemas)) {
				// someone has rejected the changes, so we need to cancel the workflow
				if (!$wfm->cancelWorkflow($this->owner->id)) {
					trigger_error('Workflow cancel failed', E_USER_WARNING);
					return false;
				}
			}

			// we are safe editing
			if (!$this->owner->saveSystemVersion()) {
				trigger_error('Status change failed, could not save to cache', E_USER_WARNING);
				return false;
			}

			require_once SQ_INCLUDE_PATH.'/general_occasional.inc';

			// send an internal message
			$ms = &$GLOBALS['SQ_SYSTEM']->getMessagingService();
			$user = &$GLOBALS['SQ_SYSTEM']->am->getAsset($current_userid);

			if (!$wfm->silentWorkflowParty($this->owner->id)) {
				$log = $ms->newMessage();
				$log->subject = 'Asset Review Cancelled';
				$log->body    = 'User "'.$user->name.'" has started a safe edit of '.$GLOBALS['SQ_SYSTEM']->am->getTypeInfo($this->owner->type(), 'name').' "'.$this->owner->name.'" during a review. The review has been cancelled and the status of "'.$this->owner->name.'" is now '.get_status_description($new_status);
				if (!empty($running_schemas)) {
					// create a link for navigation to the workflow screen for this asset
					$log->body .= "\n\n".'A full report for the Workflow of "'.$this->owner->name.'" can be found on the <SQ_MSG_LINK href="'.current_url().$this->owner->getBackendHref('workflow').'">Workflow Screen</SQ_MSG_LINK>.';
				}
				$log->type = 'asset.workflow';
				$log->parameters['assetid'] = $this->owner->id;
				$log->parameters['version'] = substr($this->owner->version, 0, strrpos($this->owner->version, '.'));
				$log->send();
			}

		} else {

			$running_schemas = $wfm->getSchemas($this->owner->id, true, true);
			if (!empty($running_schemas)) {

				// if we are trying to approve this asset, we might not actually be a person
				// in the workflow process - sounds weird (I know) but this could be a plain old
				// admin that is trying to approve because metadata is now complete.
				// the result is that this workflow process may already be complete
				$mm = &$GLOBALS['SQ_SYSTEM']->getMetadataManager();
				$m_complete = !$mm->allowsMetadata($this->owner->id) || $mm->requiredFieldsComplete($this->owner->id);

				if ($wfm->isWorkflowComplete($this->owner->id) && $m_complete && ($new_status & SQ_STATUS_LIVE)) {
					if (!$wfm->completeWorkflow($this->owner->id)) {
						trigger_error('Workflow completion failed', E_USER_WARNING);
						return false;
					}
				} else {
					// we are doing a workflow and someone has just approved the asset, so record this
					if (!$wfm->recordPublish($this->owner->id, $current_userid)) {
						trigger_error('Approval by user '.$current_userid.' not set in processStatusChange for "'.$this->owner->name.'"', E_USER_WARNING);
						return false;
					}

					// if the workflow process is now complete, we can go ahead and clear out the schemas
					// as long as all our metadata is also complete
					if ($wfm->isWorkflowComplete($this->owner->id) && $m_complete && ($new_status & SQ_STATUS_LIVE)) {
						if (!$wfm->completeWorkflow($this->owner->id)) {
							trigger_error('Workflow completion failed', E_USER_WARNING);
							return false;
						}
					}
				}

				if ($new_status == SQ_STATUS_LIVE) {
					// notify people that the asset has gone live
					$wfm = &$GLOBALS['SQ_SYSTEM']->getWorkflowManager();
					if (!$wfm->notifyOnLive($this->owner->id, $this->status_tag)) return false;

					// update the last published date
					if (!$this->owner->setDate('published')) return false;
				}

				if ($new_status == SQ_STATUS_APPROVED) {
					// log an internal message
					$ms = &$GLOBALS['SQ_SYSTEM']->getMessagingService();
					$user = &$GLOBALS['SQ_SYSTEM']->am->getAsset($current_userid);

					if (!$wfm->silentWorkflowParty($this->owner->id)) {
						$log = $ms->newMessage();
						$log->subject = 'Review Completed';
						$log->body    = 'The review process for '.$GLOBALS['SQ_SYSTEM']->am->getTypeInfo($this->owner->type(), 'name').' "'.$this->owner->name.'" has been completed. "'.$this->owner->name.'" is now live.';
						$log->type    = 'asset.workflow';
						// create a link for navigation to the workflow screen for this asset
						$log->body .= "\n\n".'A full report for the Workflow of "'.$this->owner->name.'" can be found on the <SQ_MSG_LINK href="'.current_url().$this->owner->getBackendHref('workflow').'">Workflow Screen</SQ_MSG_LINK>.';
						$asset_url = $this->owner->getURL();
						if (!empty($asset_url)) {
							$log->body .= "\n".'You can also <SQ_MSG_LINK href="'.$asset_url.'">preview this asset.</SQ_MSG_LINK>';
						}
						$log->parameters['assetid'] = $this->owner->id;
						$log->parameters['version'] = substr($this->owner->version, 0, strrpos($this->owner->version, '.'));
						$ms->enqueueMessage($log);
					}
				}

			}//end if

		}//end else

		return true;

	}//end processStatusChange()

}//end class

?>