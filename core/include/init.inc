<?php
/**
* +--------------------------------------------------------------------+
* | Squiz.net Open Source Licence                                      |
* +--------------------------------------------------------------------+
* | Copyright (c), 2003 Squiz Pty Ltd (ABN 77 084 670 600).            |
* +--------------------------------------------------------------------+
* | This source file may be used subject to, and only in accordance    |
* | with, the Squiz Open Source Licence Agreement found at             |
* | http://www.squiz.net/licence.                                      |
* | Make sure you have read and accept the terms of that licence,      |
* | including its limitations of liability and disclaimers, before     |
* | using this software in any way. Your use of this software is       |
* | deemed to constitute agreement to be bound by that licence. If you |
* | modify, adapt or enhance this software, you agree to assign your   |
* | intellectual property rights in the modification, adaptation and   |
* | enhancement to Squiz Pty Ltd for use and distribution under that   |
* | licence.                                                           |
* +--------------------------------------------------------------------+
*
* $Id: init.inc,v 1.60.2.4 2004/02/18 11:39:06 brobertson Exp $
* $Name: not supported by cvs2svn $
*/

/**
* Init File
*
* The file that needs to be included to do anything
*
* @author  Blair Robertson <blair@squiz.net>
* @version $Version$ - 1.0
* @package MySource_Matrix
*/

/*
* Set the level of PHP reported errors
* And some other PHP thingies we want
* done OUR way.
*/
error_reporting(E_ALL);
set_magic_quotes_runtime(0);

// We need this so that our error handler won't kill itself attempting to try and remove
// all existing buffers, especially important when Zend Performance Suite is installed because
// it adds another OB level
define('SQ_INIT_OB_LEVEL', ob_get_level());

// Are we running from the command line ?
define('SQ_PHP_CLI', (php_sapi_name() == 'cli'));


/*
* Set the current version of the system core
* We mustn't forget to update this (until someone
* comes up with an automated method)
*/
define('SQ_SYSTEM_VERSION',        '3.0.1-SR');
define('SQ_SYSTEM_SHORT_NAME',     basename(dirname(dirname(dirname(__FILE__)))).' - MySource');
define('SQ_SYSTEM_LONG_NAME',      basename(dirname(dirname(dirname(__FILE__)))).' - Squiz MySource v'.SQ_SYSTEM_VERSION.' (Matrix)');
define('SQ_SYSTEM_URL',            'http://www.squiz.net/');

define('SQ_REQUIRED_PHP_VERSION', '4.3.0');

define('SQ_TABLE_PREFIX',          'sq_');
define('SQ_TABLE_ROLLBACK_PREFIX', 'sq_rollback_');


/*
* Let's get our bearings as to where everything is from here.
* These paths may be relative or absolute
*/
define('SQ_SYSTEM_ROOT',		dirname(dirname(dirname(realpath(__FILE__)))));
define('SQ_INCLUDE_PATH',		SQ_SYSTEM_ROOT.'/core/include');
define('SQ_CORE_PACKAGE_PATH',	SQ_SYSTEM_ROOT.'/core/assets');
define('SQ_ATTRIBUTES_PATH',	SQ_SYSTEM_ROOT.'/core/attributes');
define('SQ_LIB_PATH',			SQ_SYSTEM_ROOT.'/core/lib');
define('SQ_DATA_PATH',			SQ_SYSTEM_ROOT.'/data');
define('SQ_PACKAGES_PATH',		SQ_SYSTEM_ROOT.'/packages');
define('SQ_WEB_PATH',			SQ_SYSTEM_ROOT.'/core/web');
define('SQ_FUDGE_PATH',			SQ_SYSTEM_ROOT.'/fudge');


// include the main system config file
require_once SQ_DATA_PATH.'/private/conf/main.inc';


// Load general everyday handy functions for developers
require_once SQ_FUDGE_PATH.'/dev/dev.inc';


// nice little boolean to use for testing whether we happen to be in the backend or not
define('SQ_IN_BACKEND', (basename($_SERVER['PHP_SELF']) == SQ_CONF_BACKEND_SUFFIX));

// nice little boolean to use for testing whether we happen to be in limbo (frontend editing) or not
define('SQ_IN_LIMBO', (basename($_SERVER['PHP_SELF']) == SQ_CONF_LIMBO_SUFFIX));

// make sure there is a trailing slash if we are in the backend
if (SQ_IN_BACKEND && substr($_SERVER['PHP_SELF'], -1) != '/') {
	header('Location: '.$_SERVER['PHP_SELF'].'/'.(($_SERVER['QUERY_STRING']) ? '?'.$_SERVER['QUERY_STRING'] : ''));
	exit();
}


// the current output type for the system, can be changed during run-time (eg to XML)
// main use is so that the error_reporter doesn't barf in HTML to something expecting XML
if (!isset($GLOBALS['SQ_OUTPUT_TYPE'])) $GLOBALS['SQ_OUTPUT_TYPE'] = (SQ_PHP_CLI) ? 'text' : 'html';

// we are not installing anything
if (!isset($GLOBALS['SQ_INSTALL'])) $GLOBALS['SQ_INSTALL'] = false;

// we are not purging the trash
$GLOBALS['SQ_PURGING_TRASH'] = false;

// we are not reverting to a system version
$GLOBALS['SQ_REVERT_TO_SYSTEM_VERSION'] = false;

// the number of assetids reserved for system assets
define('SQ_NUM_RESERVED_ASSETIDS', 128);


/*
* LINK TYPES - used with bitwise operators
*/
define('SQ_LINK_TYPE_1',        1); // minor asset is a child of the major asset, link is displayed on frontend and backend navigation systems
define('SQ_LINK_TYPE_2',        2); // same power/rank as a TYPE_1 link, but is only displayed on backend navigation systems
define('SQ_LINK_TYPE_3',        4); // same power/rank as a TYPE_1 link, but is not displayed on any navigation systems
define('SQ_LINK_NOTICE',        8); // for information purposes only, (eg used to register href's from one asset to another) so that deletions can warn of impending issues

define('SQ_SC_LINK_ALL',          15); // short hand what all the main link types add up to
define('SQ_SC_LINK_FRONTEND_NAV',  1); // short hand for TYPE_1
define('SQ_SC_LINK_BACKEND_NAV',   3); // short hand for TYPE_1 | TYPE_2
define('SQ_SC_LINK_SIGNIFICANT',   7); // short hand for TYPE_1 | TYPE_2 | TYPE_3
define('SQ_SC_LINK_WEB_PATHS',     7); // short hand for links affected by web path changes


/*
* PERMISSION TYPES - different access levels to control access to an asset
*/
define('SQ_PERMISSION_WORKFLOW', 0); // workflow
define('SQ_PERMISSION_READ',     1); // read access
define('SQ_PERMISSION_WRITE',    2); // write access
define('SQ_PERMISSION_ADMIN',    3); // admin access


/*
* STATUS TYPES - statii an asset can currently have
* It is very important that the statii stay in the order they are defined
* as they are compared to eachother when changing the status of an asset
*/
define('SQ_STATUS_ARCHIVED',           1); // asset is archived
define('SQ_STATUS_UNDER_CONSTRUCTION', 2); // asset is under construction
define('SQ_STATUS_PENDING_APPROVAL',   4); // asset is currently in workflow
define('SQ_STATUS_APPROVED',           8); // asset is approved waiting to go live from under construction
define('SQ_STATUS_LIVE',              16); // asset is live
define('SQ_STATUS_LIVE_APPROVAL',     32); // asset is up for review
define('SQ_STATUS_EDITING',           64); // asset is currently safe editing
define('SQ_STATUS_EDITING_APPROVAL', 128); // asset is currently in workflow from safe edit
define('SQ_STATUS_EDITING_APPROVED', 256); // asset is approved waiting to go live from safe edit

define('SQ_SC_STATUS_NOT_LIVE',      15); // short hand for SQ_STATUS_ARCHIVED | SQ_STATUS_UNDER_CONSTRUCTION | SQ_STATUS_PENDING_APPROVAL | SQ_STATUS_APPROVED
define('SQ_SC_STATUS_CAN_APPROVE',   66); // short hand for SQ_STATUS_UNDER_CONSTRUCTION | SQ_STATUS_EDITING
define('SQ_SC_STATUS_PENDING',      164); // short hand for SQ_STATUS_PENDING_APPROVAL | SQ_STATUS_EDITING_APPROVAL | SQ_STATUS_LIVE_APPROVAL
define('SQ_SC_STATUS_ALL_APPROVED', 264); // short hand for SQ_STATUS_APPROVED | SQ_STATUS_EDITING_APPROVED
define('SQ_SC_STATUS_SAFE_EDITING', 448); // short hand for SQ_STATUS_EDITING | SQ_STATUS_EDITING_APPROVAL | SQ_STATUS_EDITING_APPROVED


// Load general functions, including the error handler
require_once SQ_INCLUDE_PATH.'/general.inc';
// we want all errors displayed by default, if you really don't want this unset after including this file
ini_set('display_errors', 1); 
set_error_handler('sq_error_handler');

// If there is magic quotes, strip them out
if (get_magic_quotes_gpc()) {
	require_once SQ_FUDGE_PATH.'/general/general.inc';
	stripslashes_array($_GET, true);
	stripslashes_array($_POST, true);
	stripslashes_array($_COOKIE, true);
	stripslashes_array($_REQUEST, true);
}


// Create the system object
require_once SQ_INCLUDE_PATH.'/mysource.inc';
$GLOBALS['SQ_SYSTEM'] = new MySource();
$GLOBALS['SQ_SYSTEM']->init();


?>
