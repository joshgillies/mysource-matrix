<?php
/**
* +--------------------------------------------------------------------+
* | Squiz.net Open Source Licence                                      |
* +--------------------------------------------------------------------+
* | Copyright (c), 2003 Squiz Pty Ltd (ABN 77 084 670 600).            |
* +--------------------------------------------------------------------+
* | This source file may be used subject to, and only in accordance    |
* | with, the Squiz Open Source Licence Agreement found at             |
* | http://www.squiz.net/licence.                                      |
* | Make sure you have read and accept the terms of that licence,      |
* | including its limitations of liability and disclaimers, before     |
* | using this software in any way. Your use of this software is       |
* | deemed to constitute agreement to be bound by that licence. If you |
* | modify, adapt or enhance this software, you agree to assign your   |
* | intellectual property rights in the modification, adaptation and   |
* | enhancement to Squiz Pty Ltd for use and distribution under that   |
* | licence.                                                           |
* +--------------------------------------------------------------------+
*
* $Id: metadata_field_thesaurus_edit_fns.inc,v 1.4.2.1 2006/04/04 07:24:11 tbarrett Exp $
*
*/

require_once SQ_SYSTEM_ROOT.'/core/assets/metadata/metadata_field/metadata_field_edit_fns.inc';

/**
* Metadata_Field_Thesaurus_Edit_Fns
*
* Purpose
*
*
* @author  Andrei Railean <arailean@squiz.net>
* @version $Revision: 1.4.2.1 $
* @package MySource_Matrix_Packages
* @subpackage __core__
*/
class Metadata_Field_Thesaurus_Edit_Fns extends Metadata_Field_Edit_Fns
{


	/**
	* Paints the root node selection box
	*
	* @param object	&$asset	asset being painted
	* @param object	&$o		backend outputter
	* @param string	$prefix	prefix for the html doc element name
	*
	* @return boolean
	* @access public
	*/
	function paintRootNode(&$asset, &$o, $prefix)
	{
		// get root links
		$root_links = $GLOBALS['SQ_SYSTEM']->am->getLinks($asset->id, SQ_LINK_NOTICE, '', FALSE, 'major', 'root');
		$root_asset_ids = Array();
		foreach ($root_links as $root_link) {
			$root_asset_ids[$root_link['minorid']] = $root_link['minor_type_code'];
		}

		if ($asset->writeAccess('links')) {
			multiple_asset_finder($prefix.'_root_nodes', array_keys($root_asset_ids));
		} else {
			$infos = $GLOBALS['SQ_SYSTEM']->am->getAssetInfo(array_keys($root_asset_ids));
			?>
			<table class="sq-backend-table">
				<tr>
					<td class="sq-backend-table-header"><?php echo translate('id') ?></td>
					<td class="sq-backend-table-header"><?php echo translate('name') ?></td>
					<td class="sq-backend-table-header"><?php echo translate('type') ?></td>
				</tr>
			<?php
			foreach ($infos as $assetid => $info) {
			?>

			<tr>
				<td class="sq-backend-table-cell"><?php echo $assetid ?></td>
				<td class="sq-backend-table-cell"><?php echo $info['name'] ?></td>
				<td class="sq-backend-table-cell"><?php echo ucwords(str_replace('_',' ', $info['type_code'])) ?></td>
			</tr>
			<?php
			}
			?>
			</table>
			<?php
		}
		return TRUE;

	}//end paintRootNode()


	/**
	* Paint the interface for filling in metadata values
	*
	* @param object		&$asset			the asset whose interface we are painting
	* @param object		&$o				the outputter class
	* @param string		$value_str		the current value for this field in the asset (NOT $asset) NULL means that there is no current value set
	* @param boolean	$write_access	does the current user have write access to the asset that we are setting metadata for (NOT THE SAME AS $asset)
	*
	* @return boolean
	* @access public
	*/
	function paintValueInterface(&$asset, &$o, $value_str, $write_access)
	{
		$prefix = $asset->getPrefix();
		require_once SQ_LIB_PATH.'/html_form/html_form.inc';

		$is_default = FALSE;
		$default = $asset->attr('default');
		if (is_null($value_str)) {
			$is_default = TRUE;
			$value = $default;
			$value_components = $asset->attr('value_components');
		} else {
			$value='';
			$value_components = $asset->attr('value_components');
			Metadata_Field::decodeValueString($value_str, $value, $value_components);
		}

		$thesaurus =& $asset->getThesaurusRef();

		if (empty($value)) {
			$values = Array();
		} else if (!is_array($value)) {
			$values = explode(',', $value);
		}

		if (!is_array($values)) $values = Array($values);

		$term_assetids = Array();

		foreach ($values as $term) {
			$termid = $thesaurus->getTermIdByName($term);
			$term_assetids[$termid] = $thesaurus->id.':'.$termid;
			$term_info[$termid] = $term;
		}

		if (isset($asset->_tmp['error'])) {
			echo '<ul>';
			foreach ($asset->_tmp['error'] as $message) {
				echo '<li class="sq-backend-warning">'.$message.'</li>';
			}
			echo '</ul>';
		}

		$editable = $asset->attr('editable');

		if ($write_access && $editable) {
			?>
			<script type="text/javascript">
				//<![CDATA[
				function toggleManualInterface(div_1, div_2)
				{
					if (document.getElementById(div_1).style.display == 'block') {
						document.getElementById(div_1).style.display = 'none';
						document.getElementById(div_2).style.display = 'block';
					} else {
						document.getElementById(div_2).style.display = 'none';
						document.getElementById(div_1).style.display = 'block';
					}
				}
				//]]>
			</script>
			<?php

			// use-default-or-not chooser
			check_box($prefix.'_default', '1', $is_default, 'toggleManualInterface(\''.$prefix.'_interface\',\''.$prefix.'_defaults\')');
			label(translate('thesaurus_use_default_value'), $prefix.'_default');
			if ($is_default) {
				echo ' '.translate('thesaurus_default_values_note');
			}
			echo '<br />';

			// non-default-value chooser
			echo '<div id="'.$prefix.'_interface" style="padding: 5px 0px; display:'.($is_default ? 'none' : 'block').'">';
			multiple_asset_finder($prefix.'_thes_term', $term_assetids, Array('thesaurus_term'=>'D'));
			echo '<div style="margin-top: 3px">';
			echo translate('thesaurus_meta_thesaurus_note', get_asset_tag_line($thesaurus->id, 'details'));
			echo '</div>';
			echo '</div>';

			// default value display
			echo '<div id="'.$prefix.'_defaults" style="display:'.($is_default ? 'block' : 'none').'">';
			echo $default;
			echo '</div>';

		} else {
			if (empty($values)) {
				echo translate('thesaurus_no_values');
			} else {
				echo translate($is_default ? 'thesaurus_using_default_values' : 'thesaurus_using_non_default_values');
				?>
				<table class="sq-backend-table" border="1" style="margin-left: 0px">
					<tr>
						<th style="width: 30%; white-space: none;"><?php echo translate('thesaurus_term'); ?></th>
						<th><?php echo translate('thesaurus_lineages'); ?></th>
					</tr>
				<?php
				foreach ($term_info as $term_id => $term_name) {
					?>
					<tr>
						<td><?php echo get_asset_tag_line($term_assetids[$term_id], 'details') ?></td>
						<td>
							<?php
							$lineages = $thesaurus->getLineagesForTerm($term_id);
							if (!$lineages) continue;
							foreach ($lineages as $lineage) {
								foreach ($lineage as $ancestor) {
									echo ' / ';
									if (isset($ancestor['relation'])) {
										echo '('.$ancestor['relation'].') ';
									}
									echo $ancestor['term'];
								}
								echo '<br />';
							}
							?>
						</td>
					</tr>
					<?php
				}//end foreach
				?>
				</table>
				<?php
			}//end else
		}//end else
		return TRUE;

	}//end paintValueInterface()


	/**
	* Process the interface for filling in metadata values
	*
	* @param object	&$asset			the asset whose interface we are painting
	* @param string	&$new_value_str	a string by reference that we can store the new values in
	*
	* @return boolean
	* @access public
	*/
	function processInlineValueInterface(&$asset, &$new_value_str)
	{
		$prefix = $asset->getPrefix();
		$thesaurus =& $asset->getThesaurusRef();
		$value = Array();

		if (isset($_REQUEST[$prefix.'_default'])) {
			$new_value_str = NULL;

		} else {

			$new_terms = array_get_index($_REQUEST, $prefix.'_thes_term', Array());
			foreach ($new_terms as $one_term) {
				if (empty($one_term['assetid'])) continue;
				$term_asset =& $GLOBALS['SQ_SYSTEM']->am->getAsset($one_term['assetid']);
				$term_name = $term_asset->attr('name');
				if ($term_asset->_thesaurus->id != $thesaurus->id) {
					$asset->_tmp['error'][] = translate('thesaurus_meta_wrong_thesaurus', $term_name, $term_asset->_thesaurus->name, $term_asset->_thesaurus->id);
					$GLOBALS['SQ_SYSTEM']->am->forgetAsset($term_asset);
					continue;
				}
				$value[] = $term_name;
				$GLOBALS['SQ_SYSTEM']->am->forgetAsset($term_asset);
			}

			$old_count = count($value);
			$value = array_unique($value);
			if ($old_count != count($value)) {
				$asset->_tmp['error'][] = translate('thesaurus_term_duplicate_removed');
			}
			$value = implode(',', $value);
			$new_value_str = Metadata_Field::encodeValueString($value, Array());

		}

		return TRUE;

	}//end processInlineValueInterface()


	/**
	* Paints the default value selection box
	*
	* @param object	&$asset	asset being painted
	* @param object	&$o		backend outputter
	* @param string	$prefix	prefix for the html doc element name
	*
	* @return boolean
	* @access public
	*/
	function paintDefault(&$asset, &$o, $prefix)
	{

		$write_access = $asset->writeAccess('attributes');
		$default = $asset->attr('default');
		if (!$write_access) {
			echo $default;
			return TRUE;
		}

		$thesaurus =& $asset->getThesaurusRef();

		if (empty($default)) {
			$values = Array();
		} else if (!is_array($default)) {
			$values = explode(',', $default);
		}

		if (!is_array($values)) $values = Array($values);

		$term_assetids = Array();

		foreach ($values as $term) {
			$termid = $thesaurus->getTermIdByName($term);
			$term_assetids[] = $thesaurus->id.':'.$termid;
			$term_info[$termid] = $term;
		}

		multiple_asset_finder($prefix.'_default_term', $term_assetids, Array('thesaurus_term'=>'D'));

		return TRUE;

	}//end paintDefault()


	/**
	* Process the default value selection box
	*
	* @param object	&$asset	asset being painted
	* @param object	&$o		backend outputter
	* @param string	$prefix	prefix for the html doc element name
	*
	* @return boolean
	* @access public
	*/
	function processDefault(&$asset, &$o, $prefix)
	{
		if (!$asset->writeAccess('attributes')) return FALSE;

		$prefix = $asset->getPrefix();
		$thesaurus =& $asset->getThesaurusRef();
		$value = Array();

		$new_terms = array_get_index($_REQUEST, $prefix.'_default_term', Array());
		foreach ($new_terms as $one_term) {
			if (empty($one_term['assetid'])) continue;
			$term_asset =& $GLOBALS['SQ_SYSTEM']->am->getAsset($one_term['assetid']);
			$term_name = $term_asset->attr('name');
			if ($term_asset->_thesaurus->id != $thesaurus->id) {
				$asset->_tmp['error'][] = translate('thesaurus_meta_wrong_thesaurus', $term_name, $term_asset->_thesaurus->name, $term_asset->_thesaurus->id);
				$GLOBALS['SQ_SYSTEM']->am->forgetAsset($term_asset);
				continue;
			}
			$value[] = $term_name;
			$GLOBALS['SQ_SYSTEM']->am->forgetAsset($term_asset);
		}

		$old_count = count($value);
		$value = array_unique($value);
		if ($old_count != count($value)) {
			$asset->_tmp['error'][] = translate('thesaurus_term_duplicate_removed');
		}
		$value = implode(',', $value);

		$default = Metadata_Field::encodeValueString($value, Array());
		$asset->setAttrValue('default', $default);


		return TRUE;

	}//end processDefault()


}//end class

?>
