<?php
/**
* +--------------------------------------------------------------------+
* | Squiz.net Open Source Licence                                      |

* +--------------------------------------------------------------------+
* | Copyright (c), 2003 Squiz Pty Ltd (ABN 77 084 670 600).            |
* +--------------------------------------------------------------------+
* | This source file may be used subject to, and only in accordance    |
* | with, the Squiz Open Source Licence Agreement found at             |
* | http://www.squiz.net/licence.                                      |
* | Make sure you have read and accept the terms of that licence,      |
* | including its limitations of liability and disclaimers, before     |
* | using this software in any way. Your use of this software is       |
* | deemed to constitute agreement to be bound by that licence. If you |
* | modify, adapt or enhance this software, you agree to assign your   |
* | intellectual property rights in the modification, adaptation and   |
* | enhancement to Squiz Pty Ltd for use and distribution under that   |
* | licence.                                                           |
* +--------------------------------------------------------------------+
*
* $Id: bodycopy.inc,v 1.25.2.1 2005/06/28 05:48:27 dmckee Exp $
*
*/

require_once SQ_INCLUDE_PATH.'/asset.inc';

/**
* Bodycopy
*
* Purpose
*
*
* @author  Greg Sherwood <greg@squiz.net>
* @version $Revision: 1.25.2.1 $
* @package MySource_Matrix_Packages
* @subpackage __core__
*/
class Bodycopy extends Asset
{

	/**
	* An array of keywords and their replacements
	* @var array
	*/
	var $keyword_replacements = Array();


	/**
	* Constructor
	*
	* @param int	$assetid	the asset id to be loaded
	*
	*/
	function Bodycopy($assetid=0)
	{
		$this->Asset($assetid);

	}//end constructor


	/**
	* Returns a list of lock types available for this asset type
	*
	* @return Array()
	* @access public
	*/
	function lockTypes()
	{
		$lock_types = parent::lockTypes();
		$lock_types['content'] = ($lock_types['attributes'] | $lock_types['links']);
		return $lock_types;

	}//end lockTypes()


	/**
	* Save a copy of this asset at this point in time
	*
	* This copy gets used when the asset is live and the user does not have write access
	*
	* @return boolean
	* @access public
	*/
	function saveSystemVersion()
	{
		if (!parent::saveSystemVersion()) return false;
		require_once SQ_FUDGE_PATH.'/general/file_system.inc';

		// save a version of the bodycopy as it appears now
		$output = $this->getRawBodycopyContent();

		$e = '|\./\?a=([0-9]+)|';
		$matches = Array();
		preg_match_all($e, $output, $matches);
		$replace_assetids = $matches[1];

		// replace all ./?a=xx links with php echo's
		$e = "|\./\?a=([0-9]+)([^0-9])|";
		$with = '<'.'?php echo $sq_asset_url_list[\\1]; ?'.'>\\2';
		$output = preg_replace($e, $with, $output);

		// save the contents of the bodycopy
		if (!string_to_file($output, $this->data_path.'/.sq_system/.content_file.php')) {
			trigger_localised_error('CORE0047', E_USER_WARNING, $this->name);
			return false;
		}

		// save the links we currently use (./?a=xx)
		if (!string_to_file(serialize($replace_assetids), $this->data_path.'/.sq_system/.notice_links')) {
			trigger_localised_error('CORE0048', E_USER_WARNING, $this->name);
			return false;
		}

		return true;

	}//end saveSystemVersion()


	/**
	* Create this asset
	*
	* @param array	&$link		information used to create the initial link
	* @param array	$bc_data	details for this bodycopy
	*								['attributes']['identifier'] => id for the default div container
	*								['content'] => html content for the default div container
	*
	* @see Asset::create()
	* @return mixed int or false
	* @access public
	*/
	function create(&$link, $bc_data=Array())
	{
		// store this data for later use during the create process in _createAdditional()
		$this->_tmp['bodycopy_create_data'] = $bc_data;

		return parent::create($link);

	}//end create()


	/**
	* Perform any pre-validation required during the creation of this asset
	*
	* Bodycopies ensure a name has been set before they are created
	*
	* @param array	&$link	information used to create the initial link
	*
	* @access private
	* @return boolean
	*/
	function _preCreateCheck(&$link)
	{
		if (!parent::_preCreateCheck($link)) return false;

		$name = trim($this->attr('name'));
		if ($name == '') {
			trigger_localised_error('CORE0083', E_USER_WARNING, $GLOBALS['SQ_SYSTEM']->am->getTypeInfo($this->type(), 'name'));
			return false;
		}

		return true;

	}//end _preCreateCheck()


	/**
	* Perform any additional processing required during the creation of this asset
	*
	* Bodycopies create a DIV when they are created
	*
	* @param array	&$link		information used to create the initial link
	*
	* @access private
	* @return boolean
	*/
	function _createAdditional(&$link)
	{
		// grab the bodycopy data that we stored in the create() function
		$bc_data = $this->_tmp['bodycopy_create_data'];
		unset($this->_tmp['bodycopy_create_data']);

		if (!parent::_createAdditional($link)) return false;

		// create a DIV
		$GLOBALS['SQ_SYSTEM']->am->includeAsset('bodycopy_div');
		$bodycopy_div =& new Bodycopy_DIV();
		$copy_link = Array('asset' => &$this, 'link_type' => SQ_LINK_TYPE_2, 'value' => '', 'sort_order' => 1, 'is_dependant' => 1);
		$bodycopy_div->setAttrValue('name', 'Content DIV');
		$create_success = $bodycopy_div->create($copy_link, $bc_data);
		return $create_success;

	}//end _createAdditional()


	/**
	* Prepares for linking by checking that the link values are valid for this link
	*
	* This function will be called if this asset is the major or minor party in the link, so the side_of_link flag
	* should be checked to work out what side of the link this asset is on. The return value should indicate
	* if any of the link fields were changed.
	*
	* @param object Asset	$asset			the major or minor asset that we are linking to
	* @param string			$side_of_link	the side of the link we are on (major or minor)
	* @param string			$link_type		the type of link we are creating
	* @param string			$value			the value that is to be associated with the link
	* @param string			$sort_order		the position in the links list that this link should take,
	* @param string			$dependant		'0' / '1' on whether the this asset is dependant on the
	*										asset that will be linked by the new link
	* @param string			$exclusive		'0' / '1' on whether the this asset is linked exclusivly
	*										to the asset that will be linked by the new link
	*
	* @return boolean
	* @access public
	*/
	function prepareLink(&$asset, $side_of_link, &$link_type, &$value, &$sort_order, &$dependant, &$exclusive)
	{
		// if this is a bodycopy container then we need to make it a dependant link
		if ($side_of_link == 'major' && is_a($asset, 'bodycopy_container') && $dependant != '1') {
			$dependant = '1';
			return true;
		}

		return false;

	}//end prepareLink()


	/**
	* Returns an array of all the permitted links type, the type asset and the cardinality
	*
	* @return array
	* @access private
	* @see Asset::_getAllowLinks()
	*/
	function _getAllowedLinks()
	{

		return Array(SQ_LINK_TYPE_2 => Array('bodycopy_container' => Array('card' => 'M', 'exclusive' => false)));

	}//end _getAllowedLinks()


	/**
	* Prints out the backend interface for the asset
	*
	* @param object Backend_Outputter	&$o
	*
	* @access public
	*/
	function paintBackend(&$o)
	{
		if (!isset($_REQUEST['asset_ei_screen'])) {
			return parent::paintBackend($o);
		}
		switch ($_REQUEST['asset_ei_screen']) {
			case 'show_popup' :
				require_once(dirname(__FILE__).'/popups/'.trim($_REQUEST['popup_file']));
				exit();
			default :
				return parent::paintBackend($o);

		}//end switch

	}//end paintBackend()


	/**
	* Prints out the Frontend for this asset
	*
	* @return void
	* @access public
	*/
	function printFrontend()
	{
		if (!isset($_REQUEST['asset_ei_screen'])) {
			return parent::printFrontend();
		}
		switch ($_REQUEST['asset_ei_screen']) {
			case 'show_popup' :
				require_once(dirname(__FILE__).'/popups/'.trim($_REQUEST['popup_file']));
				exit();
			default :
				return parent::printFrontend();

		}//end switch

	}//end printFrontend()


	/**
	* Called by the design to print the body of this asset
	*
	* @return boolean
	* @access public
	*/
	function printBody()
	{
		if ($this->useSystemVersion()) {
			if (file_exists($this->data_path.'/.content_file.php')) {
				// create an array of urls that the content file is
				// going to try and use to work out file urls, link hrefs etc
				$sq_asset_url_list = Array();

				$notice_links = unserialize(file_to_string($this->data_path.'/.notice_links'));

				foreach ($notice_links as $assetid) {
					$href = $GLOBALS['SQ_SYSTEM']->am->getAssetHref($assetid);
					if ($href == '') {
						$href = "Javascript: alert('js_translate('link_not_exists')');";
					}
					$sq_asset_url_list[$assetid] = $href;
				}

				ob_start();
					include($this->data_path.'/.content_file.php');
					$content = ob_get_contents();
				ob_end_clean();
				$content = replace_keywords($content, $this->keyword_replacements);

				echo $content;
			}
		} else {
			// get all the containers linked to this bodycopy
			$containers = &$this->getContainers();

			// paint each container
			foreach ($containers as $container) {
				$container->printBody($this->keyword_replacements);
			}
		}

		return true;

	}//end printBody()


	/**
	* Get the name or short name of the asset
	*
	* @param bool	$short_name	whether or not we are after the shortname or the full name
	*
	* @return string
	* @access private
	* @see Asset::_getName()
	*/
	function _getName($short_name=false)
	{
		return $this->attr('name');

	}//end _getName()


	/**
	* To get all of the containers linked to this bodycopy
	*
	* @return Array(&object Container)
	* @access public
	*/
	function &getContainers()
	{
		// get all the containers linked to this bodycopy
		$container_links = $GLOBALS['SQ_SYSTEM']->am->getLinks($this->id, SQ_LINK_TYPE_2, 'bodycopy_container', false);
		if (empty($container_links)) return Array();

		$containers = Array();
		foreach ($container_links as $container_data) {
			$containers[] = &$GLOBALS['SQ_SYSTEM']->am->getAsset($container_data['minorid'], $container_data['minor_type_code']);
		}

		return $containers;

	}//end getContainers()


	/**
	* Determine if there is no content in this bodycopy
	*
	* @access public
	* @return boolean
	*/
	function isEmpty()
	{
		$am = &$GLOBALS['SQ_SYSTEM']->am;
		$containers = $GLOBALS['SQ_SYSTEM']->am->getLinks($this->id, SQ_LINK_TYPE_2, 'bodycopy_container', false);
		foreach ($containers as $container_data) {
			$container = &$am->getAsset($container_data['minorid'], $container_data['minor_type_code']);
			if (!$container->isEmpty()) return false;
		}
		return true;

	}//end isEmpty()


	/**
	* To get the keywords that exist in the content of the bodycopy.
	*
	* @return Array(string)
	* @access public
	*/
	function getKeywords()
	{
		require_once SQ_FUDGE_PATH.'/general/text.inc';
		$content = $this->getRawBodycopyContent();
		$keywords = retrieve_keywords_replacements($content);

		return $keywords;

	}//end getKeywords()


	/**
	* Get the raw content of this bodycopy
	*
	* @return &string
	* @access public
	*/
	function getRawBodycopyContent()
	{
		$containers = &$this->getContainers();
		$contents = '';

		ob_start();
			foreach ($containers as $container) {
				$edit = &$container->getEditFns();
				$edit->paint($container, false, true);
			}
			$contents = ob_get_contents();
		ob_end_clean();

		return $contents;

	}//end getRawBodycopyContent()


	/**
	* Sets the Array of keywords with their replacements
	*
	* @param Array $replacements an array with the keyword as the key and the replacement as the value
	*
	* @return boolean
	* @access public
	*/
	function setKeywordReplacements($replacements=Array())
	{
		if (!is_array($replacements)) return false;
		if (empty($replacements)) return false;

		$this->keyword_replacements = $replacements;
		return true;

	}//end setKeywordReplacements()


}//end class

?>