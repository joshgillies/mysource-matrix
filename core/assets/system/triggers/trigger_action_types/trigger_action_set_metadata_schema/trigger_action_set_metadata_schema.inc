<?php
/**
* +--------------------------------------------------------------------+
* | This MySource Matrix CMS file is Copyright (c) Squiz Pty Ltd       |
* | ABN 77 084 670 600                                                 |
* +--------------------------------------------------------------------+
* | IMPORTANT: Your use of this Software is subject to the terms of    |
* | the Licence provided in the file licence.txt. If you cannot find   |
* | this file please contact Squiz (www.squiz.com.au) so we may provide|
* | you a copy.                                                        |
* +--------------------------------------------------------------------+
*
* $Id: trigger_action_set_metadata_schema.inc,v 1.13 2012/08/30 01:09:14 ewang Exp $
*
*/

require_once SQ_CORE_PACKAGE_PATH.'/system/triggers/trigger_action/trigger_action.inc';

/**
* Trigger_Action_Set_Metadata_Schema
*
* A trigger action that applies or denies a metadata schema
*
* @author  Nathan de Vries <ndvries@squiz.net>
* @version $Revision: 1.13 $
* @package MySource_Matrix_Packages
* @subpackage __core__
*/
class Trigger_Action_Set_Metadata_Schema extends Trigger_Action
{


	/**
	* Execute this action
	* Returns an array of data about what it did, or false on error
	*
	* The settings used by this action are in the form:<BR />
	* <PRE>
	* Array(
	* 	'schemaid'	=> string // the schema to set
	* 	'granted'	=> string // whether to apply or deny the schema
	* 	'cascade'	=> boolean // if true, metadata schemas will be cascaded to children
	* );
	* </PRE>
	*
	* @param array	$settings	the stored settings for this action
	* @param array	&$state		the state that describes the asset the action is executing on
	*
	* @return mixed array|boolean
	* @access public
	*/
	public static function execute($settings, &$state)
	{
		$am =& $GLOBALS['SQ_SYSTEM']->am;
		$mm = $GLOBALS['SQ_SYSTEM']->getMetadataManager();

		// check required settings
		if (empty($settings['schemaid'])) return FALSE;

		if (empty($state['asset'])) {
			// grab the asset if assetid is given, but not the asset.
			if (empty($state['assetid'])) {
				return FALSE;
			} else {
				$state['asset'] = $am->getAsset($state['assetid']);
			}
		}

		if (is_null($state['asset'])) return FALSE;

		$granted = array_get_index($settings, 'granted', TRUE);
		$cascade = array_get_index($settings, 'cascade', FALSE);
		$cascade_to_new = array_get_index($settings, 'cascade_to_new', TRUE);

		$schema = $am->getAsset($settings['schemaid']);
		if (is_null($schema)) return FALSE;
		if ($schema->type() != 'metadata_schema') return FALSE;


		if (!$cascade) {
			$result = $mm->setSchema($state['asset']->id, $schema->id, $granted, $cascade_to_new);
		} else {
			$schema_vars[]	= Array(
								'assetids'			=> Array($state['asset']->id),
								'granted'			=> $granted,
								'schemaid'			=> $settings['schemaid'],
								'cascades'			=> $cascade_to_new,
								'previous_access'	=> NULL,
							  );
			$vars	= Array(
						'schema_changes'	=> $schema_vars,
					  );

			$hh = $GLOBALS['SQ_SYSTEM']->getHipoHerder();
			$errors = $hh->freestyleHIPO('hipo_job_edit_metadata_schemas', $vars);
			$result = empty($errors);
		}


		if (!$result) {
			return FALSE;
		} else {
			return Array(
					'assetid'	=> $state['asset']->id,
					'schemaid'	=> $settings['schemaid'],
					'granted'	=> $granted,
					'cascade'	=> $cascade,
				   );
		}

	}//end execute()


	/**
	* Get the HTML editing interface for this action. Returns the string instead of printing it
	*
	* @param array		$settings		settings that this condition saves in processInterface()
	* @param string		$prefix			unique prefix
	* @param boolean	$write_access	determines whether the interface is editable
	*
	* @return boolean
	* @access public
	*/
	public static function getInterface($settings, $prefix, $write_access=FALSE)
	{
		$current_schemaid = array_get_index($settings, 'schemaid', 0);
		$granted = array_get_index($settings, 'granted', 1);
		$cascade = array_get_index($settings, 'cascade', FALSE);
		$cascade_to_new = array_get_index($settings, 'cascade_to_new', TRUE);

		$options = Array(
					TRUE	=> translate('Apply'),

					FALSE	=> translate('Deny'),

				   );

		ob_start();
			echo '<div class="sq-break-line-inputs">';
			if ($write_access) {
				ob_start();
					combo_box($prefix.'[granted]', $options, FALSE, $granted);
				$combo_box = ob_get_clean();
				echo sprintf(translate('%s the following schema:'), $combo_box).' ';

				asset_finder($prefix.'[schemaid]', $current_schemaid, Array('metadata_schema' => 'I'));
				echo '<br />';
				check_box($prefix.'[cascade]', '1', $cascade);
				label(translate('Cascade schema changes'), $prefix.'[cascade]');

				echo '<br />';
				check_box($prefix.'[cascade_to_new]', '1', $cascade_to_new);
				label(translate('Cascade this new schema to newly-created children'), $prefix.'[cascade_to_new]');


			} else {
				if (!empty($current_schemaid)) {
					$schema_info = $GLOBALS['SQ_SYSTEM']->am->getAssetInfo(Array($current_schemaid));
					echo sprintf(translate('%s the following schema:'), $options[$granted]).' ';

					echo get_asset_tag_line($current_schemaid);
				} else {
					echo sprintf(translate('%s the following schema:'), $options[$granted]).' ';

					echo '<em>'.translate('No schema specified').'</em>';

				}
				echo '<br />';
				echo '<img src="'.sq_web_path('lib').'/web/images/'.($cascade ? 'tick' : 'cross').'.png" alt="'.($cascade ? translate('Yes') : translate('No')).'" /> ';


				echo translate('Cascade schema changes');

				echo '<br />';
				echo '<img src="'.sq_web_path('lib').'/web/images/'.($cascade_to_new ? 'tick' : 'cross').'.png" alt="'.($cascade_to_new ? translate('Yes') : translate('No')).'" /> ';


				echo translate('Cascade this new schema to newly-created children');

			}
			echo '</div>';

			$output = ob_get_contents();
		ob_end_clean();

		return $output;

	}//end getInterface()


	/**
	* Function that handles the conversion of interface to settings
	* together with settings it is expected to populate the hash object
	*
	* @param array	&$settings		a container for any data the action might want to save
	* @param string	$request_data	array of data corresponding to this action as
	*								specified by the $prefix in getInterface.
	*
	* @return boolean
	* @access public
	*/
	public static function processInterface(&$settings, $request_data)
	{
		$schema_info = array_get_index($request_data, 'schemaid', Array('assetid' => 0));
		$settings['schemaid'] = array_get_index($schema_info, 'assetid', 0);
		$settings['granted'] = array_get_index($request_data, 'granted', TRUE);
		$settings['cascade'] = array_get_index($request_data, 'cascade', FALSE);
		$settings['cascade_to_new'] = array_get_index($request_data, 'cascade_to_new', FALSE);
		return FALSE;

	}//end processInterface()


	/**
	* Get the list of locks that the action needs acquire before executing
	*
	* @param array	$settings	a container for any data the action might want to save
	* @param array	&$state		the state that describes the asset the action is executing on
	*
	* @return array
	* @access public
	*/
	public static function getLocks($settings, &$state)
	{
		return Array($state['assetid'] => Array('metadata'));

	}//end getLocks()


}//end class

?>
