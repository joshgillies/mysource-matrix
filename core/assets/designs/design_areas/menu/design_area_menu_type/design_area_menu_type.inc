<?php
/**
* +--------------------------------------------------------------------+
* | Squiz.net Open Source Licence                                      |
* +--------------------------------------------------------------------+
* | Copyright (c), 2003 Squiz Pty Ltd (ABN 77 084 670 600).            |
* +--------------------------------------------------------------------+
* | This source file may be used subject to, and only in accordance    |
* | with, the Squiz Open Source Licence Agreement found at             |
* | http://www.squiz.net/licence.                                      |
* | Make sure you have read and accept the terms of that licence,      |
* | including its limitations of liability and disclaimers, before     |
* | using this software in any way. Your use of this software is       |
* | deemed to constitute agreement to be bound by that licence. If you |
* | modify, adapt or enhance this software, you agree to assign your   |
* | intellectual property rights in the modification, adaptation and   |
* | enhancement to Squiz Pty Ltd for use and distribution under that   |
* | licence.                                                           |
* +--------------------------------------------------------------------+
*
* $Id: design_area_menu_type.inc,v 1.66.2.2 2005/07/15 00:46:51 tbarrett Exp $
*
*/


require_once SQ_CORE_PACKAGE_PATH.'/designs/design_area/design_area.inc';

/**
* Design_Area_Menu_Type
*
* Purpose
*
*
* @author  Blair Robertson <blair@squiz.net>
* @version $Revision: 1.66.2.2 $
* @package MySource_Matrix_Packages
* @subpackage __core__
*/
class Design_Area_Menu_Type extends Design_Area
{


	/**
	* Returns an array of all the permitted links type, the type asset and the cardinality
	*
	* @see Asset::_getAllowLinks()
	* @access private
	*/
	function _getAllowedLinks()
	{
		return Array(
				SQ_LINK_TYPE_1	=> Array(),
				SQ_LINK_TYPE_2	=> Array(),
				SQ_LINK_TYPE_3	=> Array(),
				SQ_LINK_NOTICE	=> Array('design_area_menu_type' => Array('card' => 'M', 'exclusive' => false)),
			   );

	}//end _getAllowedLinks()


	/**
	* Set the value for the passed variable to the passed value
	*
	* @param string		$name	the name of the attribute
	* @param string		$value	the new value of the attribute
	*
	* @return boolean
	* @access public
	*/
	function setAttrValue($name, $value)
	{
		// if they are trying to set an asset position dependent setting
		if (substr($name, 0, 9) == 'settings.') {
			// The name is in the form 'settings.[var_name].[setting type]'
			// where setting type is either 'normal', 'heirarchy' or 'current'
			$split = explode('.', $name);
			if (count($split) != 3) {
				trigger_localised_error('CORE0173', E_USER_WARNING, $name);
				return false;
			}
			switch ($split[2]) {
				case 'normal'    :
				case 'hierarchy' :
				case 'current'   :
					$new_value = $this->vars['settings']['value'];
					if (!is_array($new_value)) $new_value = Array();
					if (!isset($new_value[$split[1]])) {
						$new_value[$split[1]] = Array();
					}
					$new_value[$split[1]][$split[2]] = $value;
					$name  = 'settings';
					$value = $new_value;
				break;

				default :
					trigger_localised_error('CORE0174', E_USER_WARNING, $split[2]);
					return false;
			}// end switch

		// if they are trying to set a level, so some validation
		} else if ($name == 'level') {
			switch (strtolower($value)) {
				case 'top':
					$value = 0;
				break;
				case 'sub':
					$value = 1;
				break;
				case 'current':
					$value = -1;
				break;
				case 'children':
					$value = -2;
				break;
				default :
					$value = (int) $value;
			}// end switch

		}// end if

		return parent::setAttrValue($name, $value);

	}//end setAttrValue()


	/**
	* Easy way to get the value of an attribute
	*
	* @param string	$name
	*
	* @return mixed
	* @access public
	*/
	function attr($name)
	{
		// if they are trying to set an asset position dependent setting
		if (substr($name, 0, 9) == 'settings.') {
			// The name is in the form 'settings.[var_name].[setting type]'
			$split = explode('.', $name);
			if (count($split) == 3) {
				$settings = $this->attr('settings'); // do this so that any var references will be taken into account
				if (isset($settings[$split[1]][$split[2]])) {
					return $settings[$split[1]][$split[2]];
				}
			}// end if
		}// end if

		// if we hit this, just send it upwards
		return parent::attr($name);

	}//end attr()


	/**
	* Returns an array of Array(id_name => Array(var)) for all var references that are needed by this design area
	*
	* @return array
	* @access public
	*/
	function getVarReferences()
	{
		$var_refs = parent::getVarReferences();
		$sub_menu = &$this->getSubMenu();
		if (!is_null($sub_menu)) {
			$sub_var_refs = $sub_menu->getVarReferences();
			for (reset($sub_var_refs); null !== ($id_name = key($sub_var_refs)); next($sub_var_refs)) {
				if (!isset($var_refs[$id_name])) {
					$var_refs[$id_name] = Array();
				}
				foreach ($sub_var_refs[$id_name] as $var) {
					if (in_array($var, $var_refs[$id_name])) continue;
					$var_refs[$id_name][] = $var;
				}// end foreach
			}// end foreach
		}// end if

		return $var_refs;

	}//end getVarReferences()


	/**
	* Set's the values for the var references values (registered in $this->var_references)
	*
	* @param array $var_ref_values	array of values - Array(id_name => Array(var => [value]))
	*
	* @access public
	*/
	function setVarReferenceValues($var_ref_values)
	{
		$settings = $this->attr('settings');
		$settings_changed = false;
		foreach ($this->vars['var_references']['value'] as $var_name => $info) {
			// if this is a setting and it is available in the var_ref_values
			if (substr($var_name, 0, 9) == 'settings.' && isset($var_ref_values[$info['id_name']][$info['var']])) {
				// The name is in the form 'settings.[var_name].[setting type]'
				$split = explode('.', $var_name);
				if (count($split) == 3) {
					if (!isset($settings[$split[1]])) {
						$settings[$split[1]] = Array();
					}
					$settings[$split[1]][$split[2]] = $var_ref_values[$info['id_name']][$info['var']];
					$settings_changed = true;
				}// end if
			}// end if
		}// end foreach

		if ($settings_changed) {
			$this->_tmp['var_reference_values']['settings'] = $settings;
		}

		// send our custom array to the parent fn
		parent::setVarReferenceValues($var_ref_values);
		$sub_menu = &$this->getSubMenu();
		if (!is_null($sub_menu)) {
			// now send the original array to the sub
			$sub_menu->setVarReferenceValues($var_ref_values);
		}// end if

	}//end setVarReferenceValues()


	/**
	* Returns the link to the sub menu for this menu (if any)
	*
	* @return Array()
	* @access public
	*/
	function getSubMenuLink()
	{
		if (!isset($this->_tmp['sub_menu_link'])) {
			$this->_tmp['sub_menu_link'] = $GLOBALS['SQ_SYSTEM']->am->getLink($this->id, SQ_LINK_NOTICE, 'design_area_menu_type', false, 'sub_menu');
		}
		return $this->_tmp['sub_menu_link'];

	}//end getSubMenuLink()


	/**
	* Returns the sub menu for this menu (if any)
	*
	* @return mixed Design_Area_Menu_Type or null
	* @access public
	*/
	function &getSubMenu()
	{
		$link = $this->getSubMenuLink();
		if (empty($link)) {
			$null = null;
			return $null;
		} else {
			return $GLOBALS['SQ_SYSTEM']->am->getAsset($link['minorid'], $link['minor_type_code'], true);
		}

	}//end getSubMenu()


	/**
	* Returns the parent menu for this menu (assuming it is a sub menu)
	*
	* @return mixed Design_Area_Menu_Type or null
	* @access public
	*/
	function &getParentMenu()
	{
		if (!isset($this->_tmp['parent_menu_link'])) {
			$this->_tmp['parent_menu_link'] = $GLOBALS['SQ_SYSTEM']->am->getLink($this->id, SQ_LINK_NOTICE, 'design_area_menu_type', false, 'sub_menu', 'minor');
		}
		if (empty($this->_tmp['parent_menu_link'])) {
			$null = null;
			return $null;
		} else {
			return $GLOBALS['SQ_SYSTEM']->am->getAsset($this->_tmp['parent_menu_link']['majorid'], $this->_tmp['parent_menu_link']['major_type_code'], true);
		}

	}//end getParentMenu()


	/**
	* Called whenever any type of link is changed, allows caching of objects, links and other stuff
	* to occur but not cause integrity issues during script execution
	* returns true it it's successfull
	*
	* @return boolean
	* @access private
	*/
	function linksUpdated()
	{
		if (!parent::linksUpdated()) return false;
		unset($this->_tmp['sub_menu_link']);
		unset($this->_tmp['parent_menu_link']);
		return true;

	}//end linksUpdated()


	/**
	* Returns whether the passed setting exists or not
	*
	* @return boolean
	* @access public
	*/
	function settingExists($name)
	{
		$settings = $this->attr('settings'); // do like this to take into account var refs
		return !empty($settings[$name]);

	}//end settingExists()


	/**
	* Outputs either the straight HTML or PHP code that is needed for this design area to be represented
	*
	* @param object Design	$design the design for which we are currently printing
	*
	* @return boolean
	* @access public
	*/
	function printArea(&$design)
	{
		echo '<', '?php
		';
		$this->printStaticInitOutput($design);

		$parent_menu = &$this->getParentMenu();
		// if we aren't a sub menu
		if (is_null($parent_menu)) {
			$this->printInitOutput($design);
			echo '
		if (!empty($ASSET_LINEAGE) && !empty($ASSET_LINEAGE[$'.$this->attr('id_name').'_level])) {
			';
			$this->printDataCollection($design);
			$parent_assetid_name = '$ASSET_LINEAGE[$'.$this->attr('id_name').'_level][\'assetid\']';
		} else {
			$parent_assetid_name = '$'.$parent_menu->attr('id_name').'_row[\'assetid\']';
		}// end if

		echo '
			$'.$this->attr('id_name').'_settings = '.var_export($this->_getSettingsArray(), true).';
			if (!empty($GLOBALS[\'MENU_DATA\']['.$parent_assetid_name.'])) {
		?', '>';
		if (!parent::printArea($design)) return false;
		echo '<', '?php
			}// end if subs '.$this->attr('id_name').'
		';
		// if we aren't a sub menu
		if (is_null($parent_menu)) {
			echo '
		}// end if found in ASSET_LINEAGE
			';
		}// end if

		echo '
		?', '>';

		return true;

	}//end printArea()


	/**
	* Performs any outputting needed to by all design areas of this menu type
	* NOTE: assumes PHP tags are open
	*
	* @param object Design	$design	the design for which we are currently printing
	*
	* @access public
	*/
	function printStaticInitOutput(&$design)
	{
		// Stuff that is only needed once per design file
		if (empty($GLOBALS['SQ_'.__CLASS__.__FUNCTION__.'_RUN_'.$design->id])) {
			echo '
			$db = &$GLOBALS[\'SQ_SYSTEM\']->db;

			require_once SQ_FUDGE_PATH.\'/db_extras/db_extras.inc\';

			$GLOBALS[\'MENU_DATA\'] = Array();

			function menu_get_assets($majorids)
			{
				$assetids = Array();
				$majorids_str = \'\';
				foreach ($majorids as $id) {
					if (empty($GLOBALS[\'MENU_DATA\'][$id])) {
						$majorids_str .= $id.\',\';
					} else {
						foreach ($GLOBALS[\'MENU_DATA\'][$id] as $row) {
							$assetids[] = (int) $row[\'assetid\'];
						}
					}
				}

				if (empty($majorids_str)) return $assetids;

				static $USERIDS_COND = null;

				$db = &$GLOBALS[\'SQ_SYSTEM\']->db;

				if (is_null($USERIDS_COND)) {
					// if they are logged in add their parents to the list
					if ($GLOBALS[\'SQ_SYSTEM\']->userRoot() || $GLOBALS[\'SQ_SYSTEM\']->userSystemAdmin()) {
						$USERIDS_COND = \'\';
					} else {
						$userids = array_keys($GLOBALS[\'SQ_SYSTEM\']->am->getParents($GLOBALS[\'SQ_SYSTEM\']->user->id, \'user_group\', false));
						array_push($userids, 0, $GLOBALS[\'SQ_SYSTEM\']->user->id);
						//add the public user here, or any backend users wont be able to see the menu
						$public_user = $GLOBALS["SQ_SYSTEM"]->am->getSystemAsset("public_user");
						array_push($userids, $public_user->id);
						for (reset($userids); null !== ($i = key($userids)); next($userids)) $userids[$i] = $db->quote($userids[$i]);
						$USERIDS_COND = \'AND p.userid  IN (\'.implode(\',\', $userids).\')\';
					}

					if (!empty($USERIDS_COND)) {
						$USERIDS_COND .= \'
										  GROUP BY a.assetid, l.majorid, a.type_code, a.status, a.name, a.short_name, pt.path, l.sort_order
										  HAVING MIN(p.granted) <> 0\';
					}
				}

				$sql    = \'SELECT DISTINCT a.assetid, l.majorid, a.type_code, a.status, a.name, a.short_name, pt.path, l.sort_order
						   FROM \'.SQ_TABLE_RUNNING_PREFIX.\'ast a
						     INNER JOIN \'.SQ_TABLE_RUNNING_PREFIX.\'ast_lnk l ON a.assetid = l.minorid
						     INNER JOIN \'.SQ_TABLE_RUNNING_PREFIX.\'ast_path pt ON a.assetid = pt.assetid \';
				if (!empty($USERIDS_COND)) {
				$sql   .= \'
						     INNER JOIN \'.SQ_TABLE_RUNNING_PREFIX.\'ast_perm p ON a.assetid = p.assetid \';
				}
				$where  = \'l.majorid IN (\'.substr($majorids_str, 0, -1).\')
						     AND \'.db_extras_bitand($db, \'l.link_type\', SQ_SC_LINK_FRONTEND_NAV).\' > 0 \';
				$where  = $GLOBALS[\'SQ_SYSTEM\']->constructRollbackWhereClause($where, \'a\');
				$where  = $GLOBALS[\'SQ_SYSTEM\']->constructRollbackWhereClause($where, \'l\');
				if (!empty($USERIDS_COND)) {
					$where  = $GLOBALS[\'SQ_SYSTEM\']->constructRollbackWhereClause($where, \'p\');
				}
				$where  = $GLOBALS[\'SQ_SYSTEM\']->constructRollbackWhereClause($where, \'pt\');
				$where .= \' \'.$USERIDS_COND .\'
						   ORDER BY l.majorid, l.sort_order\';

				$result = $db->query($sql.$where);
				assert_valid_db_result($result);

				$assetids = Array();
				while (DB_OK === $result->fetchInto($row)) {
					if (!($row[\'status\'] & (SQ_STATUS_LIVE | SQ_STATUS_LIVE_APPROVAL))) {
						$menu_asset = &$GLOBALS[\'SQ_SYSTEM\']->am->getAsset($row[\'assetid\']);
						$read_access = $menu_asset->readAccess();

						$row[\'name\'] = $menu_asset->name;
						$row[\'short_name\'] = $menu_asset->short_name;

						if ($row[\'status\'] & SQ_SC_STATUS_NOT_LIVE) {
							// somewhere between under construction and live so we show this by altering the name
							$row[\'name\']       = \'(( \'.$row[\'name\'].\' ))\';
							$row[\'short_name\'] = \'(( \'.$row[\'short_name\'].\' ))\';
						}

						$GLOBALS[\'SQ_SYSTEM\']->am->forgetAsset($menu_asset);
						unset($menu_asset);
						if (!$read_access) continue;
					}
					$assetids[] = $row[\'assetid\'];
					if (!isset($GLOBALS[\'MENU_DATA\'][$row[\'majorid\']])) $GLOBALS[\'MENU_DATA\'][$row[\'majorid\']] = Array();
					$GLOBALS[\'MENU_DATA\'][$row[\'majorid\']][$row[\'assetid\']] = $row;

				}
				$result->free();

				return $assetids;

			}// end menu_get_assets()

			';
			$GLOBALS['SQ_'.__CLASS__.__FUNCTION__.'_RUN_'.$design->id] = true;
		}

		$sub_menu = &$this->getSubMenu();
		if (!is_null($sub_menu)) {
			$sub_menu->printStaticInitOutput($design);
		}

	}//end printStaticInitOutput()


	/**
	* Performs any outputting needed to intialise this instance of the menu type
	*
	* @param object Design	$design	the design for which we are currently printing
	*
	* @access public
	*/
	function printInitOutput(&$design)
	{
		$level = (int) $this->attr('level');
		$parent_menu = &$this->getParentMenu();
		if (!is_null($parent_menu)) {
			// we are a sub menu
			if ($level == 0) {
				// we dont have a specific level to print (or they want to print the top level - thats wierd)
				// so dynamically get the level to print based on our parent's level at runtime
				$level = null;
				echo '
				$'.$this->attr('id_name').'_level = $'.$parent_menu->attr('id_name').'_level + 1;';
			}
		}

		if (!is_null($level)) {
			if ($level < 0) {
				echo '
				$'.$this->attr('id_name').'_level = (count($ASSET_LINEAGE) -2) + '.(-1 * ($level + 1)).';';
			} else {
				echo '
				$'.$this->attr('id_name').'_level = '.$level.';';
			}
		}

		$sub_menu = &$this->getSubMenu();
		if (!is_null($sub_menu)) {
			$sub_menu->printInitOutput($design);
		}

	}//end printInitOutput()


	/**
	* Outputs the way for this menu type to get their information and place it in the
	* $GLOBALS['MENU_DATA'] array
	*
	* @param object Design	$design the design for which we are currently printing
	*
	* @access public
	*/
	function printDataCollection(&$design)
	{
		//// SHOULD BE OVERRIDDEN ////

		// the _assetids array holds all assetids that the sub level (if any) will printing kids of
		// if the show_subs is only on_current the asset for the kids level in the asset lineage is used
		echo '
		$'.$this->attr('id_name').'_assetids = Array(); // menu_get_assets(majorids);
		$'.$this->attr('id_name').'_urls     = $am->getAssetURL($'.$this->attr('id_name').'_assetids);

		';

		$sub_menu = &$this->getSubMenu();
		if (!is_null($sub_menu)) {
			$sub_menu->printDataCollection($design);
		}

	}//end printDataCollection()


	/*
	* Outputs the var either as straight HTML or PHP code, depending on the type
	*
	* @param string	$var			the name of the var to print out
	* @param Array	$args			array of any extra arguments that existed in the print command
	* @param string	$value_prefix	PHP code to wrap put before the value before outputting it
	* @param string	$value_suffix	PHP code to wrap put after  the value before outputting it
	*
	* @access public
	*/
	function printVar($var, $args, $value_prefix='', $value_suffix='')
	{
		// if they are trying to set an asset position dependent setting
		if (substr($var, 0, 9) == 'settings.') {
			// The name is in the form 'settings.[var_name].[setting type]'
			list(,$setting_name) = explode('.', $var, 2);
			if ($setting_name && $this->settingExists($setting_name)) {

				// we got php code ? OK, we need to use a switch statement
				if ($this->_settingHasPHPCode($setting_name)) {
					$settings = $this->attr('settings');
					echo '<', '?php switch ($'.$this->attr('id_name').'_current_setting){ ';
					foreach ($settings[$setting_name] as $case => $value) {
						echo 'case \''.addslashes($case).'\' : ?','>', $value, '<','?php break; ';
					}
					echo '}// end switch ?', '>';

				// no php code ? cool, we can read from the array
				} else {
					echo '<', '?php echo $'.$this->attr('id_name').'_settings[\''.$setting_name.'\'][$'.$this->attr('id_name').'_current_setting]; ?', '>';

				}// end if


			}// end if
		} else {

			// if we are not in the asset looping section then we need to print the details of
			// our parent asset - if we are not a sub menu there is nothing we can do
			if (empty($this->_tmp['outputting_asset_section'])) {
				$parent_menu = &$this->getParentMenu();
				// if we aren't a sub menu, there is nothing we can do
				if (is_null($parent_menu)) {
					$id_name = '';
				} else {
					$id_name = $parent_menu->attr('id_name');
				}
			// otherwise we are in the asset section and we want to print our data
			} else {
				$id_name = $this->attr('id_name');

			}

			switch ($var) {
				case 'assetid' :
					if ($id_name) {
						echo '<', '?php echo $'.$id_name.'_row[\'assetid\']; ?', '>';
					}
					break;

				case 'asset_link' :
					if ($id_name) {
						echo '<', '?php echo $'.$id_name.'_urls[$'.$id_name.'_row[\'assetid\']].((SQ_LIMBO_EDITING) ? \'/\'.SQ_CONF_LIMBO_SUFFIX : \'\'); ?', '>';
					}
					break;

				case 'asset_short_name' :
					if ($id_name) {
						echo '<', '?php echo ', $this->_escapeVar($value_prefix.'htmlspecialchars($'.$id_name.'_row[\'short_name\'])'.$value_suffix, $args), '; ?', '>';
					}
					break;

				case 'asset_name' :
					if ($id_name) {
						echo '<', '?php echo ', $this->_escapeVar($value_prefix.'htmlspecialchars($'.$id_name.'_row[\'name\'])'.$value_suffix, $args), '; ?', '>';
					}
					break;

				case 'asset_name_linked' :
				case 'asset_short_name_linked' :
					if ($id_name) {

						$name_var = substr($var, 0, -7);

						if ($this->attr('self_link')) {
							echo '<a href="', $this->printVar('asset_link', Array()), '">', $this->printVar($name_var, Array(), $value_prefix, $value_suffix), '</a>';
						} else {
							echo '<', '?php ', "\n";
							echo ' if ($'.$id_name.'_current_setting == \'current\') { ', "\n";
							echo '?', '>', $this->printVar($name_var, Array(), $value_prefix, $value_suffix), '<', '?php ', "\n";
							echo '} else { ', "\n";
							echo '?', '><a href="', $this->printVar('asset_link', Array()), '">', $this->printVar($name_var, Array(), $value_prefix, $value_suffix), '</a><', '?php ', "\n";
							echo '}// end if ?', '>';
						}// end if

					}// end if
					break;

				case 'asset_thumbnail' :
					if ($id_name) {
						echo '<', '?php ';
						echo '$link = $GLOBALS[\'SQ_SYSTEM\']->am->getLink($'.$id_name.'_row[\'assetid\'], SQ_LINK_NOTICE, \'thumbnail\', true, \'thumbnail\');'."\n";
						echo 'if (!empty($link)) {'."\n";
						echo '$thumbnail = &$GLOBALS[\'SQ_SYSTEM\']->am->getAsset($link[\'minorid\']);'."\n";
						echo 'echo $thumbnail->printImageTag($'.$id_name.'_row[\'name\'], \'\', true);'."\n";
						echo '}'."\n";
						echo '?', '>';
					}
					break;

				case 'asset_thumbnail_url' :
					if ($id_name) {
						echo '<', '?php ';
						echo '$link = $GLOBALS[\'SQ_SYSTEM\']->am->getLink($'.$id_name.'_row[\'assetid\'], SQ_LINK_NOTICE, \'thumbnail\', true, \'thumbnail\');'."\n";
						echo 'if (!empty($link)) {'."\n";
						echo '$thumbnail = &$GLOBALS[\'SQ_SYSTEM\']->am->getAsset($link[\'minorid\']);'."\n";
						echo 'echo $thumbnail->getURL($'.$id_name.'_row[\'name\']);'."\n";
						echo '}'."\n";
						echo '?', '>';
					}
					break;

				default :
					parent::printVar($var, $args);
			}// end switch
		}// end if

	}//end printVar()


	/*
	* Returns the settings array that will be need to be var_exported
	*
	* @access public
	*/
	function _settingHasPHPCode($setting_name)
	{
		$settings = $this->attr('settings');
		// OK we need out find out if any of the values for this setting have PHP code that needs to be
		$has_php_code = false;
		foreach ($settings[$setting_name] as $case => $value) {
			// we know that this will be the long format because only our design areas have put this in
			if (strpos($value, '<'.'?php') !== false) return true;
		}

	}//end _settingHasPHPCode()


	/*
	* Returns the settings array that will be need to be var_exported
	*
	* @access public
	*/
	function _getSettingsArray()
	{
		$settings = $this->attr('settings');
		// OK we need out find out if any of the values for this setting have PHP code that needs to be
		$names = array_keys($settings);
		foreach ($names as $setting_name) {
			// we don't want any of the settings that need to be processed
			if ($this->_settingHasPHPCode($setting_name)) {
				unset($settings[$setting_name]);
			}
		}// end if

		return $settings;

	}//end _getSettingsArray()


}//end class

?>
