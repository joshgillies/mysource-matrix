<?php
/**
* +--------------------------------------------------------------------+
* | This MySource Matrix CMS file is Copyright (c) Squiz Pty Ltd       |
* | ACN 084 670 600                                                    |
* +--------------------------------------------------------------------+
* | IMPORTANT: Your use of this Software is subject to the terms of    |
* | the Licence provided in the file licence.txt. If you cannot find   |
* | this file please contact Squiz (www.squiz.net) so we may provide   |
* | you a copy.                                                        |
* +--------------------------------------------------------------------+
*
* $Id: design_area_show_if.inc,v 1.14 2007/12/06 04:28:50 lwright Exp $
*
*/


require_once SQ_CORE_PACKAGE_PATH.'/designs/design_area/design_area.inc';

/**
* Design_Area_Show_If
*
* Purpose
*	Show different content depending on certain conditions evaluated at runtime
*
* @author  Avi Miller <Avi Miller@squiz.net>
* @version $Revision: 1.14 $
* @package MySource_Matrix_Packages
* @subpackage __core__
*/
class Design_Area_Show_If extends Design_Area
{


	/**
	* Constructor
	*
	* @param string	$assetid	The asset ID to load
	*
	*/
	function __construct($assetid=0)
	{
		parent::__construct($assetid);

	}//end constructor


	/**
	* Queue the setting of the value of an attribute
	*
	* @param string	$name	the name of the attribute
	* @param string	$value	the new value of the attribute
	*
	* @return boolean
	* @access public
	* @see asset:setAttrValue()
	*/
	public function setAttrValue($name, $value)
	{
		if ((substr($name, 0, 10) == 'condition_') && ($name != 'condition_data')) {
			// this is some condition data we need to save and pass to the
			//  condition asset's evaluate() function
			$data_key = substr($name, 10);

			$condition_data = $this->attr('condition_data');
			$condition_data[$data_key] = $value;
			return parent::setAttrValue('condition_data', $condition_data);
		} else {
			return parent::setAttrValue($name, $value);
		}

	}//end setAttrValue()


	/**
	* Print code that initialises this design area and should always be printed in place of the AREA tag
	*
	* This function can be overridden by children
	*
	* @return void
	* @access protected
	*/
	protected function _printInitCode()
	{
		$condition = $this->attr('condition');
		$condition_data = $this->attr('condition_data');
		$condition_data['id_name'] = $this->attr('id_name');
		$id_name = $this->attr('id_name');
		$cond_var_name = '$'.$this->attr('id_name').'_condition_result';
		echo '<','?php
		$GLOBALS[\'SQ_SYSTEM\']->am->includeAsset(\'condition_'.$condition.'\');
		$'.$id_name.'_condition_data = '.var_export($condition_data, TRUE).';
		'.$cond_var_name.' = condition_'.$condition.'::evaluate($ASSET, $'.$id_name.'_condition_data);';
		echo '?', '>
		';

	}//end _printInitCode()


	/**
	* Print code that actually results in HTML output to the browser for this design area
	*
	* This function is called at the AREA tag if print != no, and at the point of any PRINT
	* tags that reference this area.
	*
	* @return void
	* @access protected
	*/
	protected function _printPaintingCode()
	{
		$then = $this->attr('then_contents');
		$else = $this->attr('else_contents');
		$cond_var_name = '$'.$this->attr('id_name').'_condition_result';

		echo '<','?php';
		echo '
			if ('.$cond_var_name.') {
		';

		// the multiple echo statements are required to get content to print at line 1,
		// character 1 of the potential output (i.e. the DocType). Otherwise, it may get
		// ignored
		if (!empty($then)) {
			echo '?', '>'."\n";
			foreach ($then as $index => $element) {
				$this->_printContentItemCode($element);
			}
			echo '<', '?php ; '."\n";
		} else {
			echo 'echo \'\';'."\n";
		}

		echo '} else {'."\n";

		if (!empty($else)) {
			echo '?', '>'."\n";
			foreach ($else as $index => $element) {
				$this->_printContentItemCode($element);
			}
			echo '<', '?php ; ';
		} else {
			echo 'echo \'\';';
		}

		echo '}
		?','>
		';
		return TRUE;

	}//end _printPaintingCode()


	/**
	* Returns true if this content generated by this design area can be cached
	*
	* @return boolean
	* @access public
	*/
	public function canBeCached()
	{
		return FALSE;

	}//end canBeCached()


	/**
	* Get the names of attributes for this DA that cannot be set in the parse file
	*
	* Design Area attributes that are not mentioned in the parse file are normally set to defaults
	* when parsing the design.  Attributes returned by this function are exempted from that process.
	*
	* @return array
	* @access public
	*/
	public function getProtectedAttrs()
	{
		$attrs = parent::getProtectedAttrs();
		$attrs[] = 'condition_data';
		return $attrs;

	}//end getProtectedAttrs()


}//end class
?>