<?php
/**
* +--------------------------------------------------------------------+
* | Squiz.net Open Source Licence                                      |
* +--------------------------------------------------------------------+
* | Copyright (c), 2003 Squiz Pty Ltd (ABN 77 084 670 600).            |
* +--------------------------------------------------------------------+
* | This source file may be used subject to, and only in accordance    |
* | with, the Squiz Open Source Licence Agreement found at             |
* | http://www.squiz.net/licence.                                      |
* | Make sure you have read and accept the terms of that licence,      |
* | including its limitations of liability and disclaimers, before     |
* | using this software in any way. Your use of this software is       |
* | deemed to constitute agreement to be bound by that licence. If you |
* | modify, adapt or enhance this software, you agree to assign your   |
* | intellectual property rights in the modification, adaptation and   |
* | enhancement to Squiz Pty Ltd for use and distribution under that   |
* | licence.                                                           |
* +--------------------------------------------------------------------+
*
* $Id: design_css.inc,v 1.9.2.1 2005/06/27 01:31:05 mnyeholt Exp $
*
*/


require_once SQ_CORE_PACKAGE_PATH.'/designs/design/design.inc';

/**
* Design_Css
*
* Purpose
* This is a CSS-specific asset which is parsed on upload/edit and can be linked
* to an existing design. This asset supports all the design_areas that can be used
* in standard Designs
*
* @author  Avi Miller <avi.miller@squiz.net>
* @version $Revision: 1.9.2.1 $
* @package MySource_Matrix_Packages
* @subpackage __core__
*/
class Design_Css extends Design
{


	/**
	* Constructor
	*
	* @param int	$assetid	the asset id to be loaded
	*
	*/
	function Design_Css($assetid=0)
	{
		$this->Design($assetid);
		// We store a temp var that indicates whether the cache has been updated
		// on this request
		$this->_tmp['updated_cache'] = false;
	}//end constructor


	/**
	* Perform any pre-validation required during the creation of this asset
	*
	* CSS Files ensure their name is valid before they are created
	*
	* @param array	&$link	information used to create the initial link
	*
	* @access private
	* @return boolean
	*/
	function _preCreateCheck(&$link)
	{
		if (!parent::_preCreateCheck($link)) return false;

		$new_name = strtolower(trim($this->attr('id_name')));

		// no ampersands in css file name
		$new_name = str_replace('&', '_and_',  $new_name);

		// no spaces in css file name
		$new_name = preg_replace('/\\s+/', '_', $new_name);

		// taken (in part) from info here -> http://www.w3.org/Addressing/URL/5_URI_BNF.html
		$new_name = preg_replace('/[^a-zA-Z0-9\-$_@.!*~(),]/', '',  $new_name);

		// ensure a virtual .css file extension
		if (substr($new_name, -4) != '.css') {
			$new_name = $new_name.'.css';
		}

		$this->setAttrValue('id_name', $new_name);

		return true;

	}//end _preCreateCheck()


	/*
	* Returns an array of all the permitted links type, the type asset and the cardinality
	*
	* @return array
	* @access private
	* @see Asset::_getAllowLinks()
	*/
	function _getAllowedLinks()
	{
		return Array(
				SQ_LINK_TYPE_1	=> Array(),
				SQ_LINK_TYPE_2	=> Array(
									'design_css_customisation'	=> Array(
																	'card'		=> 'M',
																	'exclusive'	=> false,
																   ),
									'file'						=> Array(
																	'card'		=> 'M',
																	'exclusive'	=> false,
																   ),
								   ),
				SQ_LINK_TYPE_3	=> Array(
									'design_area'	=> Array(
														'card'		=> 'M',
														'exclusive'	=> false,
													   ),
									'file'			=> Array(
														'card'		=> 'M',
														'exclusive'	=> false,
													   ),
								   ),
				SQ_LINK_NOTICE	=> Array(),
			   );

	}//end _getAllowedLinks()


	/**
	* Creates a link between this asset and the passed asset, of a certain type
	* and returns the linkid of the created link
	*
	* @param object Asset	$minor		the minor asset that we are linking to
	* @param string			$link_type	the type of link this is
	* @param string			$value		the value that is to be associated with this link
	* @param string			$sort_order	the position in the links list that this link should take,
	*									if null or less than zero places at end of list
	* @param string			$dependant	'0' / '1' on whether the this asset is dependant on the
	*									asset that will be linked by this new link
	* @param string			$exclusive	'0' / '1' on whether the this asset is linked exclusivly
	*									to the asset that will be linked by this new link
	*
	* @return int
	* @access public
	*/
	function createLink(&$minor, $link_type, $value='', $sort_order=null, $dependant='0', $exclusive='0')
	{
		$GLOBALS['SQ_SYSTEM']->doTransaction('BEGIN');

		$linkid = parent::createLink($minor, $link_type, $value, $sort_order, $dependant, $exclusive);
		if (!$linkid) {
			$GLOBALS['SQ_SYSTEM']->doTransaction('ROLLBACK');
			return false;
		}

		// special processing if we are creating a TYPE_2 linked file (inherited by customisations)
		if (is_a($minor, 'file')) {

			$am = &$GLOBALS['SQ_SYSTEM']->am;

			$customisation_links = $GLOBALS['SQ_SYSTEM']->am->getLinks($this->id, SQ_LINK_TYPE_2, 'design_css_customisation', true, 'major', 'customisation');
			foreach ($customisation_links as $link) {
				$customisation = &$am->getAsset($link['minorid'], $link['minor_type_code']);
				if (is_null($customisation)) continue;

				$file_link_ids = Array();
				$file_links = $GLOBALS['SQ_SYSTEM']->am->getLinks($customisation->id, SQ_LINK_TYPE_2, 'file', false);
				foreach ($file_links as $link) {
					$file_link_ids[] = $link['minorid'];
				}
				$file_link_info = $am->getAssetInfo(array_unique($file_link_ids));

				// is there already a direct file with the same name
				$insert_link = true;
				foreach ($file_link_info as $info) {
					if ($info['name'] == $minor->name) {
						$insert_link = false;
					}
				}

				if ($insert_link) {
					if (!$customisation->createLink($minor, SQ_LINK_TYPE_3, '', null, 1)) {
						trigger_localised_error('CORE0162', E_USER_WARNING);
						$am->forgetAsset($customisation);
						$GLOBALS['SQ_SYSTEM']->doTransaction('ROLLBACK');
						return false;
					}
				}

				$am->forgetAsset($customisation);

			}//end foreach customisation

		}//end if is_a file

		$GLOBALS['SQ_SYSTEM']->doTransaction('COMMIT');
		return $linkid;

	}//end createLink()


	/**
	* Removes a link where this asset is the major player
	*
	* @param int	$linkid	the link id of the link to remove
	*
	* @return boolean
	* @access public
	*/
	function deleteLink($linkid)
	{
		// first, we should try and find the link
		$delete_link = $GLOBALS['SQ_SYSTEM']->am->getLinkById($linkid, $this->id);
		if (empty($delete_link)) {
			trigger_localised_error('CORE0155', E_USER_WARNING, $linkid);
			return false;
		}

		$am = &$GLOBALS['SQ_SYSTEM']->am;
		$minor = &$am->getAsset($delete_link['minorid'], $delete_link['minor_type_code']);

		$GLOBALS['SQ_SYSTEM']->doTransaction('BEGIN');

		// special processing if we are deleting a TYPE_2 linked file (a file overridding a design file)
		if (is_a($minor, 'file')) {

			$customisation_links = $GLOBALS['SQ_SYSTEM']->am->getLinks($this->id, SQ_LINK_TYPE_2, 'design_css_customisation', true, 'major', 'customisation');
			foreach ($customisation_links as $link) {
				$customisation = &$am->getAsset($link['minorid'], $link['minor_type_code']);
				if (is_null($customisation)) continue;

				$file_link_ids = Array();
				$file_links = $GLOBALS['SQ_SYSTEM']->am->getLinks($customisation->id, SQ_LINK_TYPE_3, 'file', false);

				foreach ($file_links as $link) {
					if ($link['minorid'] == $delete_link['minorid']) {
						// found the link to delete
						if (!$customisation->deleteLink($link['linkid'])) {
							trigger_localised_error('CORE0165', E_USER_WARNING);
							$am->forgetAsset($customisation);
							$GLOBALS['SQ_SYSTEM']->doTransaction('ROLLBACK');
							return false;
						}
					}
				}//end foreach $file_links

				$am->forgetAsset($customisation);

			}//end foreach customisation
		} //end is_a file

		if (!parent::deleteLink($linkid)) {
			$GLOBALS['SQ_SYSTEM']->doTransaction('ROLLBACK');
			return false;
		}

		$GLOBALS['SQ_SYSTEM']->doTransaction('COMMIT');
		return true;

	}//end deleteLink()


	/**
	* Does the actual removing of the link for the customisation
	*
	* The default deleteLink() replaces the (Type-2) links of any customised design files with a Type-3
	* to the uncustomised version. This screws things around when creating the customised versions in
	* the first place.
	*
	* @param int	$linkid	the link id of the link to remove
	*
	* @return boolean
	* @access public
	*/
	function deleteExistingLink($linkid)
	{
		// first, we should try and find the link
		$delete_link = $GLOBALS['SQ_SYSTEM']->am->getLinkById($linkid, $this->id);
		if (empty($delete_link)) {
			trigger_localised_error('CORE0155', E_USER_WARNING, $linkid);
			return false;
		}

		$am = &$GLOBALS['SQ_SYSTEM']->am;
		$minor = &$am->getAsset($delete_link['minorid'], $delete_link['minor_type_code']);

		$GLOBALS['SQ_SYSTEM']->doTransaction('BEGIN');

		if (!parent::deleteLink($linkid)) {
			$GLOBALS['SQ_SYSTEM']->doTransaction('ROLLBACK');
			return false;
		}

		$GLOBALS['SQ_SYSTEM']->doTransaction('COMMIT');

		return true;

	}//end deleteExistingLink()


	/**
	* Prints out the Frontend for this asset
	* it's up to the kids to override
	*
	* @return void
	* @access public
	*/
	function printFrontend()
	{
		$this->paint($this);
	}//end printFrontend()


	/**
	* Returns the parent design/design_customisation that this customisation is customising
	*
	* @return mixed object Design or null
	* @access public
	*/
	function &getParentDesign()
	{
		// a css file is its own customisation
		return $this;

	}//end getParentDesign()


	/**
	* Outputs the either as straight HTML or PHP code for the var, depending on the type
	*
	* @param string	$var	the name of the var to print out
	* @param Array	$args	array of any extra arguments that existed in the print command
	*
	* @return void
	* @access public
	*/
	function printVar($var, $args)
	{
		switch ($var) {
			case 'css_header' :
echo '/*   <?php echo SQ_CONF_SYSTEM_NAME."\n"; ?>
	  Content (c) Copyright <?php echo SQ_CONF_SYSTEM_OWNER."\n"; ?>
	Running <?php echo SQ_SYSTEM_LONG_NAME; ?> - <?php echo SQ_SYSTEM_URL."\n"; ?>
   Developed by Squiz  - http://www.squiz.net
  (c) Copyright <?php echo date(\'Y\') ?>. All rights reserved.
  Page generated: <?php echo date(\'d F Y\')."\n"; ?>
*/

';
			break;

			default :
				parent::printVar($var, $args);

		}//end switch

	}//end printVar()


	/**
	* Processes a backend submission from this asset, returns true if all OK
	*
	* @param object Backend_Outputter	$o
	* @param array(string)				&$link	information used to create the initial link
	*
	* @return boolean
	* @access public
	*/
	function processBackend(&$o, &$link)
	{
		$cache = $this->attr('cache_css');
		if (!parent::processBackend($o, $link)) return false;

		// Okay, if after processing everything in the backend, and the
		// status of the cache_css attribute has gone from false to true,
		// we've gotta update the static cache to reflect that this has changed.
		if (!$cache && $this->attr('cache_css') && !$this->_tmp['updated_cache']) {
			$this->generateStaticFile();
			$am = &$GLOBALS['SQ_SYSTEM']->am;
			$customisation_links = $am->getLinks($this->id, SQ_LINK_TYPE_2, 'design_css_customisation', true, 'major', 'customisation');

			foreach ($customisation_links as $link) {
				$customisation = &$am->getAsset($link['minorid'], $link['minor_type_code']);
				if (is_null($customisation)) continue;
				$customisation->generateStaticFile();
			}// end foreach
		}
		return true;

	}//end processBackend()


	/**
	* (Re)Generates the design file
	*
	* @param bool	$do_customisations	Generate design files for any customisations
	*
	* @return void
	* @access public
	*/
	function generateDesignFile($do_customisations=true)
	{
		$edit_fns = $this->getEditFns();
		$edit_fns->createDesignFile($this);

		$do_customisations = true;
		if ($do_customisations) {
			$customisation_links = $GLOBALS['SQ_SYSTEM']->am->getLinks($this->id, SQ_LINK_TYPE_2, 'design_css_customisation', true, 'major', 'customisation');
			$am = &$GLOBALS['SQ_SYSTEM']->am;

			foreach ($customisation_links as $link) {
				$customisation = &$am->getAsset($link['minorid'], $link['minor_type_code']);
				if (is_null($customisation)) continue;
				$customisation->generateDesignFile(true);
			}// end foreach
		}// end if

		if ($this->attr('cache_css')) {
			$this->generateStaticFile();
		}
	}//end generateDesignFile()


	/**
	* Creates / updates the static file for this css design
	* @return boolean
	* @access public
	*/
	function generateStaticFile()
	{
		// See if the cache file asset already exists.
		/* @var $am Asset_Manager */
		$am = &$GLOBALS['SQ_SYSTEM']->am;

		// Generate the CSS static file. Note that we've turned error_reporting off for this
		// because design_file.php does a whole bunch of define()ing that can cause problems
		$old_level = error_reporting();
		error_reporting(0);
		ob_start();
			$this->paint($this);
			$file_contents = ob_get_contents();
		ob_end_clean();
		error_reporting($old_level);

		$cache_link = &$am->getLink($this->id, SQ_LINK_TYPE_3, 'file', 'false', 'css_cache');
		if (empty($cache_link)) {
			$cache_asset = $this->createCache();
		} else {
			$cache_asset = &$am->getAsset($cache_link['minorid']);
		}

		if ($cache_asset == null) return false;

		/* @var $cache_asset File */
		$existing = $cache_asset->getExistingFile();
		string_to_file($file_contents, $existing['path']);

		/* @var $fv File_Versioning */
		$fv = &$GLOBALS['SQ_SYSTEM']->getFileVersioning();
		$file_status = $fv->upToDate($cache_asset->data_path.'/'.$cache_asset->_getName());
		if (FUDGE_FV_MODIFIED & $file_status) {
			if (!$fv->commit($cache_asset->data_path.'/'.$cache_asset->_getName())) {
				trigger_localised_error('CORE0034', E_USER_WARNING);
				return false;
			}
		}
		$this->_tmp['updated_cache'] = true;
		return $cache_asset->_updated();

	}//end generateStaticFile()


	/**
	* Gets the static cache file asset id of this CSS asset
	* @return string
	*/
	function getStaticCacheId()
	{
		$am = &$GLOBALS['SQ_SYSTEM']->am;
		$cache_link = $am->getLink($this->id, SQ_LINK_TYPE_3, 'file', 'false', 'css_cache');
		if (empty($cache_link) || !$this->attr('cache_css')) {
			return 0;
		}
		return $cache_link['minorid'];
	}//end getStaticCacheId()


	/**
	* Creates the cache file asset that this CSS asset will display in the cache
	* @param string $initial_contents The initial contents of the cache file
	* @return array The link that represents this cache.
	*/
	function &createCache()
	{
		$null = null;
		if (!touch($this->data_path.$this->_getName().'.css')) {
			return $null;
		}

		$tmp_file = $this->data_path.$this->_getName().'.css';
		$filename = $this->_getName().'.css';
		$import_link = Array('asset' => &$this, 'link_type' => SQ_LINK_TYPE_3, 'value' => 'css_cache', 'sort_order' => 1, 'is_dependant' => 1);
		$temp_info = Array('name' => $filename, 'tmp_name' => $tmp_file, 'non_uploaded_file' => true);

		require_once SQ_CORE_PACKAGE_PATH.'/files/file/file.inc';
		$new_file = new File();
		$new_file->_tmp['uploading_file'] = true;
		$new_file->setAttrValue('name', $filename);

		if (!$new_file->create($import_link, $temp_info)) {
			trigger_localised_error('CORE0058', E_USER_WARNING, $filename);
			return $null;
		}

		return $new_file;

	}//end createCache()


	/**
	* Returns the link information for the design area with the given id_name or all design area links
	*
	* @param string	$id_name	the id of the design area to get
	*							if blank returns links for all design areas
	*
	* @return mixed Array or null
	* @access public
	*/
	function getDesignAreaLink($id_name='')
	{
		if ($id_name) {
			return @$GLOBALS['SQ_SYSTEM']->am->getLink($this->id, SQ_LINK_TYPE_3, 'design_area', false, $id_name);
		} else {
			return @$GLOBALS['SQ_SYSTEM']->am->getLinks($this->id, SQ_LINK_TYPE_3, 'design_area', false);
		}

	}//end getDesignAreaLink()


	/**
	* Paints out our design
	*
	* @param object Asset	$ASSET		the asset that we are going to print the body for
	* @param array			$FILE_URLS	an array of filename => URL to use to print files in the design
	*									doesnt need to be passed in unless some URLs are overridden by
	*									a customisation of the design
	*
	* @return void
	* @access public
	*/
	function paint(&$ASSET, $FILE_URLS=Array())
	{
		// generate an array of all the URLs we are going to need for the files in this design
		$file_link_ids = Array();
		$file_links = $GLOBALS['SQ_SYSTEM']->am->getLinks($this->id, SQ_LINK_TYPE_2 | SQ_LINK_TYPE_3, 'file', false);

		foreach ($file_links as $link) {
			$file_link_ids[] = $link['minorid'];
		}

		$file_link_info = $GLOBALS['SQ_SYSTEM']->am->getAssetInfo(array_unique($file_link_ids));
		$file_link_urls = $GLOBALS['SQ_SYSTEM']->am->getAssetURL(array_unique($file_link_ids));

		$system_root_url = sq_web_path('root_url');
		foreach ($file_link_info as $minorid => $file_info) {
			$file_url = $file_link_urls[$minorid];
			if ($file_url == '') {
				$file_url = $system_root_url.'/?a='.$minorid;
			}
			$FILE_URLS[$file_info['name']] = $file_url;
		}

		$DATA_PATH = sq_web_path('data'); // this works because we know that all design areas are not going to be restricted
		$LIB_PATH  = sq_web_path('lib');

		// work out where the design file is
		if (SQ_ROLLBACK_VIEW) {
			// get an older version of our design file
			$fv = &$GLOBALS['SQ_SYSTEM']->getFileVersioning();
			$rep_file = $this->data_path_suffix.'/design_file.php';
			$then = iso8601_ts($_SESSION['sq_rollback_view']['rollback_time']);
			$info = $fv->_checkOutCheck($rep_file, null, $then);
			$file_path = $info['source_file'];
		} else {
			$file_path = $this->data_path.'/design_file.php';
		}

		// Now we just include the design file to get it to print
		require_once $file_path;

	}//end paint()


}//end class

?>
