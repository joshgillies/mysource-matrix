<?php
/**
* +--------------------------------------------------------------------+
* | Squiz.net Open Source Licence                                      |
* +--------------------------------------------------------------------+
* | Copyright (c), 2003 Squiz Pty Ltd (ABN 77 084 670 600).            |
* +--------------------------------------------------------------------+
* | This source file may be used subject to, and only in accordance    |
* | with, the Squiz Open Source Licence Agreement found at             |
* | http://www.squiz.net/licence.                                      |
* | Make sure you have read and accept the terms of that licence,      |
* | including its limitations of liability and disclaimers, before     |
* | using this software in any way. Your use of this software is       |
* | deemed to constitute agreement to be bound by that licence. If you |
* | modify, adapt or enhance this software, you agree to assign your   |
* | intellectual property rights in the modification, adaptation and   |
* | enhancement to Squiz Pty Ltd for use and distribution under that   |
* | licence.                                                           |
* +--------------------------------------------------------------------+
*
* $Id: inbox.inc,v 1.25.2.1 2005/08/16 05:18:46 dmckee Exp $
*
*/


require_once SQ_INCLUDE_PATH.'/asset.inc';

/**
* Inbox
*
* Purpose
*
*
* @author  Greg Sherwood <greg@squiz.net>
* @version $Revision: 1.25.2.1 $
* @package MySource_Matrix_Packages
* @subpackage __core__
*/
class Inbox extends Asset
{


	/**
	* Constructor
	*
	* @param int	$assetid	the asset id to be loaded
	*
	*/
	function Inbox($assetid=0)
	{
		$this->Asset($assetid);

	}//end constructor


	/**
	* Returns a list of lock types available for this asset type
	*
	* @return Array()
	* @access public
	*/
	function lockTypes()
	{
		$lock_types = parent::lockTypes();
		$lock_types['mail'] = max($lock_types) * 2;
		return $lock_types;

	}//end lockTypes()


	/**
	* Gets the user that this inbox is attached to
	*
	* @return object User
	* @access private
	*/
	function &_getUser()
	{
		$link = $GLOBALS['SQ_SYSTEM']->am->getLink($this->id, SQ_LINK_TYPE_2, 'user', false, '', 'minor', '1');
		$user = &$GLOBALS['SQ_SYSTEM']->am->getAsset($link['majorid'], $link['major_type_code']);
		return $user;

	}//end _getUser()


	/**
	* Can this asset have its last significant link removed (putting it in the trash)?
	*
	* @return boolean
	* @access public
	*/
	function canDelete()
	{
		return false;

	}//end canDelete()


	/**
	* Returns true if at least one of the passed assetids has the passed permission
	* Does not check current status of lock
	*
	* @param int	$perm		the permission to check access for
	* @param array	$assetids	An array of user_group and/or user ids to check for permission
	*							If the array is empty, the current user will be checked
	*
	* @return boolean
	* @access public
	*/
	function _checkPermissionAccess($perm, $assetids=Array())
	{
		$user = &$this->_getUser();
		if (empty($assetids)) {
			// root can do anything
			if ($GLOBALS['SQ_SYSTEM']->userRoot()) return true;

			if ($GLOBALS['SQ_SYSTEM']->userRoot($user)) {
				// we have to be root to view root's inbox
				return false;
			} else if ($GLOBALS['SQ_SYSTEM']->userSystemAdmin($user)) {
				// this is the inbox of a sysadmin so they need to
				// be root or the sysadmin themselves
				if (!$GLOBALS['SQ_SYSTEM']->userSystemAdmin()) {
					return false;
				}
				if ($user->id == $GLOBALS['SQ_SYSTEM']->currentUserId()) {
					return true;
				}
				return false;
			} else {
				// any other user's inbox
				if ($GLOBALS['SQ_SYSTEM']->userSystemAdmin()) {
					return true;
				}
				if ($user->id == $GLOBALS['SQ_SYSTEM']->currentUserId()) {
					return true;
				}
			}
		} else {
			// a user always has full access to their own inbox
			if (in_array($user->id, $assetids)) return true;

		}

		return parent::_checkPermissionAccess($perm, $assetids);

	}//end _checkPermissionAccess()


	/**
	* Prints out the Frontend for this asset
	* it's up to the kids to override
	*
	* @return void
	* @access public
	*/
	function printFrontend()
	{
		if (!$this->readAccess()) {
			$GLOBALS['SQ_SYSTEM']->paintLogin(translate('login'), translate('cannot_access_asset', $this->name));
			return;
		}

		$this->printBody();

	}//end printFrontend()


	/**
	* Prints out the backend interface for the asset
	* it's up to the kids to override
	*
	* @param object Backend_Outputter $o
	*
	* @access public
	*/
	function paintBackend(&$o)
	{
		if (isset($_REQUEST['gettrash'])) {
			$user = &$this->_getUser();

			$ms = &$GLOBALS['SQ_SYSTEM']->getMessagingService();
			$messages = $ms->getMessages($user->id, null, Array(SQ_MSG_DELETED), Array(), null, null, 'name');
			echo '<root>';
			foreach ($messages as $key => $message) {
				echo '<message from="'.$message['from_name'].'" id="'.$message['msgid'].'" date="'.$GLOBALS['SQ_SYSTEM']->datetime($message['sent']).'"';
				echo ' subject="'.$message['subject'].'">'.$message['body'].'</message>';
			}
			echo '</root>';
			exit();
		}

		parent::paintBackend($o);

	}//end paintBackend()


	/**
	* Called by the design to print the body of this asset
	*
	* @access public
	*/
	function printBody()
	{
		$edit = $this->getEditFns();
		if (isset($_REQUEST['msgid'])) {
			// they want to print a single message
			$edit->paintMessage($_REQUEST['msgid']);
		} else {
			// they want to print all mail
			if (!SQ_IN_BACKEND) {
				$GLOBALS['SQ_SYSTEM']->am->acquireLock($this->id, 'mail');
				$user =& $this->_getUser();
				?>
				<script type="text/javascript" src="<?php echo sq_web_path('lib'); ?>/js/general.js"></script>
				<script type="text/javascript" src="<?php echo sq_web_path('lib'); ?>/html_form/html_form.js"></script>
				<h2 style="margin-bottom: 2px">Inbox for <?php echo $user->attr('first_name').' '.$user->attr('last_name'); ?></h2>
				<form method="POST" action="<?php echo $_SERVER['REQUEST_URI']; ?>" name="main_form" id="main_form">
				<?php
			}

			$null = '';
			$edit->paintMail($this, $null, 'inbox');

			if (!SQ_IN_BACKEND) {
				?>
				</form>
				<?php
			}
		}

	}//end printBody()


	/**
	* Returns name of the asset
	*
	* @param boolean	$short_name	whether or not we are after the short name or the full name
	*
	* @access private
	* @see Asset::_getName()
	*/
	function _getName($short_name=false)
	{
		return 'Inbox';

	}//end _getName()


}//end class

?>