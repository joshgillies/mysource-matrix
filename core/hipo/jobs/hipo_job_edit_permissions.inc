<?php
/**
* +--------------------------------------------------------------------+
* | Squiz.net Open Source Licence                                      |
* +--------------------------------------------------------------------+
* | Copyright (c), 2003 Squiz Pty Ltd (ABN 77 084 670 600).            |
* +--------------------------------------------------------------------+
* | This source file may be used subject to, and only in accordance    |
* | with, the Squiz Open Source Licence Agreement found at             |
* | http://www.squiz.net/licence.                                      |
* | Make sure you have read and accept the terms of that licence,      |
* | including its limitations of liability and disclaimers, before     |
* | using this software in any way. Your use of this software is       |
* | deemed to constitute agreement to be bound by that licence. If you |
* | modify, adapt or enhance this software, you agree to assign your   |
* | intellectual property rights in the modification, adaptation and   |
* | enhancement to Squiz Pty Ltd for use and distribution under that   |
* | licence.                                                           |
* +--------------------------------------------------------------------+
*
* $Id: hipo_job_edit_permissions.inc,v 1.32.2.2 2005/05/20 06:43:32 tbarrett Exp $
* $Name: not supported by cvs2svn $
*/

require_once SQ_SYSTEM_ROOT.'/core/hipo/hipo_job.inc';

/**
* Highly Intensive Processing Object (HIPO) to edit asset permissions
*
* <pre>
* Initial Running Vars :
*    int    assetid             -  the assetid with whose children we are going to attempt to lock
*    Array  permission_changes  -  the values that we are trying to set for our children, in the form :
*                                  $changes = Array([perm] => Array (
*                                                                       Array(
*                                                                           'granted'         => $granted,
*                                                                           'userid'          => $userid,
*                                                                           'previous_access' => null,
*                                                                      ),
*                                                   ),
* </pre>
*
* @author  Greg Sherwood <greg@squiz.net>
* @version $Version$ - 1.0
* @package MySource_Matrix
* @subpackage HIPO
*/
class HIPO_Job_Edit_Permissions extends HIPO_Job
{

	/**
	* The name of this HIPO job (should not be modified by code)
	* @var string
	*/
	var $hipo_name = 'Edit Permissions';

	/**
	* Array of steps to perform in this HIPO
	* @var Array
	*/
	var $_steps = Array(
					Array(
						'name'			=> 'Acquiring Permission Locks',
						'hipo_job'		=> Array(
												'init_details_function' => 'getLockAssetDetails',
												),
						'running_mode'	=> 'server',
						'auto_step'		=> true,
						'allow_cancel'	=> true,
						'percent_done'	=> 0,
						'complete'		=> false,
						'message'		=> '',
					),
					Array(
						'name'             => 'Updating Permissions',
						'function_call'    => Array(
												'process_function' => 'processPermissions',
												),
						'running_mode'     => 'server',
						'auto_step'        => true,
						'allow_cancel'     => true,
						'percent_done'     => 0,
						'complete'         => false,
						'message'          => '',
					),
					Array(
						'name'			=> 'Releasing Permission Locks',
						'function_call'    => Array(
												'process_function' => 'releaseLocks',
												),
						'running_mode'	=> 'server',
						'auto_step'		=> true,
						'allow_cancel'	=> false,
						'percent_done'	=> 0,
						'complete'		=> false,
						'message'		=> '',
					),
				);


	/**
	* Constructor
	*
	* @param string	$code_name		a unique codename the HIPO
	*/
	function HIPO_Job_Edit_Permissions($code_name='')
	{
		$this->HIPO_Job($code_name);

	}//end constructor


	/**
	* Paints backend of this job
	*
	* @param object Backend_Outputter	&$o			reference to the backend outputter
	* @param string						$class		calling class name
	*
	* @return void
	* @access private
	*/
	function paintConfig(&$o, $class)
	{
		$write_access = $this->writeAccess();

		// metadata regeneration threshhold HIPO config entry
		$o->openField('Permissions Threshold');

		if ($write_access) {
			text_box($class.'[SQ_HIPO_PERMISSIONS_THRESHOLD]', SQ_HIPO_PERMISSIONS_THRESHOLD, 5);
			$o->note('Value will be divided by number of affected permissions');
		} else {
			echo SQ_HIPO_PERMISSIONS_THRESHOLD;
		}

		$o->closeField();

	}//end paintConfig()


	/**
	* Sets some info about thresholds that this hipo requires.
	*
	* @return Array
	* @access public
	*/
	function getConfigVars()
	{
		return Array(
			'SQ_HIPO_PERMISSIONS_THRESHOLD' => Array('editable' => 1, 'default' => 1),
		);

	}//end getConfigVars()


	/**
	* Returns a unique codename the HIPO can use to ensure it is not being run twice
	*
	* The Edit Permission HIPO appends the ID of the asset that the permissions are being set at
	* (the top most parent) so that any other permission jobs on this asset do not start while it
	* is running. Due to locking of the interface, nobody should be allowed to run this HIPO at
	* the same time on the same parent asset.
	*
	* @return string
	* @access public
	*/
	function getCodeName()
	{
		return parent::getCodeName().$this->_running_vars['assetid'];

	}//end getCodeName()


	/**
	* Returns the current Threshold.
	*
	* Returns a value that represents the total percentage that this hipo would run in freestyle mode in its current state.
	*
	* @return float
	* @access public
	*/
	function getThreshold()
	{
		if (SQ_HIPO_PERMISSIONS_THRESHOLD == 0) return 0;
		if (!isset($this->_running_vars['todo_assetids'])) return 0;
		return ((count($this->_running_vars['todo_assetids']) / (SQ_HIPO_PERMISSIONS_THRESHOLD / count($this->_running_vars['permission_changes']))) * 100);

	}//end getThreshold()


	/**
	* Performs the duties of this hipo, without showing any output on the frontend.
	*
	* @return boolean
	* @access public
	*/
	function freestyle()
	{
		while (!empty($this->_running_vars['todo_assetids'])) {
			if (!$this->processPermissions($this->_steps[0], get_class($this))) return false;
		}
		return true;

	}//end freestyle()


	/**
	* Prepares the running vars and gets the children of the asset in question.
	*
	* @return boolean
	* @access public
	*/
	function prepare()
	{
		// to start editing permission, we need to have an asset id to start editing permission at
		if (!isset($this->_running_vars['assetid'])) {
			trigger_error('Cannot initialise Edit Permissions HIPO, no start asset ID specified', E_USER_WARNING);
			return '';
		}

		// so we have an assetid to start at, but make sure it is a valid assetid
		$asset = &$GLOBALS['SQ_SYSTEM']->am->getAsset($this->_running_vars['assetid']);
		if (is_null($asset)) {
			trigger_error('Cannot initialise Edit Permissions HIPO, invalid start asset ID specified ('.$this->_running_vars['assetid'].')', E_USER_WARNING);
			return '';
		}

		if (empty($this->_running_vars['permission_changes'])) {
			trigger_error('Cannot initialise Edit Permissions HIPO, no permission changes specified', E_USER_WARNING);
			return '';
		}

		// we have a valid asset, so get all the assets below this one in the tree(s) so we know what assets
		// we will be affecting out list of permission changes on

		$child_assets = Array();

		if (array_get_index($this->_running_vars, 'dependants_only')) {
			$child_assets = $GLOBALS['SQ_SYSTEM']->am->getDependantChildren($asset->id);
		} else {
			$child_assets = $GLOBALS['SQ_SYSTEM']->am->getChildren($asset->id);
		}

		$child_assets[$asset->id] = $asset->type();
		$this->_running_vars['todo_assetids'] = $child_assets;
		$this->_running_vars['done_assetids'] = Array();

		unset($asset);

		return parent::prepare();
	}


	/**
	* Edit permissions for a single asset in the to-do list
	*
	* @param array()	&$step_data	a reference to the array of information about the current step
	* @param string		$prefix		prefix for form vars
	*
	* @return boolean
	* @access public
	*/
	function processPermissions(&$step_data, $prefix)
	{
		if (!empty($this->_running_vars['todo_assetids'])) {
			$assetid = array_shift(array_keys($this->_running_vars['todo_assetids']));
			$asset_type = $this->_running_vars['todo_assetids'][$assetid];
			unset($this->_running_vars['todo_assetids'][$assetid]);
			$asset = &$GLOBALS['SQ_SYSTEM']->am->getAsset($assetid, $asset_type);

			if (!is_null($asset)) {
				foreach ($this->_running_vars['permission_changes'] as $perm => $perm_data) {
					require_once SQ_INCLUDE_PATH.'/general_occasional.inc';
					$perm_name = permission_type_name($perm);

					foreach ($perm_data as $set_data) {
						if ($set_data['userid']) {
							// use getAssetInfo() because deleting permissions
							// held by deleted users (eg.LDAP) will cause an assertion
							$user_info = $GLOBALS['SQ_SYSTEM']->am->getAssetInfo(Array($set_data['userid']), 'user', false);

							// check that the passed userid is a user or user_group
							if (empty($user_info)) {
								$user_name = 'Unknown User';
							} else {
								$user_name = $user_info[$set_data['userid']]['name'];
							}
						} else {
							$user_name = 'General Public';
						}

						if ($set_data['previous_access'] === null) {
							// to edit this permission, there must not currently be a permission set
							// at all - either grant OR deny - for this user
							$current = $GLOBALS['SQ_SYSTEM']->am->getPermission($asset->id, $perm, !(bool)$set_data['granted'], false, false, true);
							if (isset($current[$set_data['userid']])) {
								$new_access     = ($set_data['granted']) ? 'grant' : 'revoke';
								$current_access = ($current[$set_data['userid']]) ? 'granted' : 'revoked';
								$this->_addError('Could not '.$new_access.' '.$perm_name.' access for "'.$user_name.'" on "'.$asset->name.'" because this asset already has '.$current_access.' '.$perm_name.' access to "'.$user_name.'". The current permission for "'.$asset->name.'" has been retained.', true);
								continue;
							}
						} else {
							// we need to have a permission set and the access level be the same
							$current = $GLOBALS['SQ_SYSTEM']->am->getPermission($asset->id, $perm, null, false, false, true);
							if (!isset($current[$set_data['userid']])) {
								continue;
							} elseif ($current[$set_data['userid']] != $set_data['previous_access']) {
								$new_access     = ($set_data['previous_access']) ? 'grant'   : 'revoke';
								$current_access = ($set_data['previous_access']) ? 'revoked' : 'granted';
								$this->_addError('Could not '.$new_access.' '.$perm_name.' access for "'.$user_name.'" on "'.$asset->name.'" because this asset already has '.$current_access.' '.$perm_name.' access to "'.$user_name.'". The current permission for "'.$asset->name.'" has been retained.', true);
								continue;
							}

						}

						switch ($set_data['granted']) {
							case -1 :
								// delete a permission
								$GLOBALS['SQ_SYSTEM']->am->deletePermission($asset->id, $set_data['userid'], $perm);
							break;

							case 0  :
							case 1  :
								// deny a permission
								// grant a permission
								$GLOBALS['SQ_SYSTEM']->am->setPermission($asset->id, $set_data['userid'], $perm, $set_data['granted']);
							break;
						}
					}
				}

				$step_data['message'] = 'Editing Permissions for "'.$asset->name.'"';
				$GLOBALS['SQ_SYSTEM']->am->forgetAsset($asset);
				unset($asset);
			} else {
				$step_data['message'] = 'Skipping asset '.$assetid;
				$this->_addError('Could not edit permissions for asset #'.$assetid.', asset does not exist');
			}

			// add this assetid to the done array so we dont do it again
			$this->_running_vars['done_assetids'][] = $assetid;

		}// end if

		if (empty($this->_running_vars['todo_assetids'])) {
			$step_data['percent_done'] = 100;
			$step_data['complete']     = true;
		} else {
			$total = count($this->_running_vars['todo_assetids']) + count($this->_running_vars['done_assetids']);
			$step_data['percent_done'] =(count($this->_running_vars['done_assetids']) / $total) * 100;
			$step_data['complete']     = false;
		}

		return true;

	}//end processPermissions()


	/**
	* This function is used to set-up the details for the locking the assets by the nested HIPO_Job
	*
	* @param string		&$job_type
	* @param Array()	&$running_vars
	* @param Array()	&$options
	*
	* @return void
	* @access public
	*/
	function getLockAssetDetails(&$job_type, &$running_vars, &$options)
	{
		$job_type = 'hipo_job_acquire_lock';

		$options['auto_complete'] = true;

		$running_vars['assetid']			= $this->_running_vars['assetid'];
		$running_vars['lock_type']			= 'permissions';
		$running_vars['dependants_only']	= isset($this->_running_vars['dependants_only']);
		$running_vars['forceably_acquire']	= false;

	}//end getLockAssetDetails()


	/**
	* Release the locks we acquired while setting the permissions
	*
	* @param array()	&$step_data	a reference to the array of information about the current step
	* @param string		$prefix		prefix for form vars
	*
	* @return boolean
	* @access public
	*/
	function releaseLocks(&$step_data, $prefix)
	{
		$asset = &$GLOBALS['SQ_SYSTEM']->am->getAsset($this->_running_vars['assetid']);
		if (!is_null($asset)) {
			$GLOBALS['SQ_SYSTEM']->am->releaseLock($asset->id, 'permissions');
			$step_data['message'] = 'Releasing Locks';
		}
		$step_data['percent_done'] = 100;
		$step_data['complete']     = true;
		return true;

	}//end releaseLocks()


}//end class

?>